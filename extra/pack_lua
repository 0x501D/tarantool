#!/usr/bin/perl

use warnings;
use strict;

use utf8;
use open qw(:std :utf8);

use File::Basename qw(dirname basename);
use Getopt::Long qw(GetOptions);
use Pod::Usage;

sub quote($) {
    my ($str) = @_;
    for ($str) {
        s/\\/\\\\/g;
        s/"/\\"/g;
        s/\n/\\n/gs;
        s/\r/\\r/gs;
        s/\t/\\t/gs;
        s/(.)/(ord($1) < 0x20) ? sprintf('\\x%02X', ord $1) : $1/ges;
    }
    $str;
}

GetOptions
    'o|output=s'    =>  \my $output,
    'h|help'        =>  \my $help
;

pod2usage({ -verbose => 2}) if $help;
pod2usage unless @ARGV;

if ($output) {
    close STDOUT;
    open STDOUT, '>', $output or die "Can't write file $output: $!\n";
}

printf <<eof, basename($0), join "\n *\t- ", @ARGV;
/*
 * Autogenerated file by 'extra/%s' from:
 *\t- %s
 */

const struct { const char *file, *body; } box_lua[] = {
eof

for (0 .. $#ARGV) {
    print qq[\t{\n];
    printf qq{\t\t"%s",\n}, quote basename $ARGV[$_];
    open my $fh, '<', $ARGV[$_] or die "Can't open file $ARGV[$_]: $!\n";
    printf qq{\t\t"%s"\n}, quote $_ for <$fh>;
    print "\t},\n";
}

print "\t{ 0, 0 }\n};\n\n";

=head1 NAME

extra/pack_lua - packs internal lua files into one C-module

=head1 SYNOPSIS

    perl extra/pack_lua -o output.file.c file1.lua file2.lua ...

=cut
