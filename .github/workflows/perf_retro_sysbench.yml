name: perf_retro_sysbench

on:
  push:
  repository_dispatch:
    types: [backend_automation]
  workflow_dispatch:

jobs:
  generate_matrix:
    if: github.event_name == 'push' ||
      github.event_name == 'repository_dispatch' ||
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'schedule'

    runs-on: ubuntu-latest
    outputs:
      iterations: ${{ steps.generate-matrix.outputs.iterations }}
    steps:
      - name: Generate Matrix
        id: generate-matrix
        run: |
          JSON_FMT='%s    {"iterations":"%s",},\n'
          for i in {3..3}
          do
               JSON_STRING=$(printf "$JSON_FMT" "$JSON_STRING" "$i")
          done
          echo $JSON_STRING | sed 's/},/},\n/g'
          echo "::set-output name=iterations::{\"include\":[$JSON_STRING]}"

  perf_sysbench:
    needs: generate_matrix

    if: github.event_name == 'push' ||
        github.event_name == 'repository_dispatch' ||
        github.event_name == 'workflow_dispatch' ||
        github.event_name == 'schedule'

    runs-on: perf-sh3

    strategy:
      max-parallel: 1
      fail-fast: false
      matrix: ${{fromJson(needs.generate_matrix.outputs.iterations)}}

    steps:
#      TODO: migrate to v2 when Git 2.18 or higher would be available
      - uses: actions/checkout@v1
        with:
          submodules: true
          path: tarantool_for_retro
      - uses: actions/checkout@v2.3.4
        with:
          path: tarantool
      - uses: actions/checkout@v2.3.4
        with:
          path: sysbench
          repository: tarantool/sysbench
      - name: tarantool build
        run: |
          git submodule update --init --recursive
          echo ${{ matrix.iterations }}
          git checkout HEAD~${{ matrix.iterations }}
          git submodule update --init --recursive
          cmake . -DENABLE_DIST=ON -DCMAKE_BUILD_TYPE=RelWithDebInfo && make -j 4
          echo $(git log -1 --format=%ct)
          COMMIT_TIMESTAMP=$(git log -1 --format=%ct)
          echo "$COMMIT_TIMESTAMP" > COMMIT_TIMESTAMP_${{ matrix.iterations }}
      - name: configure perf benchmark
        run: |
          ./autogen.sh
          ./configure --with-tarantool --without-mysql
          make -j 4
        working-directory: ${{ github.workspace }}/sysbench
      - name: run benchmark
        run: ./run.sh
        working-directory: tarantool/bench-run/benchs/sysbench
      - name: call action to send Telegram message on failure
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_CORE_TOKEN }}
          TELEGRAM_TO: ${{ secrets.TELEGRAM_CORE_TO }}
        uses: ./.github/actions/send-telegram-notify
        if: failure()
      - name: artifacts
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: perf_sysbench_${{ matrix.iterations }}
          retention-days: 21
          path: |
            tarantool/bench-run/benchs/sysbench/*_result.txt
            tarantool/bench-run/benchs/sysbench/*_t_version.txt
            COMMIT_TIMESTAMP_${{ matrix.iterations }}

  publish:
    needs: [generate_matrix, perf_sysbench]
    # TODO: either fix post request availability from perf machines or
    # decide which boxes could be used
    runs-on: manual

    strategy:
      max-parallel: 1
      fail-fast: false
      matrix: ${{fromJson(needs.generate_matrix.outputs.iterations)}}

    steps:
      - uses: actions/checkout@v2.3.4
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v2
        with:
          path: ${{ github.workspace }}/bench-run/benchs/publication
      - name: install requirements
        run: python3 -m pip install -r ${{ github.workspace }}/bench-run/requirements.txt
      - name: timestamp
        run: |
          cp -r ./tarantool/bench-run/benchs/sysbench/* ${{ github.workspace }}/bench-run/benchs/publication/perf_sysbench_${{ matrix.iterations }}

          tmp=$(cat COMMIT_TIMESTAMP_${{ matrix.iterations }})
          echo "timestamp=$tmp" >> $GITHUB_ENV
          echo "$tmp"
        working-directory: ${{ github.workspace }}/bench-run/benchs/publication/perf_sysbench_${{ matrix.iterations }}
      - name: publish
        env:
          INFLUXDB_TOKEN: ${{ secrets.INFLUXDB_TOKEN }}
          BRANCH: ${{ github.ref }}
          COMMIT_TIMESTAMP: ${{ env.timestamp }}
        run: ./publish.py -f ./perf_sysbench_${{ matrix.iterations }}
        working-directory: ${{ github.workspace }}/bench-run/benchs/publication
      - name: call action to send Telegram message on failure
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_CORE_TOKEN }}
          TELEGRAM_TO: ${{ secrets.TELEGRAM_CORE_TO }}
        uses: ./.github/actions/send-telegram-notify
        if: failure()
