/* DO NOT EDIT!
 * This file is automatically generated by the script at
 * ../tool/mkpragmatab.tcl.  To update the set of pragmas, edit
 * that script and rerun it.
 */

/* The various pragma types */
#define PragTyp_COLLATION_LIST                 3
#define PragTyp_FOREIGN_KEY_LIST               9
#define PragTyp_INDEX_INFO                    10
#define PragTyp_INDEX_LIST                    11
#define PragTyp_STATS                         15
#define PragTyp_TABLE_INFO                    17

/* Property flags associated with various pragma. */
#define PragFlg_NeedSchema 0x01	/* Force schema load before running */
#define PragFlg_Result0    0x10	/* Acts as query when no argument */
#define PragFlg_Result1    0x20	/* Acts as query when has one argument */
#define PragFlg_SchemaOpt  0x40	/* Schema restricts name search if present */
#define PragFlg_SchemaReq  0x80	/* Schema required - "main" is default */

/**
 * Column names and types for pragmas. The type of the column is
 * the following value after its name.
 */
static const char *const pragCName[] = {
	/* Used by: table_info */
	/*   0 */ "cid",
	/*   1 */ "integer",
	/*   2 */ "name",
	/*   3 */ "text",
	/*   4 */ "type",
	/*   3 */ "text",
	/*   6 */ "notnull",
	/*   1 */ "integer",
	/*   8 */ "dflt_value",
	/*   9 */ "text",
	/*  10 */ "pk",
	/*  11 */ "integer",
	/* Used by: stats */
	/*  12 */ "table",
	/*  13 */ "text",
	/*  14 */ "index",
	/*  15 */ "text",
	/*  16 */ "width",
	/*  17 */ "integer",
	/*  18 */ "height",
	/*  19 */ "integer",
	/* Used by: index_info */
	/*  20 */ "seqno",
	/*  21 */ "integer",
	/*  22 */ "cid",
	/*  23 */ "integer",
	/*  24 */ "name",
	/*  25 */ "text",
	/*  26 */ "desc",
	/*  27 */ "integer",
	/*  28 */ "coll",
	/*  29 */ "text",
	/*  30 */ "type",
	/*  31 */ "text",
	/* Used by: index_list */
	/*  32 */ "seq",
	/*  33 */ "integer",
	/*  34 */ "name",
	/*  35 */ "text",
	/*  36 */ "unique",
	/*  37 */ "integer",
	/* Used by: collation_list */
	/*  38 */ "seq",
	/*  39 */ "integer",
	/*  40 */ "name",
	/*  41 */ "text",
	/* Used by: foreign_key_list */
	/*  42 */ "id",
	/*  43 */ "integer",
	/*  44 */ "seq",
	/*  45 */ "integer",
	/*  46 */ "table",
	/*  47 */ "text",
	/*  48 */ "from",
	/*  49 */ "text",
	/*  50 */ "to",
	/*  51 */ "text",
	/*  52 */ "on_update",
	/*  53 */ "text",
	/*  54 */ "on_delete",
	/*  55 */ "text",
	/*  56 */ "match",
	/*  57 */ "text",
};

/* Definitions of all built-in pragmas */
typedef struct PragmaName {
	const char *const zName;	/* Name of pragma */
	u8 ePragTyp;		/* PragTyp_XXX value */
	u8 mPragFlg;		/* Zero or more PragFlg_XXX values */
	u8 iPragCName;		/* Start of column names in pragCName[] */
	u8 nPragCName;		/* Num of col names. */
	u32 iArg;		/* Extra argument */
} PragmaName;
/**
 * The order of pragmas in this array is important: it has
 * to be sorted. For more info see pragma_locate function.
 */
static const PragmaName aPragmaName[] = {
	{ /* zName:     */ "collation_list",
	 /* ePragTyp:  */ PragTyp_COLLATION_LIST,
	 /* ePragFlg:  */ PragFlg_Result0,
	 /* ColNames:  */ 38, 2,
	 /* iArg:      */ 0},
	{ /* zName:     */ "foreign_key_list",
	 /* ePragTyp:  */ PragTyp_FOREIGN_KEY_LIST,
	 /* ePragFlg:  */
	 PragFlg_NeedSchema | PragFlg_Result1 | PragFlg_SchemaOpt,
	 /* ColNames:  */ 42, 8,
	 /* iArg:      */ 0},
	{ /* zName:     */ "index_info",
	 /* ePragTyp:  */ PragTyp_INDEX_INFO,
	 /* ePragFlg:  */
	 PragFlg_NeedSchema | PragFlg_Result1 | PragFlg_SchemaOpt,
	 /* ColNames:  */ 20, 6,
	 /* iArg:      */ 1},
	{ /* zName:     */ "index_list",
	 /* ePragTyp:  */ PragTyp_INDEX_LIST,
	 /* ePragFlg:  */
	 PragFlg_NeedSchema | PragFlg_Result1 | PragFlg_SchemaOpt,
	 /* ColNames:  */ 32, 3,
	 /* iArg:      */ 0},
	{ /* zName:     */ "stats",
	 /* ePragTyp:  */ PragTyp_STATS,
	 /* ePragFlg:  */
	 PragFlg_NeedSchema | PragFlg_Result0 | PragFlg_SchemaReq,
	 /* ColNames:  */ 12, 4,
	 /* iArg:      */ 0},
	{ /* zName:     */ "table_info",
	 /* ePragTyp:  */ PragTyp_TABLE_INFO,
	 /* ePragFlg:  */
	 PragFlg_NeedSchema | PragFlg_Result1 | PragFlg_SchemaOpt,
	 /* ColNames:  */ 0, 6,
	 /* iArg:      */ 0},
};
/* Number of pragmas: 36 on by default, 47 total. */
