-- key type validations (str, num)
space = box.schema.space.create('test', { engine = 'vinyl' })
---
...
index = space:create_index('primary', { type = 'tree', parts = {1, 'str'} })
---
...
space:insert{1}
---
- error: 'Tuple field 1 type does not match one required by operation: expected STR'
...
space:replace{1}
---
- error: 'Tuple field 1 type does not match one required by operation: expected STR'
...
space:delete{1}
---
- error: 'Supplied key type of part 0 does not match index part type: expected STR'
...
space:update({1}, {{'=', 1, 101}})
---
- error: 'Supplied key type of part 0 does not match index part type: expected STR'
...
space:upsert({1}, {{'+', 1, 10}})
---
- error: 'Tuple field 1 type does not match one required by operation: expected STR'
...
space:get{1}
---
- error: 'Supplied key type of part 0 does not match index part type: expected STR'
...
index:pairs(1, {iterator = 'GE'})
---
- error: 'Supplied key type of part 0 does not match index part type: expected STR'
...
space:drop()
---
...
-- key type validations (num, str)
space = box.schema.space.create('test', { engine = 'vinyl' })
---
...
index = space:create_index('primary', { type = 'tree', parts = {1, 'num'} })
---
...
space:insert{'A'}
---
- error: 'Tuple field 1 type does not match one required by operation: expected NUM'
...
space:replace{'A'}
---
- error: 'Tuple field 1 type does not match one required by operation: expected NUM'
...
space:delete{'A'}
---
- error: 'Supplied key type of part 0 does not match index part type: expected NUM'
...
space:update({'A'}, {{'=', 1, 101}})
---
- error: 'Supplied key type of part 0 does not match index part type: expected NUM'
...
space:upsert({'A'}, {{'+', 1, 10}})
---
- error: 'Tuple field 1 type does not match one required by operation: expected NUM'
...
space:get{'A'}
---
- error: 'Supplied key type of part 0 does not match index part type: expected NUM'
...
index:pairs('A', {iterator = 'GE'})
---
- error: 'Supplied key type of part 0 does not match index part type: expected NUM'
...
space:drop()
---
...
-- ensure all key-parts are passed
space = box.schema.space.create('test', { engine = 'vinyl' })
---
...
index = space:create_index('primary', { type = 'tree', parts = {1,'num',2,'num'} })
---
...
space:insert{1}
---
- error: Tuple field count 1 is less than required by a defined index (expected 2)
...
space:replace{1}
---
- error: Tuple field count 1 is less than required by a defined index (expected 2)
...
space:delete{1}
---
- error: Invalid key part count in an exact match (expected 2, got 1)
...
space:update(1, {{'=', 1, 101}})
---
- error: Invalid key part count in an exact match (expected 2, got 1)
...
space:upsert({1}, {{'+', 1, 10}})
---
- error: Tuple field count 1 is less than required by a defined index (expected 2)
...
space:get{1}
---
- error: Invalid key part count in an exact match (expected 2, got 1)
...
index:select({1}, {iterator = box.index.GT})
---
- []
...
space:drop()
---
...
-------------------------------------------------------------------------------
-- Key part length without limit
-------------------------------------------------------------------------------
space = box.schema.space.create('single_part', { engine = 'vinyl' })
---
...
_ = space:create_index('primary', { type = 'tree', parts = {1, 'str'}})
---
...
t1 = space:insert({string.rep('x', 1020)})
---
...
t1 = space:insert({string.rep('x', 10210)})
---
...
t3 = space:insert({string.rep('x', 102200)})
---
...
space:drop()
---
...
space = nil
---
...
pk = nil
---
...
-------------------------------------------------------------------------------
-- space:len() is unsupported
-------------------------------------------------------------------------------
space = box.schema.space.create('test_len', { engine = 'vinyl' })
---
...
_ = space:create_index('primary', { type = 'tree', parts = {1, 'str'}})
---
...
space:len()
---
- error: Index 'primary' (TREE) of space 'test_len' (vinyl) does not support size()
...
space:drop()
---
...
