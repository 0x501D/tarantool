# encoding: tarantool
import sys
import time
import os
import yaml

from lib.memcached_connection import MemcachedConnection
from lib.tarantool_box_server import TarantoolBoxServer

sonet = """The expense of spirit
in a waste of shame
Is lust in action;
and till action, lust""".split('\n')

master = server
master_memcached = master.memcached

replica = TarantoolBoxServer()
replica.deploy("memcached/cfg/replica.cfg",
           replica.find_exe(self.args.builddir),
           os.path.join(self.args.vardir, "replica"))
replica_memcached = replica.memcached

###################################
def wait_for_lsn(lsn, _server):
    _server_admin = _server.admin
    while True:
        if get_lsn(_server) == lsn:
            return lsn
        time.sleep(0.5)

def wait_for_next_lsn(lsn, _server):
    _server_admin = _server.admin
    while True:
        if get_lsn(_server) != lsn:
            return lsn
        time.sleep(0.5)

def get_lsn(_server):
    _server_admin = _server.admin
    resp = exec _server_admin silent "lua box.info.lsn"
    return yaml.load(resp)[0]

def wait(next = False, _server_master = master, _server_replica = replica):
#    print get_lsn(_server_master), " ", get_lsn(_server_replica)
    if next:
        lsn = get_lsn(_server_replica)
        return wait_for_next_lsn(lsn, _server_replica)
    else:
        lsn = get_lsn(_server_master)
        return wait_for_lsn(lsn, _server_replica)
###################################

print """# set initial k-v pairs"""
for i in xrange(10):
    exec master_memcached silent "set %d 0 0 5\r\ngood%d\r\n" % (i, i)
time.sleep(1);
print """# wait and get last k-v pair from replica"""
wait()
exec replica_memcached "get 9\r\n"

print """# make multiple cnanges with master"""
answer = exec master_memcached silent "gets 9\r\n"
cas = int(answer.split()[4])
exec master_memcached silent "append 1 0 0 3\r\nafk\r\n"
exec master_memcached silent "prepend 2 0 0 3\r\nkfa\r\n" 
exec master_memcached silent "set 3 0 0 2\r\n80\r\n"
exec master_memcached silent "set 4 0 0 2\r\n60\r\n"
exec master_memcached silent "delete 6\r\n"
exec master_memcached silent "replace 7 0 0 %d\r\n%s\r\n" % (len(sonet[0]), sonet[0])
exec master_memcached silent "replace 8 0 0 %d\r\n%s\r\n" % (len(sonet[1]), sonet[1])
exec master_memcached silent "cas 9 0 0 %d %d\r\n%s\r\n" % (len(sonet[2]), cas, sonet[2])
exec master_memcached silent "add 10 0 0 %d\r\n%s\r\n" % (len(sonet[3]), sonet[3])
exec master_memcached silent "incr 3 15\r\n"
exec master_memcached silent "decr 4 15\r\n"

time.sleep(1)

print """# wait and get k-v's from replicas"""
wait()
exec replica_memcached "get 1 2 3 4 5 7 8 9 10\r\n"

print """# get deleted value"""
exec replica_memcached "get 6\r\n"

print """# flush all k-v on master and try to get them from replica"""
exec master_memcached silent "flush_all\r\n"
wait(True)
exec replica_memcached "get 10\r\n"


print """# check that expiration is working properly on replica"""
exec master_memcached silent "set 1 0 3 %d\r\n%s\r\n" % (len(sonet[0]), sonet[0])
wait()
exec replica_memcached "get 1\r\n"
wait(True)
exec replica_memcached "get 1\r\n"

print """# check that expiration is working properly, when replica becomes master"""
exec master_memcached silent "set 1 0 3 %d\r\n%s\r\n" % (len(sonet[0]), sonet[0])
replica.reconfigure("memcached/cfg/replica-to-master.cfg")
wait()
exec replica_memcached "get 1\r\n"
wait(True)
exec replica_memcached "get 1\r\n"


# resore default suite config
replica.stop()
replica.cleanup(True)
master.stop()
master.deploy(self.suite_ini["config"])
# vim: syntax=python
