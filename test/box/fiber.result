-- A test case for a race condition between ev_schedule
-- and wal_schedule fiber schedulers.
-- The same fiber should not be scheduled by ev_schedule (e.g.
-- due to cancellation) if it is within th wal_schedule queue.
-- The test case is dependent on rows_per_wal, since this is when
-- we reopen the .xlog file and thus wal_scheduler takes a long
-- pause;
box.cfg.rows_per_wal
---
 - 50
...
box.space[0]:insert(1, 'testing', 'lua rocks')
---
 - 1: {'testing', 'lua rocks'}
...
box.space[0]:delete(1)
---
 - 1: {'testing', 'lua rocks'}
...
box.space[0]:insert(1, 'testing', 'lua rocks')
---
 - 1: {'testing', 'lua rocks'}
...
box.space[0]:delete(1)
---
 - 1: {'testing', 'lua rocks'}
...
-- check delete;
box.process(17, box.pack('iiiiiip', 0, 0, 0, 2^31, 1, 1, 1))
---
...
box.process(22, box.pack('iii', 0, 0, 0))
---
error: 'box.process(CALL, ...) is not allowed'
...
box.space[0]:insert(1, 'test box delete')
---
 - 1: {'test box delete'}
...
box.delete('0', '\1\0\0\0')
---
 - 1: {'test box delete'}
...
box.space[0]:insert(1, 'test box delete')
---
 - 1: {'test box delete'}
...
box.delete(0, 1)
---
 - 1: {'test box delete'}
...
box.space[0]:insert('abcd', 'test box delete')
---
 - 1684234849: {'test box delete'}
...
box.delete('0', 'abcd')
---
 - 1684234849: {'test box delete'}
...
box.space[0]:insert('abcd', 'test box delete')
---
 - 1684234849: {'test box delete'}
...
box.delete(0, 'abcd')
---
 - 1684234849: {'test box delete'}
...
box.space[0]:insert('abcd', 'test box.select()')
---
 - 1684234849: {'test box.select()'}
...
box.replace('0', 'abcd', 'hello', 'world')
---
 - 1684234849: {'hello', 'world'}
...
box.replace('0', 'defc', 'goodbye', 'universe')
---
 - 1667655012: {'goodbye', 7310312400256331381}
...
box.replace('0', 'defc', 'goodbye', 'universe')
---
 - 1667655012: {'goodbye', 7310312400256331381}
...
box.replace('0', 'defc', 'goodbye', 'universe')
---
 - 1667655012: {'goodbye', 7310312400256331381}
...
box.replace('0', 'defc', 'goodbye', 'universe')
---
 - 1667655012: {'goodbye', 7310312400256331381}
...
box.replace('0', 'defc', 'goodbye', 'universe')
---
 - 1667655012: {'goodbye', 7310312400256331381}
...
box.replace('0', 'defc', 'goodbye', 'universe')
---
 - 1667655012: {'goodbye', 7310312400256331381}
...
box.replace('0', 'defc', 'goodbye', 'universe')
---
 - 1667655012: {'goodbye', 7310312400256331381}
...
box.replace('0', 'defc', 'goodbye', 'universe')
---
 - 1667655012: {'goodbye', 7310312400256331381}
...
box.replace('0', 'defc', 'goodbye', 'universe')
---
 - 1667655012: {'goodbye', 7310312400256331381}
...
box.replace('0', 'defc', 'goodbye', 'universe')
---
 - 1667655012: {'goodbye', 7310312400256331381}
...
box.replace('0', 'defc', 'goodbye', 'universe')
---
 - 1667655012: {'goodbye', 7310312400256331381}
...
box.replace('0', 'defc', 'goodbye', 'universe')
---
 - 1667655012: {'goodbye', 7310312400256331381}
...
box.replace('0', 'abcd')
---
 - 1684234849: {}
...
box.delete('0', 'abcd')
---
 - 1684234849: {}
...
box.delete('0', 'defc')
---
 - 1667655012: {'goodbye', 7310312400256331381}
...
box.insert('0', 'test', 'old', 'abcd')
---
 - 1953719668: {'old', 1684234849}
...
-- test that insert produces a duplicate key error;
box.insert('0', 'test', 'old', 'abcd')
---
error: 'Duplicate key exists in unique index 0'
...
box.update('0', 'test', '=p=p', 0, 'pass', 1, 'new')
---
 - 1936941424: {'new', 1684234849}
...
box.update('0', 'miss', '+p', 2, '\1\0\0\0')
---
...
box.update('0', 'pass', '+p', 2, '\1\0\0\0')
---
 - 1936941424: {'new', 1684234850}
...
box.update('0', 'pass', '-p', 2, '\1\0\0\0')
---
 - 1936941424: {'new', 1684234849}
...
box.update('0', 'pass', '-p', 2, '\1\0\0\0')
---
 - 1936941424: {'new', 1684234848}
...
box.update(0, 'pass', '+p', 2, 1)
---
 - 1936941424: {'new', 1684234849}
...
box.delete('0', 'pass')
---
 - 1936941424: {'new', 1684234849}
...
reload configuration
---
ok
...
-- must be read-only;
box.insert(0, 'test')
---
 - 1953719668: {}
...
box.insert(0, 'abcd')
---
 - 1684234849: {}
...
box.delete(0, 'test')
---
 - 1953719668: {}
...
box.delete(0, 'abcd')
---
 - 1684234849: {}
...
box.space[0]:insert('test', 'hello world')
---
 - 1953719668: {'hello world'}
...
box.space[0]:update('test', '=p', 1, 'bye, world')
---
 - 1953719668: {'bye, world'}
...
box.space[0]:delete('test')
---
 - 1953719668: {'bye, world'}
...
-- test tuple iterators;
t = box.space[0]:insert('test')
---
...
t = box.space[0]:replace('test', 'another field')
---
...
t = box.space[0]:replace('test', 'another field', 'one more')
---
...
box.space[0]:truncate()
---
...
-- test passing arguments in and out created fiber;
function y()
    print('started')
    box.fiber.detach()
    while true do
        box.replace(0, 'test', os.time())
        box.fiber.sleep(0.001)
    end
end
---
...
f = box.fiber.create(y)
---
...
box.fiber.resume(f)
---
started
...
box.fiber.sleep(0.002)
---
...
box.fiber.cancel(f)
---
...
box.fiber.resume(f)
---
error: 'fiber.resume(): the fiber is dead'
...
for k = 1, 1000, 1 do
    box.fiber.create(
        function()
            box.fiber.detach()
        end
    )
end
---
...
collectgarbage('collect')
---
 - 0
...
-- check that these newly created fibers are garbage collected;
box.fiber.find(900)
---
 - nil
...
box.fiber.find(910)
---
 - nil
...
box.fiber.find(920)
---
 - nil
...
box.space[0]:truncate()
---
...
-- vim: tabstop=4 expandtab shiftwidth=4 softtabstop=4 syntax=lua
