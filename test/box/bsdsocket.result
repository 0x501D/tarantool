bsdsocket tests
lua type(box.socket)
---
 - table
...
lua box.socket('PF_INET', 'SOCK_STREAM', 'tcp121222'); return box.errno() ~= 0
---
 - true
...
lua s = box.socket('PF_INET', 'SOCK_STREAM', 'tcp')
---
...
lua s:wait(.01)
---
 - RW
...
lua type(s)
---
 - table
...
lua string.match(tostring(s), 'fd %d+, aka 0%.0%.0%.0:0') ~= nil
---
 - true
...
lua s:errno()
---
 - 0
...
lua type(s:error())
---
 - nil
...
lua for k in pairs(getmetatable(s).__index) do local r, msg = pcall(s[k]); if not msg:match('Usage:') then print(k) end end
---
...
lua s:nonblock(false)
---
 - false
...
lua s:sysconnect('127.0.0.1', box.cfg.primary_port)
---
 - true
...
lua s:nonblock(true)
---
 - true
...
lua s:nonblock()
---
 - true
...
lua s:nonblock(false)
---
 - false
...
lua s:nonblock()
---
 - false
...
lua s:nonblock(true)
---
 - true
...
lua s:readable(.01)
---
 - false
...
lua s:wait(.01)
---
 - W
...
lua s:readable(0)
---
 - false
...
lua s:errno() > 0
---
 - true
...
lua s:error()
---
 - Connection timed out
...
lua s:writable(.00000000000001)
---
 - true
...
lua s:writable(0)
---
 - true
...
lua s:wait(.01)
---
 - W
...
lua s:syswrite(box.pack('iii', 65280, 0, 12334))
---
 - 12
...
lua s:readable(1)
---
 - true
...
lua s:wait(.01)
---
 - RW
...
lua box.unpack('iii', s:sysread(4096))
---
 - 65280
 - 0
 - 12334
...
lua s:syswrite(box.pack('iii', 65280, 0, 12335))
---
 - 12
...
lua s:readable(1)
---
 - true
...
lua string.len(s:sysread(4096))
---
 - 12
...
lua s:close()
---
 - true
...
lua s = box.socket('PF_INET', 'SOCK_STREAM', 'tcp')
---
...
lua s:setsockopt('SOL_SOCKET', 'SO_REUSEADDR', true)
---
 - true
...
lua s:error()
---
 - nil
...
lua s:bind('127.0.0.1', 3457)
---
 - true
...
lua s:error()
---
 - nil
...
lua s:listen(128)
---
 - true
...
lua sevres = {}
---
...
lua type(box.fiber.wrap(function() s:readable() do local sc = s:accept() table.insert(sevres, sc) sc:syswrite('ok') sc:close() end end))
---
 - userdata
...
lua #sevres
---
 - 0
...
lua sc = box.socket('PF_INET', 'SOCK_STREAM', 'tcp')
---
...
lua sc:nonblock(false)
---
 - false
...
lua sc:sysconnect('127.0.0.1', 3457)
---
 - true
...
lua sc:nonblock(true)
---
 - true
...
lua sc:readable(.5)
---
 - true
...
lua sc:sysread()
---
 - ok
...
lua string.match(tostring(sc), ', peer') ~= nil
---
 - true
...
lua #sevres
---
 - 1
...
lua sevres[1].host
---
 - nil
...
lua s:setsockopt('SOL_SOCKET', 'SO_BROADCAST', false)
---
 - true
...
lua s:getsockopt('SOL_SOCKET', 'SO_TYPE')
---
 - 1
...
lua s:error()
---
 - nil
...
lua s:setsockopt('SOL_SOCKET', 'SO_BSDCOMPAT', false)
---
 - true
...
lua s:setsockopt('SOL_SOCKET', 'SO_DEBUG', false)
---
 - true
...
lua s:getsockopt('SOL_SOCKET', 'SO_DEBUG')
---
 - 0
...
lua s:setsockopt('SOL_SOCKET', 'SO_ACCEPTCONN', 1)
---
error: '[string "-- bsdsocket.lua (internal file)..."]:348: Socket option SO_ACCEPTCONN is read only'
...
lua s:getsockopt('SOL_SOCKET', 'SO_RCVBUF') > 32
---
 - true
...
lua s:error()
---
 - nil
...
lua s:linger()
---
 - false
 - 0
...
lua s:linger(true, 1)
---
 - true
 - 1
...
lua s:linger()
---
 - true
 - 1
...
lua s:linger(false, 1)
---
 - false
 - 1
...
lua s:linger()
---
 - false
 - 1
...
lua s:shutdown('R')
---
 - true
...
lua s:close()
---
 - true
...
lua s = box.socket('PF_INET', 'SOCK_STREAM', 'tcp')
---
...
lua s:setsockopt('SOL_SOCKET', 'SO_REUSEADDR', true)
---
 - true
...
lua s:bind('127.0.0.1', 3457)
---
 - true
...
lua s:listen(128)
---
 - true
...
lua sc = box.socket('PF_INET', 'SOCK_STREAM', 'tcp')
---
...
lua sc:writable()
---
 - true
...
lua sc:readable()
---
 - true
...
lua r = sc:sysconnect('127.0.0.1', 3457); errno = box.errno()
---
...
lua r or errno == box.errno.EINPROGRESS
---
 - true
...
lua sc:writable(10)
---
 - true
...
lua sc:write('Hello, world')
---
 - 12
...
lua sa, addr = s:accept()
---
...
lua addr2 = sa:name()
---
...
lua addr2.host == addr.host
---
 - true
...
lua addr2.family == addr.family
---
 - true
...
lua sa:nonblock(1)
---
 - true
...
lua sa:read(8)
---
 - Hello, w
...
lua sa:read(3)
---
 - orl
...
lua sc:writable()
---
 - true
...
lua sc:write(', again')
---
 - 7
...
lua sa:read(8)
---
 - d, again
...
lua sa:error()
---
 - nil
...
lua string.len(sa:read(0))
---
 - 0
...
lua type(sa:read(0))
---
 - string
...
lua sa:read(1, .01)
---
 - nil
...
lua sc:writable()
---
 - true
...
lua sc:send('abc')
---
 - 3
...
lua sa:read(3)
---
 - abc
...
lua sc:send('Hello')
---
 - 5
...
lua sa:readable()
---
 - true
...
lua sa:recv()
---
 - Hello
...
lua sa:recv()
---
 - nil
...
lua sc:send('Hello')
---
 - 5
...
lua sc:send(', world')
---
 - 7
...
lua sc:send("\nnew line")
---
 - 9
...
lua sa:read('\n', 1)
---
 - Hello, world

...
lua sa:read({chunk = 1, line = 'ine'}, 1)
---
 - n
...
lua sa:read('ine', 1)
---
 - ew line
...
lua sa:read('ine', 0.1)
---
 - nil
...
lua sc:send('Hello, world')
---
 - 12
...
lua sa:read(',', 1)
---
 - Hello,
...
lua sc:shutdown('W')
---
 - true
...
lua sa:read(100, 1)
---
 -  world
...
lua sa:read(100, 1)
---
 - 
...
lua sa:close()
---
 - true
...
lua sc:close()
---
 - true
...
lua s = box.socket('PF_UNIX', 'SOCK_STREAM', 0)
---
...
lua s:setsockopt('SOL_SOCKET', 'SO_REUSEADDR', true)
---
 - true
...
lua s ~= nil
---
 - true
...
lua s:nonblock()
---
 - true
...
lua s:nonblock(true)
---
 - true
...
lua s:nonblock()
---
 - true
...
lua s:bind('unix/', '/tmp/tarantool-test-socket')
---
 - true
...
lua string.match(tostring(s), 'fd %d+, aka unix/:/tmp/tarantool%-test%-socket') ~= nil
---
 - true
...
lua s:listen(1234)
---
 - true
...
lua sc = box.socket('PF_UNIX', 'SOCK_STREAM', 0)
---
...
lua sc:nonblock(true)
---
 - true
...
lua sc:sysconnect('unix/', '/tmp/tarantool-test-socket')
---
 - true
...
lua sc:error()
---
 - nil
...
lua s:readable()
---
 - true
...
lua sa = s:accept()
---
...
lua sa:nonblock(true)
---
 - true
...
lua sa:send('Hello, world')
---
 - 12
...
lua sc:recv()
---
 - Hello, world
...
lua sc:close()
---
 - true
...
lua sa:close()
---
 - true
...
lua s:close()
---
 - true
...
lua function aexitst(ai, host, port) for i, a in pairs(ai) do if a.host == host and a.port == port then return true end end return false end
---
...
lua aexitst( box.socket.getaddrinfo('localhost', 'http', {  protocol = 'tcp', type = 'SOCK_STREAM'}), '127.0.0.1', 80 )
---
 - true
...
lua #(box.socket.getaddrinfo('tarantool.org', 'http', {})) > 0
---
 - true
...
lua #(box.socket.getaddrinfo('non-existing-domain-name-12211alklkl.com', 'http', {})) == 0
---
 - true
...
lua sc = box.socket('PF_INET', 'SOCK_STREAM', 'tcp')
---
...
lua sc:getsockopt('SOL_SOCKET', 'SO_ERROR')
---
 - 0
...
lua sc:nonblock(true)
---
 - true
...
lua sc:readable()
---
 - true
...
lua r = sc:sysconnect('127.0.0.1', 3458); errno = box.errno()
---
...
lua r or errno == box.errno.EINPROGRESS
---
 - true
...
lua string.match(tostring(sc), ', peer') == nil
---
 - true
...
lua sc:writable()
---
 - true
...
lua string.match(tostring(sc), ', peer') == nil
---
 - true
...
lua box.errno.strerror(sc:getsockopt('SOL_SOCKET', 'SO_ERROR'))
---
 - Connection refused
...
lua box.cjson.encode(box.socket.getaddrinfo('ya.ru', '80', { flags = { 'AI_NUMERICSERV', 'AI_NUMERICHOST', } }))
---
 - {}
...
lua sc = box.socket('AF_INET', 'SOCK_STREAM', 'tcp')
---
...
lua box.cjson.encode(sc:name())
---
 - {"host":"0.0.0.0","family":"AF_INET","type":"SOCK_STREAM","protocol":"tcp","port":0}
...
lua sc:name()
---
 - 0.0.0.0:0
...
lua sc:nonblock(true)
---
 - true
...
lua sc:close()
---
 - true
...
lua s = box.socket('AF_INET', 'SOCK_DGRAM', 'udp')
---
...
lua s:bind('127.0.0.1', 3548)
---
 - true
...
lua sc = box.socket('AF_INET', 'SOCK_DGRAM', 'udp')
---
...
lua sc:sendto('127.0.0.1', 3548, 'Hello, world')
---
 - 12
...
lua s:readable(10)
---
 - true
...
lua s:recv(4096)
---
 - Hello, world
...
lua sc:sendto('127.0.0.1', 3548, 'Hello, world, 2')
---
 - 15
...
lua s:readable(10)
---
 - true
...
lua local d, from = s:recvfrom() print(' - ', from.port > 0) from.port = 'Random port' return box.cjson.encode{d, from}
---
 - true
 - ["Hello, world, 2",{"host":"127.0.0.1","family":"AF_INET","port":"Random port"}]
...
lua s:close()
---
 - true
...
lua sc:close()
---
 - true
...
lua s = box.socket('AF_INET', 'SOCK_DGRAM', 'udp')
---
...
lua s:nonblock(true)
---
 - true
...
lua s:bind('127.0.0.1')
---
 - true
...
lua s:name().port > 0
---
 - true
...
lua sc = box.socket('AF_INET', 'SOCK_DGRAM', 'udp')
---
...
lua sc:nonblock(true)
---
 - true
...
lua sc:sendto('127.0.0.1', s:name().port)
---
 - true
...
lua sc:sendto('127.0.0.1', s:name().port, 'Hello, World!')
---
 - 13
...
lua s:readable(1)
---
 - true
...
lua data, from = s:recvfrom(10)
---
...
lua data
---
 - Hello, Wor
...
lua s:sendto(from.host, from.port, 'Hello, hello!')
---
 - 13
...
lua sc:readable(1)
---
 - true
...
lua data_r, from_r = sc:recvfrom()
---
...
lua data_r
---
 - Hello, hello!
...
lua from_r.host
---
 - 127.0.0.1
...
lua from_r.port == s:name().port
---
 - true
...
lua s:close()
---
 - true
...
lua sc:close()
---
 - true
...
tcp_connect
lua s = box.socket.tcp_connect('tarantool.org', 80)
---
...
lua string.match(tostring(s), ', aka') ~= nil
---
 - true
...
lua string.match(tostring(s), ', peer') ~= nil
---
 - true
...
lua s:write('HEAD / HTTP/1.0\r\nHost: tarantool.org\r\n\r\n')
---
 - 40
...
lua header = s:read({chunk = 4000, line = { '\n\n', '\r\n\r\n' }}, 1)
---
...
lua string.match(header, '\r\n\r\n$') ~= nil
---
 - true
...
lua s:close()
---
 - true
...
lua s = box.socket('AF_INET', 'SOCK_STREAM', 'tcp')
---
...
lua s:bind('127.0.0.1', 35490)
---
 - true
...
lua box.socket.tcp_connect('127.0.0.1', 35490), box.errno() == box.errno.ECONNREFUSED
---
 - nil
 - true
...
lua s:listen()
---
 - true
...
lua sc, errno = box.socket.tcp_connect('127.0.0.1', 35490), box.errno()
---
...
lua sc ~= nil
---
 - true
...
lua errno == 0
---
 - true
...
lua sc:close()
---
 - true
...
lua s:close()
---
 - true
...
lua box.socket.tcp_connect('127.0.0.1', 35490), box.errno() == box.errno.ECONNREFUSED
---
 - nil
 - true
...
lua s = box.socket('AF_UNIX', 'SOCK_STREAM', 0)
---
...
lua s:bind('unix/', '/tmp/tarantool-test-socket')
---
 - true
...
lua box.socket.tcp_connect('unix/', '/tmp/tarantool-test-socket'), box.errno() == box.errno.ECONNREFUSED
---
 - nil
 - true
...
lua s:listen()
---
 - true
...
lua sc, errno = box.socket.tcp_connect('unix/', '/tmp/tarantool-test-socket'), box.errno()
---
...
lua sc ~= nil
---
 - true
...
lua sc:close()
---
 - true
...
lua s:close()
---
 - true
...
lua box.socket.tcp_connect('unix/', '/tmp/tarantool-test-socket'), box.errno() == box.errno.ECONNREFUSED
---
 - nil
 - true
...
remove unix socket
lua box.socket.tcp_connect('unix/', '/tmp/tarantool-test-socket'), box.errno() == box.errno.ENOENT
---
 - nil
 - true
...
lua sa = box.socket.tcp_connect('127.0.0.1', box.cfg.primary_port)
---
...
lua sa:close()
---
 - true
...
lua sa.socket.fd = 512
---
...
lua sa:fd()
---
 - 512
...
lua tostring(sa)
---
 - fd 512
...
lua sa:readable(0)
---
 - true
...
lua sa:writable(0)
---
 - true
...
lua sa = nil
---
...
lua s = box.socket.tcp_connect('127.0.0.1', box.cfg.primary_port)
---
...
lua ch = box.ipc.channel()
---
...
lua f = box.fiber.wrap(function() s:read(12) ch:put(true) end)
---
...
lua box.fiber.sleep(.1)
---
...
lua s:close()
---
 - true
...
lua ch:get(1)
---
 - true
...
lua s:error()
---
 - Connection timed out
...
lua path = '/tmp/tarantool-test-socket'
---
...
lua s = box.socket('PF_UNIX', 'SOCK_STREAM', 0)
---
...
lua s:setsockopt('SOL_SOCKET', 'SO_REUSEADDR', true)
---
 - true
...
lua s:error()
---
 - nil
...
lua s:bind('unix/', path)
---
 - true
...
lua s:error()
---
 - nil
...
lua s:listen(128)
---
 - true
...
lua f = box.fiber.wrap(function() for i=1,2 do s:readable() local sc = s:accept(); sc:write('ok!'); sc:shutdown(); sc:close() end end)
---
...
lua c = box.socket.tcp_connect('unix/', path)
---
...
lua c:error()
---
 - nil
...
lua x = c:read('!')
---
...
lua x, type(x), #x
---
 - ok!
 - string
 - 3
...
lua x = c:read('!')
---
...
lua c:error()
---
 - nil
...
lua x, type(x), #x
---
 - 
 - string
 - 0
...
lua x = c:read('!')
---
...
lua c:error()
---
 - nil
...
lua x, type(x), #x
---
 - 
 - string
 - 0
...
lua c:close()
---
 - true
...
lua c = box.socket.tcp_connect('unix/', path)
---
...
lua c:error()
---
 - nil
...
lua x = c:read(3)
---
...
lua c:error()
---
 - nil
...
lua x, type(x), #x
---
 - ok!
 - string
 - 3
...
lua x = c:read(1)
---
...
lua c:error()
---
 - nil
...
lua x, type(x), #x
---
 - 
 - string
 - 0
...
lua x = c:read(1)
---
...
lua c:error()
---
 - nil
...
lua x, type(x), #x
---
 - 
 - string
 - 0
...
lua x = c:sysread(1)
---
...
lua c:error()
---
 - nil
...
lua x, type(x), #x
---
 - 
 - string
 - 0
...
lua c:close()
---
 - true
...
lua s:close()
---
 - true
...
lua server, addr = box.socket.tcp_server('unix/', path, function(s) s:write('Hello, world') end)
---
...
lua type(addr)
---
 - table
...
lua server ~= nil
---
 - true
...
lua box.fiber.sleep(.5)
---
...
lua client = box.socket.tcp_connect('unix/', path)
---
...
lua client ~= nil
---
 - true
...
lua client:read(123)
---
 - Hello, world
...
lua client:close()
---
 - true
...
lua server:close()
---
 - true
...
lua box.fiber.sleep(.5)
---
...
unix socket was removed
lua server, addr = box.socket.tcp_server('localhost', 0, { handler = function(s) s:read(2); s:write('Hello, world') end, name = 'testserv'})
---
...
lua type(addr)
---
 - table
...
lua server ~= nil
---
 - true
...
lua addr2 = server:name()
---
...
lua addr.host == addr2.host
---
 - true
...
lua addr.family == addr2.family
---
 - true
...
lua box.fiber.sleep(.5)
---
...
lua client = box.socket.tcp_connect(addr2.host, addr2.port)
---
...
lua client ~= nil
---
 - true
...
lua cnt = 0
---
...
lua for i=100,200 do local f = box.fiber.find(i); if f and f:name():match('^testserv/') then cnt = cnt + 1; end; end
---
...
lua cnt
---
 - 2
...
lua client:write('hi')
---
 - 2
...
lua client:read(123)
---
 - Hello, world
...
lua client:close()
---
 - true
...
lua server:close()
---
 - true
...
lua body = "a 10\nb 15\nabc"
---
...
lua remaining = #body
---
...
lua server = box.socket.tcp_server("unix/", "%s", function(s) s:write(body) s:read(100500) end)
---
...
lua client = box.socket.tcp_connect("unix/", "%s")
---
...
lua buf = client:read({ size = remaining, delimiter = "[\r\n]+"})
---
...
lua buf == "a 10\n"
---
 - true
...
lua remaining = remaining - #buf
---
...
lua buf = client:read({ size = remaining, delimiter = "[\r\n]+"})
---
...
lua buf == "b 15\n"
---
 - true
...
lua remaining = remaining - #buf
---
...
lua buf = client:read({ size = remaining, delimiter = "[\r\n]+"})
---
...
lua buf == "abc"
---
 - true
...
lua remaining = remaining - #buf
---
...
lua remaining == 0
---
 - true
...
lua buf = client:read({ size = remaining, delimiter = "[\r\n]+"})
---
...
lua buf == ""
---
 - true
...
lua buf = client:read({ size = remaining, delimiter = "[\r\n]+"})
---
...
lua buf == ""
---
 - true
...
lua client:close()
---
 - true
...
lua server:close()
---
 - true
...
lua s = box.socket('AF_UNIX', 'SOCK_STREAM', 0)
---
...
lua s:bind('unix/', '/tmp/tarantool-test-socket')
---
 - true
...
lua s:listen()
---
 - true
...
lua s = nil
---
...
lua collectgarbage('collect')
---
 - 0
...
lua collectgarbage('collect')
---
 - 0
...
lua client, errno = box.socket.tcp_connect('unix/', '/tmp/tarantool-test-socket'), box.errno()
---
...
lua errno == box.errno.ECONNREFUSED
---
 - true
...
test bind unix socket if old socket is exists
lua s = box.socket('AF_UNIX', 'SOCK_STREAM', 0)
---
...
lua s:bind('unix/', '/tmp/tarantool-test-socket')
---
 - true
...
lua s:listen()
---
 - true
...
lua s:close()
---
 - true
...
lua s = box.socket('AF_UNIX', 'SOCK_STREAM', 0)
---
...
lua s:bind('unix/', '/tmp/tarantool-test-socket')
---
 - false
...
lua s = box.socket.tcp_server('unix/', '/tmp/tarantool-test-socket', function() end)
---
...
lua s ~= nil
---
 - true
...
lua s:close()
---
 - true
...
lua box.cjson.encode{ box.socket.tcp_connect('invalid domain name') == nil, box.errno.strerror() }
---
 - [true,"Invalid argument"]
...
lua box.cjson.encode{ box.socket.tcp_connect('test:test@localhost:3303') == nil, box.errno.strerror() }
---
 - [true,"Invalid argument"]
...
lua box.socket.getaddrinfo('host', 'port', { type = 'WRONG' }) == nil and box.errno() == box.errno.EINVAL
---
 - true
...
lua box.socket.getaddrinfo('host', 'port', { family = 'WRONG' }) == nil and box.errno() == box.errno.EINVAL
---
 - true
...
lua box.socket.getaddrinfo('host', 'port', { protocol = 'WRONG' }) == nil and box.errno() == box.errno.EINVAL
---
 - true
...
lua box.socket.getaddrinfo('host', 'port', { flags = 'WRONG' }) == nil and box.errno() == box.errno.EINVAL
---
 - true
...
