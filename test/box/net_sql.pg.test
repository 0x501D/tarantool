# encoding: utf-8

admin("lua c = box.net.sql.connect('abcd')")
admin("lua dump = function(v) return box.cjson.encode(v) end")

admin("lua connect = {}")
admin("lua for tk in string.gmatch(os.getenv('PG'), '[^:]+') do table.insert(connect, tk) end")

# postgresql
admin("lua c = box.net.sql.connect('pg', unpack(connect))")
admin("lua dump({c:execute('SELECT 123::text AS bla, 345')})")
admin("lua dump({c:execute('SELECT -1 AS neg, NULL AS abc')})")
admin("lua dump({c:execute('SELECT -1.1 AS neg, 1.2 AS pos')})")
admin("lua dump({c:execute('SELECT ARRAY[1,2] AS neg, 1.2 AS pos')})")
admin("lua dump({c:execute('SELECT ? AS val', 'abc')})")
admin("lua dump({c:execute('SELECT ? AS val', 123)})")
admin("lua dump({c:execute('SELECT ? AS val', true)})")
admin("lua dump({c:execute('SELECT ? AS val', false)})")
admin("lua dump({c:execute('SELECT ? AS val, ? AS num, ? AS str', false, 123, 'abc')})")
admin("lua dump({c:execute('DROP TABLE IF EXISTS unknown_table')})")
admin("lua dump({c:execute('SELECT * FROM (VALUES (1,2), (2,3)) t')})")
admin("lua c:ping()")
admin("lua dump({c:select('SELECT * FROM (VALUES (1,2), (2,3)) t')})")
admin("lua dump({c:single('SELECT * FROM (VALUES (1,2), (2,3)) t')})")
admin("lua dump({c:single('SELECT * FROM (VALUES (1,2)) t')})")
admin("lua dump({c:perform('SELECT * FROM (VALUES (1,2), (2,3)) t')})")
admin("lua c:execute('SELEC T')")

admin("lua c = box.net.sql.connect('abcd')")


admin("lua c:quote('abc\"cde\"def')")


admin("lua c:begin_work()")
admin("lua c:rollback()")
admin("lua c:begin_work()")
admin("lua c:commit()")

admin("lua c:txn(function(dbi) dbi:single('SELECT 1') end)")

