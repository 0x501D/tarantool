lua remote = box.net.box.new('localhost', box.cfg.primary_port, '0.5')
---
...
lua type(remote)
---
 - table
...
lua remote:ping()
---
 - true
...
lua remote:ping()
---
 - true
...
lua box.net.box.ping(remote)
---
 - true
...
lua box.insert(0, 123, 'test1', 'test2')
---
 - 123: {'test1', 'test2'}
...
lua box.select(0, 0, 123)
---
 - 123: {'test1', 'test2'}
...
lua tuple = remote:select(0, 0, 123)
---
...
lua remote:call('box.select', '0', '0', 123)
---
 - 123: {'test1', 'test2'}
...
lua tuple
---
 - 123: {'test1', 'test2'}
...
lua type(tuple)
---
 - userdata
...
lua #tuple
---
 - 3
...
lua box.update(0, 123, '=p', 1, 'test1-updated')
---
 - 123: {'test1-updated', 'test2'}
...
lua remote:update(0, 123, '=p', 2, 'test2-updated')
---
 - 123: {'test1-updated', 'test2-updated'}
...
lua box.insert(0, 123, 'test1', 'test2')
---
error: 'Duplicate key exists in unique index 0'
...
lua remote:insert(0, 123, 'test1', 'test2')
---
error: 'Duplicate key exists in unique index 0'
...
lua remote:insert(0, 345, 'test1', 'test2')
---
 - 345: {'test1', 'test2'}
...
lua remote:select(0, 0, 345)
---
 - 345: {'test1', 'test2'}
...
lua remote:call('box.select', 0, 0, 345)
---
 - 345: {'test1', 'test2'}
...
lua box.select(0, 0, 345)
---
 - 345: {'test1', 'test2'}
...
lua remote:replace(0, 345, 'test1-replaced', 'test2-replaced')
---
 - 345: {'test1-replaced', 'test2-replaced'}
...
lua box.select(0, 0, 345)
---
 - 345: {'test1-replaced', 'test2-replaced'}
...
lua remote:select_limit(0, 0, 0, 1000, 345)
---
 - 345: {'test1-replaced', 'test2-replaced'}
...
lua box.select_range(0, 0, 1000)
---
 - 123: {'test1-updated', 'test2-updated'}
 - 345: {'test1-replaced', 'test2-replaced'}
...
lua remote:select_range(0, 0, 1000)
---
 - 123: {'test1-updated', 'test2-updated'}
 - 345: {'test1-replaced', 'test2-replaced'}
...
lua box.select(0, 0, 345)
---
 - 345: {'test1-replaced', 'test2-replaced'}
...
lua remote:select(0, 0, 345)
---
 - 345: {'test1-replaced', 'test2-replaced'}
...
lua remote:timeout(0.5):select(0, 0, 345)
---
 - 345: {'test1-replaced', 'test2-replaced'}
...
lua remote:call('box.fiber.sleep', '.1')
---
 - 0
...
lua remote:timeout(0.1):call('box.fiber.sleep', '10')
---
 - nil
...
lua pstart = box.time()
---
...
lua parallel = {}
---
...
lua function parallel_foo(id) box.fiber.sleep(math.random() * .05) return id end
---
...
lua parallel_foo('abc')
---
 - abc
...
lua for i = 1, 20 do box.fiber.resume(box.fiber.create(function() box.fiber.detach() local s = string.format('%07d', i) local so = remote:call('parallel_foo', s) table.insert(parallel, tostring(s == so[0]) ) end)) end
---
...
lua for i = 1, 20 do if #parallel == 20 then break end box.fiber.sleep(0.1) end
---
...
lua unpack(parallel)
---
 - true
 - true
 - true
 - true
 - true
 - true
 - true
 - true
 - true
 - true
 - true
 - true
 - true
 - true
 - true
 - true
 - true
 - true
 - true
 - true
...
lua #parallel
---
 - 20
...
lua box.time() - pstart < 0.5
---
 - true
...
