test_run = require('test_run').new()
---
...
--
-- gh-2677: box.session.push binary protocol tests.
--
--
-- Usage.
--
box.session.push()
---
- error: 'Usage: box.session.push(data, sync)'
...
box.session.push(1, 'a')
---
- error: 'Usage: box.session.push(data, sync)'
...
fiber = require('fiber')
---
...
messages = {}
---
...
test_run:cmd("setopt delimiter ';'")
---
- true
...
-- Do push() with no explicit sync. Use session.sync() by default.
function do_pushes()
    for i = 1, 5 do
        box.session.push(i)
        fiber.sleep(0.01)
    end
    return 300
end;
---
...
test_run:cmd("setopt delimiter ''");
---
- true
...
netbox = require('net.box')
---
...
box.schema.user.grant('guest', 'read,write,execute', 'universe')
---
...
c = netbox.connect(box.cfg.listen)
---
...
c:ping()
---
- true
...
c:call('do_pushes', {}, {on_push = table.insert, on_push_ctx = messages})
---
- 300
...
messages
---
- - 1
  - 2
  - 3
  - 4
  - 5
...
-- Add a little stress: many pushes with different syncs, from
-- different fibers and DML/DQL requests.
catchers = {}
---
...
started = 0
---
...
finished = 0
---
...
s = box.schema.create_space('test', {format = {{'field1', 'integer'}}})
---
...
pk = s:create_index('pk')
---
...
c:reload_schema()
---
...
test_run:cmd("setopt delimiter ';'")
---
- true
...
function dml_push_and_dml(key)
    local sync = box.session.sync()
    box.session.push('started dml', sync)
    s:replace{key}
    box.session.push('continued dml', sync)
    s:replace{-key}
    box.session.push('finished dml', sync)
    return key
end;
---
...
function do_pushes(val)
    local sync = box.session.sync()
    for i = 1, 5 do
        box.session.push(i, sync)
        fiber.yield()
    end
    return val
end;
---
...
function push_catcher_f()
    fiber.yield()
    started = started + 1
    local catcher = {messages = {}, retval = nil, is_dml = false}
    catcher.retval = c:call('do_pushes', {started},
                            {on_push = table.insert,
                             on_push_ctx = catcher.messages})
    table.insert(catchers, catcher)
    finished = finished + 1
end;
---
...
function dml_push_and_dml_f()
    fiber.yield()
    started = started + 1
    local catcher = {messages = {}, retval = nil, is_dml = true}
    catcher.retval = c:call('dml_push_and_dml', {started},
                            {on_push = table.insert,
                             on_push_ctx = catcher.messages})
    table.insert(catchers, catcher)
    finished = finished + 1
end;
---
...
-- At first check that a pushed message can be ignored in a binary
-- protocol too.
c:call('do_pushes', {300});
---
- 300
...
-- Then do stress.
for i = 1, 200 do
    fiber.create(dml_push_and_dml_f)
    fiber.create(push_catcher_f)
end;
---
...
while finished ~= 400 do fiber.sleep(0.1) end;
---
...
failed_catchers = {};
---
...
for _, c in pairs(catchers) do
    if c.is_dml then
        if #c.messages ~= 3 or c.messages[1] ~= 'started dml' or
           c.messages[2] ~= 'continued dml' or
           c.messages[3] ~= 'finished dml' or s:get{c.retval} == nil or
           s:get{-c.retval} == nil then
            table.insert(failed_catchers, c)
        end
    else
        if c.retval == nil or #c.messages ~= 5 then
            table.insert(failed_catchers, c)
        else
            for k, v in pairs(c.messages) do
                if k ~= v then
                    table.insert(failed_catchers, c)
                    break
                end
            end
        end
    end
end;
---
...
test_run:cmd("setopt delimiter ''");
---
- true
...
failed_catchers
---
- []
...
#s:select{}
---
- 400
...
--
-- Ok to push NULL.
--
function push_null() box.session.push(box.NULL) end
---
...
messages = {}
---
...
c:call('push_null', {}, {on_push = table.insert, on_push_ctx = messages})
---
...
messages
---
- - null
...
--
-- Test binary pushes.
--
ibuf = require('buffer').ibuf()
---
...
msgpack = require('msgpack')
---
...
messages = {}
---
...
resp_len = c:call('do_pushes', {300}, {on_push = table.insert, on_push_ctx = messages, buffer = ibuf})
---
...
resp_len
---
- 10
...
messages
---
- - 8
  - 8
  - 8
  - 8
  - 8
...
decoded = {}
---
...
r = nil
---
...
for i = 1, #messages do r, ibuf.rpos = msgpack.decode_unchecked(ibuf.rpos) table.insert(decoded, r) end
---
...
decoded
---
- - {48: [1]}
  - {48: [2]}
  - {48: [3]}
  - {48: [4]}
  - {48: [5]}
...
r, _ = msgpack.decode_unchecked(ibuf.rpos)
---
...
r
---
- {48: [300]}
...
--
-- Test error in __serialize.
--
ok = nil
---
...
err = nil
---
...
messages = {}
---
...
t = setmetatable({100}, {__serialize = function() error('err in ser') end})
---
...
function do_push() ok, err = box.session.push(t) end
---
...
c:call('do_push', {}, {on_push = table.insert, on_push_ctx = messages})
---
...
ok, err
---
- null
- '[string "t = setmetatable({100}, {__serialize = functi..."]:1: err in ser'
...
messages
---
- []
...
--
-- Test push from a non-call request.
--
s:truncate()
---
...
_ = s:on_replace(function() box.session.push('replace') end)
---
...
c:reload_schema()
---
...
c.space.test:replace({200}, {on_push = table.insert, on_push_ctx = messages})
---
- [200]
...
messages
---
- - replace
...
s:select{}
---
- - [200]
...
c:close()
---
...
s:drop()
---
...
box.schema.user.revoke('guest', 'read,write,execute', 'universe')
---
...
--
-- Ensure can not push in background.
--
f = fiber.create(function() ok, err = box.session.push(100) end)
---
...
while f:status() ~= 'dead' do fiber.sleep(0.01) end
---
...
ok, err
---
- null
- Session 'background' does not support push()
...
