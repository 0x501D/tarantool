# encoding: tarantool
# 

import os
import os.path

print("bsdsocket tests")
exec admin "lua type(box.socket)"
exec admin "lua box.socket('PF_INET', 'SOCK_STREAM', 'tcp121222'); return box.errno() ~= 0"
exec admin "lua s = box.socket('PF_INET', 'SOCK_STREAM', 'tcp')"
exec admin "lua s:wait(.01)"
exec admin "lua type(s)"
exec admin "lua string.match(tostring(s), 'fd %d+, aka 0%.0%.0%.0:0') ~= nil"
exec admin "lua s:errno()"
exec admin "lua type(s:error())"
# Invalid arguments
exec admin "lua for k in pairs(getmetatable(s).__index) do local r, msg = pcall(s[k]); if not msg:match('Usage:') then print(k) end end"

exec admin "lua s:nonblock(false)"
exec admin "lua s:sysconnect('127.0.0.1', box.cfg.primary_port)"
exec admin "lua s:nonblock(true)"
exec admin "lua s:nonblock()"
exec admin "lua s:nonblock(false)"
exec admin "lua s:nonblock()"
exec admin "lua s:nonblock(true)"

exec admin "lua s:readable(.01)"
exec admin "lua s:wait(.01)"
exec admin "lua s:readable(0)"
exec admin "lua s:errno() > 0"
exec admin "lua s:error()"
exec admin "lua s:writable(.00000000000001)"
exec admin "lua s:writable(0)"
exec admin "lua s:wait(.01)"

exec admin "lua s:syswrite(box.pack('iii', 65280, 0, 12334))"
exec admin "lua s:readable(1)"
exec admin "lua s:wait(.01)"
exec admin "lua box.unpack('iii', s:sysread(4096))"

exec admin "lua s:syswrite(box.pack('iii', 65280, 0, 12335))"
exec admin "lua s:readable(1)"
exec admin "lua string.len(s:sysread(4096))"
exec admin "lua s:close()"

exec admin "lua s = box.socket('PF_INET', 'SOCK_STREAM', 'tcp')"
exec admin "lua s:setsockopt('SOL_SOCKET', 'SO_REUSEADDR', true)"
exec admin "lua s:error()"
exec admin "lua s:bind('127.0.0.1', 3457)"
exec admin "lua s:error()"
exec admin "lua s:listen(128)"
exec admin "lua sevres = {}"
exec admin "lua type(box.fiber.wrap(function() s:readable() do local sc = s:accept() table.insert(sevres, sc) sc:syswrite('ok') sc:close() end end))"
exec admin "lua #sevres"

exec admin "lua sc = box.socket('PF_INET', 'SOCK_STREAM', 'tcp')"
exec admin "lua sc:nonblock(false)"
exec admin "lua sc:sysconnect('127.0.0.1', 3457)"
exec admin "lua sc:nonblock(true)"
exec admin "lua sc:readable(.5)"
exec admin "lua sc:sysread()"
exec admin "lua string.match(tostring(sc), ', peer') ~= nil"
exec admin "lua #sevres"
exec admin "lua sevres[1].host"

exec admin "lua s:setsockopt('SOL_SOCKET', 'SO_BROADCAST', false)"
exec admin "lua s:getsockopt('SOL_SOCKET', 'SO_TYPE')"
exec admin "lua s:error()"
exec admin "lua s:setsockopt('SOL_SOCKET', 'SO_BSDCOMPAT', false)"
exec admin "lua s:setsockopt('SOL_SOCKET', 'SO_DEBUG', false)"
exec admin "lua s:getsockopt('SOL_SOCKET', 'SO_DEBUG')"
exec admin "lua s:setsockopt('SOL_SOCKET', 'SO_ACCEPTCONN', 1)"
exec admin "lua s:getsockopt('SOL_SOCKET', 'SO_RCVBUF') > 32"
exec admin "lua s:error()"

exec admin "lua s:linger()"
exec admin "lua s:linger(true, 1)"
exec admin "lua s:linger()"
exec admin "lua s:linger(false, 1)"
exec admin "lua s:linger()"
exec admin "lua s:shutdown('R')"
exec admin "lua s:close()"

exec admin "lua s = box.socket('PF_INET', 'SOCK_STREAM', 'tcp')"
exec admin "lua s:setsockopt('SOL_SOCKET', 'SO_REUSEADDR', true)"
exec admin "lua s:bind('127.0.0.1', 3457)"
exec admin "lua s:listen(128)"

exec admin "lua sc = box.socket('PF_INET', 'SOCK_STREAM', 'tcp')"

exec admin "lua sc:writable()"
exec admin "lua sc:readable()"
exec admin "lua r = sc:sysconnect('127.0.0.1', 3457); errno = box.errno()"
exec admin "lua r or errno == box.errno.EINPROGRESS"
exec admin "lua sc:writable(10)"
exec admin "lua sc:write('Hello, world')"

exec admin "lua sa, addr = s:accept()"
exec admin "lua addr2 = sa:name()"
exec admin "lua addr2.host == addr.host"
exec admin "lua addr2.family == addr.family"
exec admin "lua sa:nonblock(1)"
exec admin "lua sa:read(8)"
exec admin "lua sa:read(3)"
exec admin "lua sc:writable()"
exec admin "lua sc:write(', again')"
exec admin "lua sa:read(8)"
exec admin "lua sa:error()"
exec admin "lua string.len(sa:read(0))"
exec admin "lua type(sa:read(0))"
exec admin "lua sa:read(1, .01)"
exec admin "lua sc:writable()"

exec admin "lua sc:send('abc')"
exec admin "lua sa:read(3)"

exec admin "lua sc:send('Hello')"
exec admin "lua sa:readable()"
exec admin "lua sa:recv()"
exec admin "lua sa:recv()"

exec admin "lua sc:send('Hello')"
exec admin "lua sc:send(', world')"
exec admin "lua sc:send(\"\\nnew line\")"
exec admin "lua sa:read('\\n', 1)"
exec admin "lua sa:read({chunk = 1, line = 'ine'}, 1)"
exec admin "lua sa:read('ine', 1)"
exec admin "lua sa:read('ine', 0.1)"

exec admin "lua sc:send('Hello, world')"
exec admin "lua sa:read(',', 1)"
exec admin "lua sc:shutdown('W')"
exec admin "lua sa:read(100, 1)"
exec admin "lua sa:read(100, 1)"
exec admin "lua sa:close()"
exec admin "lua sc:close()"

exec admin "lua s = box.socket('PF_UNIX', 'SOCK_STREAM', 0)"
exec admin "lua s:setsockopt('SOL_SOCKET', 'SO_REUSEADDR', true)"
exec admin "lua s ~= nil"
exec admin "lua s:nonblock()"
exec admin "lua s:nonblock(true)"
exec admin "lua s:nonblock()"
if os.path.exists('/tmp/tarantool-test-socket'):
        os.unlink('/tmp/tarantool-test-socket')
exec admin "lua s:bind('unix/', '/tmp/tarantool-test-socket')"
exec admin "lua string.match(tostring(s), 'fd %d+, aka unix/:/tmp/tarantool%-test%-socket') ~= nil"
exec admin "lua s:listen(1234)"

exec admin "lua sc = box.socket('PF_UNIX', 'SOCK_STREAM', 0)"
exec admin "lua sc:nonblock(true)"
exec admin "lua sc:sysconnect('unix/', '/tmp/tarantool-test-socket')"
exec admin "lua sc:error()"

exec admin "lua s:readable()"
exec admin "lua sa = s:accept()"
exec admin "lua sa:nonblock(true)"
exec admin "lua sa:send('Hello, world')"
exec admin "lua sc:recv()"

exec admin "lua sc:close()"
exec admin "lua sa:close()"
exec admin "lua s:close()"

if os.path.exists('/tmp/tarantool-test-socket'):
        os.unlink('/tmp/tarantool-test-socket')

exec admin "lua function aexitst(ai, host, port) for i, a in pairs(ai) do if a.host == host and a.port == port then return true end end return false end"

exec admin "lua aexitst( box.socket.getaddrinfo('localhost', 'http', {  protocol = 'tcp', type = 'SOCK_STREAM'}), '127.0.0.1', 80 )"
exec admin "lua #(box.socket.getaddrinfo('tarantool.org', 'http', {})) > 0"
exec admin "lua #(box.socket.getaddrinfo('non-existing-domain-name-12211alklkl.com', 'http', {})) == 0"

exec admin "lua sc = box.socket('PF_INET', 'SOCK_STREAM', 'tcp')"
exec admin "lua sc:getsockopt('SOL_SOCKET', 'SO_ERROR')"
exec admin "lua sc:nonblock(true)"
exec admin "lua sc:readable()"
exec admin "lua r = sc:sysconnect('127.0.0.1', 3458); errno = box.errno()"
exec admin "lua r or errno == box.errno.EINPROGRESS"
exec admin "lua string.match(tostring(sc), ', peer') == nil"
exec admin "lua sc:writable()"
exec admin "lua string.match(tostring(sc), ', peer') == nil"
exec admin "lua box.errno.strerror(sc:getsockopt('SOL_SOCKET', 'SO_ERROR'))"

exec admin "lua box.cjson.encode(box.socket.getaddrinfo('ya.ru', '80', { flags = { 'AI_NUMERICSERV', 'AI_NUMERICHOST', } }))"

exec admin "lua sc = box.socket('AF_INET', 'SOCK_STREAM', 'tcp')"
exec admin "lua box.cjson.encode(sc:name())"
exec admin "lua sc:name()"
exec admin "lua sc:nonblock(true)"
exec admin "lua sc:close()"

exec admin "lua s = box.socket('AF_INET', 'SOCK_DGRAM', 'udp')"
exec admin "lua s:bind('127.0.0.1', 3548)"
exec admin "lua sc = box.socket('AF_INET', 'SOCK_DGRAM', 'udp')"
exec admin "lua sc:sendto('127.0.0.1', 3548, 'Hello, world')"
exec admin "lua s:readable(10)"
exec admin "lua s:recv(4096)"

exec admin "lua sc:sendto('127.0.0.1', 3548, 'Hello, world, 2')"
exec admin "lua s:readable(10)"
exec admin "lua local d, from = s:recvfrom() print(' - ', from.port > 0) from.port = 'Random port' return box.cjson.encode{d, from}"
exec admin "lua s:close()"
exec admin "lua sc:close()"

exec admin "lua s = box.socket('AF_INET', 'SOCK_DGRAM', 'udp')"
exec admin "lua s:nonblock(true)"
exec admin "lua s:bind('127.0.0.1')"
exec admin "lua s:name().port > 0"
exec admin "lua sc = box.socket('AF_INET', 'SOCK_DGRAM', 'udp')"
exec admin "lua sc:nonblock(true)"
exec admin "lua sc:sendto('127.0.0.1', s:name().port)"
exec admin "lua sc:sendto('127.0.0.1', s:name().port, 'Hello, World!')"
exec admin "lua s:readable(1)"
exec admin "lua data, from = s:recvfrom(10)"
exec admin "lua data"
exec admin "lua s:sendto(from.host, from.port, 'Hello, hello!')"
exec admin "lua sc:readable(1)"
exec admin "lua data_r, from_r = sc:recvfrom()"
exec admin "lua data_r"
exec admin "lua from_r.host"
exec admin "lua from_r.port == s:name().port"
exec admin "lua s:close()"
exec admin "lua sc:close()"

print("tcp_connect")

exec admin "lua s = box.socket.tcp_connect('tarantool.org', 80)"
exec admin "lua string.match(tostring(s), ', aka') ~= nil"
exec admin "lua string.match(tostring(s), ', peer') ~= nil"
exec admin "lua s:write('HEAD / HTTP/1.0\\r\\nHost: tarantool.org\\r\\n\\r\\n')"
exec admin "lua header = s:read({chunk = 4000, line = { '\\n\\n', '\\r\\n\\r\\n' }}, 1)"
exec admin "lua string.match(header, '\\r\\n\\r\\n$') ~= nil"
# exec admin "lua string.match(header, '200 [Oo][Kk]') ~= nil"
exec admin "lua s:close()"

# The test can be enabled if the ticket #364 is closed
# exec admin "lua box.socket.tcp_connect('tarantool.org', 80, 0.00000000001)"

# AF_INET
port = 35490
exec admin "lua s = box.socket('AF_INET', 'SOCK_STREAM', 'tcp')"
exec admin "lua s:bind('127.0.0.1', {})".format(port)
exec admin "lua box.socket.tcp_connect('127.0.0.1', {}), box.errno() == box.errno.ECONNREFUSED".format(port)
exec admin "lua s:listen()"
exec admin "lua sc, errno = box.socket.tcp_connect('127.0.0.1', {}), box.errno()".format(port)
exec admin "lua sc ~= nil"
exec admin "lua errno == 0"
exec admin "lua sc:close()"
exec admin "lua s:close()"
exec admin "lua box.socket.tcp_connect('127.0.0.1', {}), box.errno() == box.errno.ECONNREFUSED".format(port)

# AF_UNIX
path = '/tmp/tarantool-test-socket'
exec admin "lua s = box.socket('AF_UNIX', 'SOCK_STREAM', 0)"
exec admin "lua s:bind('unix/', '{}')".format(path)
exec admin "lua box.socket.tcp_connect('unix/', '{}'), box.errno() == box.errno.ECONNREFUSED".format(path)
exec admin "lua s:listen()"
exec admin "lua sc, errno = box.socket.tcp_connect('unix/', '{}'), box.errno()".format(path)
exec admin "lua sc ~= nil"
exec admin "lua sc:close()"
exec admin "lua s:close()"
exec admin "lua box.socket.tcp_connect('unix/', '{}'), box.errno() == box.errno.ECONNREFUSED".format(path)
print('remove unix socket')
if os.path.exists(path):
        os.unlink(path)
exec admin "lua box.socket.tcp_connect('unix/', '{}'), box.errno() == box.errno.ENOENT".format(path)

exec admin "lua sa = box.socket.tcp_connect('127.0.0.1', box.cfg.primary_port)"
exec admin "lua sa:close()"
exec admin "lua sa.socket.fd = 512"
exec admin "lua sa:fd()"
exec admin "lua tostring(sa)"
exec admin "lua sa:readable(0)"
exec admin "lua sa:writable(0)"
exec admin "lua sa = nil"

exec admin "lua s = box.socket.tcp_connect('127.0.0.1', box.cfg.primary_port)"
exec admin "lua ch = box.ipc.channel()"
exec admin "lua f = box.fiber.wrap(function() s:read(12) ch:put(true) end)"
exec admin "lua box.fiber.sleep(.1)"
exec admin "lua s:close()"
exec admin "lua ch:get(1)"
exec admin "lua s:error()"

path = '/tmp/tarantool-test-socket'
if os.path.exists(path):
        os.unlink(path)
exec admin "lua path = '%s'" % path
exec admin "lua s = box.socket('PF_UNIX', 'SOCK_STREAM', 0)"
exec admin "lua s:setsockopt('SOL_SOCKET', 'SO_REUSEADDR', true)"
exec admin "lua s:error()"
exec admin "lua s:bind('unix/', path)"
exec admin "lua s:error()"
exec admin "lua s:listen(128)"
exec admin "lua f = box.fiber.wrap(function() for i=1,2 do s:readable() local sc = s:accept(); sc:write('ok!'); sc:shutdown(); sc:close() end end)"

exec admin "lua c = box.socket.tcp_connect('unix/', path)"
exec admin "lua c:error()"
exec admin "lua x = c:read('!')"
exec admin "lua x, type(x), #x"
exec admin "lua x = c:read('!')"
exec admin "lua c:error()"
exec admin "lua x, type(x), #x"
exec admin "lua x = c:read('!')"
exec admin "lua c:error()"
exec admin "lua x, type(x), #x"
exec admin "lua c:close()"

exec admin "lua c = box.socket.tcp_connect('unix/', path)"
exec admin "lua c:error()"
exec admin "lua x = c:read(3)"
exec admin "lua c:error()"
exec admin "lua x, type(x), #x"
exec admin "lua x = c:read(1)"
exec admin "lua c:error()"
exec admin "lua x, type(x), #x"
exec admin "lua x = c:read(1)"
exec admin "lua c:error()"
exec admin "lua x, type(x), #x"
exec admin "lua x = c:sysread(1)"
exec admin "lua c:error()"
exec admin "lua x, type(x), #x"
exec admin "lua c:close()"

exec admin "lua s:close()"

os.unlink(path)

exec admin "lua server, addr = box.socket.tcp_server('unix/', path, function(s) s:write('Hello, world') end)"
exec admin "lua type(addr)"
exec admin "lua server ~= nil"
exec admin "lua box.fiber.sleep(.5)"
exec admin "lua client = box.socket.tcp_connect('unix/', path)"
exec admin "lua client ~= nil"
exec admin "lua client:read(123)"
exec admin "lua client:close()"
exec admin "lua server:close()"
exec admin "lua box.fiber.sleep(.5)"

if not os.path.exists(path):
    print 'unix socket was removed'

exec admin "lua server, addr = box.socket.tcp_server('localhost', 0, { handler = function(s) s:read(2); s:write('Hello, world') end, name = 'testserv'})"
exec admin "lua type(addr)"
exec admin "lua server ~= nil"
exec admin "lua addr2 = server:name()"
exec admin "lua addr.host == addr2.host"
exec admin "lua addr.family == addr2.family"
exec admin "lua box.fiber.sleep(.5)"
exec admin "lua client = box.socket.tcp_connect(addr2.host, addr2.port)"
exec admin "lua client ~= nil"
# Check that listen and client fibers have appropriate names
exec admin "lua cnt = 0"
exec admin "lua for i=100,200 do local f = box.fiber.find(i); if f and f:name():match('^testserv/') then cnt = cnt + 1; end; end"
exec admin "lua cnt"
exec admin "lua client:write('hi')"
exec admin "lua client:read(123)"
exec admin "lua client:close()"
exec admin "lua server:close()"

## gh-658: socket:read() incorrectly handles size and delimiter together
exec admin 'lua body = "a 10\\nb 15\\nabc"'
exec admin 'lua remaining = #body'
exec admin 'lua server = box.socket.tcp_server("unix/", "%s", function(s) s:write(body) s:read(100500) end)'.format(path)
exec admin 'lua client = box.socket.tcp_connect("unix/", "%s")'.format(path)
exec admin 'lua buf = client:read({ size = remaining, delimiter = "[\\r\\n]+"})'
exec admin 'lua buf == "a 10\\n"'
exec admin 'lua remaining = remaining - #buf'
exec admin 'lua buf = client:read({ size = remaining, delimiter = "[\\r\\n]+"})'
exec admin 'lua buf == "b 15\\n"'
exec admin 'lua remaining = remaining - #buf'
exec admin 'lua buf = client:read({ size = remaining, delimiter = "[\\r\\n]+"})'
exec admin 'lua buf == "abc"'
exec admin 'lua remaining = remaining - #buf'
exec admin 'lua remaining == 0'
exec admin 'lua buf = client:read({ size = remaining, delimiter = "[\\r\\n]+"})'
exec admin 'lua buf == ""'
exec admin 'lua buf = client:read({ size = remaining, delimiter = "[\\r\\n]+"})'
exec admin 'lua buf == ""'
exec admin 'lua client:close()'
exec admin 'lua server:close()'

# Test that socket is closed on GC
exec admin "lua s = box.socket('AF_UNIX', 'SOCK_STREAM', 0)"
exec admin "lua s:bind('unix/', '{}')".format(path)
exec admin "lua s:listen()"
exec admin "lua s = nil"
exec admin "lua collectgarbage('collect')"
exec admin "lua collectgarbage('collect')"
exec admin "lua client, errno = box.socket.tcp_connect('unix/', '{}'), box.errno()".format(path)
exec admin "lua errno == box.errno.ECONNREFUSED"
os.unlink(path)

print 'test bind unix socket if old socket is exists'
exec admin "lua s = box.socket('AF_UNIX', 'SOCK_STREAM', 0)"
exec admin "lua s:bind('unix/', '{}')".format(path)
exec admin "lua s:listen()"
exec admin "lua s:close()"
if not os.path.exists(path):
    print 'unix socket was removed: test failed'
exec admin "lua s = box.socket('AF_UNIX', 'SOCK_STREAM', 0)"
exec admin "lua s:bind('unix/', '{}')".format(path)
exec admin "lua s = box.socket.tcp_server('unix/', '{}', function() end)".format(path)
exec admin "lua s ~= nil"
exec admin "lua s:close()"
if os.path.exists(path):
    print 'unix socket was not removed: test failed'

exec admin "lua box.cjson.encode{ box.socket.tcp_connect('invalid domain name') == nil, box.errno.strerror() }"
exec admin "lua box.cjson.encode{ box.socket.tcp_connect('test:test@localhost:3303') == nil, box.errno.strerror() }"


exec admin "lua box.socket.getaddrinfo('host', 'port', { type = 'WRONG' }) == nil and box.errno() == box.errno.EINVAL"
exec admin "lua box.socket.getaddrinfo('host', 'port', { family = 'WRONG' }) == nil and box.errno() == box.errno.EINVAL"
exec admin "lua box.socket.getaddrinfo('host', 'port', { protocol = 'WRONG' }) == nil and box.errno() == box.errno.EINVAL"
exec admin "lua box.socket.getaddrinfo('host', 'port', { flags = 'WRONG' }) == nil and box.errno() == box.errno.EINVAL"
