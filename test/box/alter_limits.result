-- ----------------------------------------------------------------
-- LIMITS
-- ----------------------------------------------------------------
box.schema.SYSTEM_ID_MIN
---
- 256
...
box.schema.FIELD_MAX
---
- 4294967295
...
box.schema.NAME_MAX
---
- 32
...
box.schema.INDEX_ID
---
- 288
...
box.schema.SPACE_ID
---
- 280
...
box.schema.INDEX_MAX
---
- 10
...
box.schema.SPACE_MAX
---
- 2147483647
...
box.schema.SYSTEM_ID_MAX
---
- 511
...
box.schema.SCHEMA_ID
---
- 272
...
box.schema.FORMAT_ID_MAX
---
- 65534
...
-- ----------------------------------------------------------------
-- CREATE SPACE
-- ----------------------------------------------------------------
s = box.schema.create_space('tweedledum')
---
...
-- space already exists
box.schema.create_space('tweedledum')
---
- error: Space 'tweedledum' already exists
...
-- create if not exists
s = box.schema.create_space('tweedledum', { if_not_exists = true })
---
...
s:drop()
---
...
-- no such space
s:drop()
---
- error: Space 512 does not exist
...
-- explicit space id
s = box.schema.create_space('tweedledum', { id = 3000 })
---
...
s.n
---
- 3000
...
-- duplicate id
box.schema.create_space('tweedledee', { id = 3000 })
---
- error: Duplicate key exists in unique index 0
...
-- stupid space id
box.schema.create_space('tweedledee', { id = 'tweedledee' })
---
- error: 'Tuple field 0 type does not match one required by operation: expected NUM'
...
s:drop()
---
...
-- too long space name
box.schema.create_space(string.rep('tweedledee', 100))
---
- error: 'Failed to create space 512: space name is too long'
...
-- space name limit
box.schema.create_space(string.rep('t', box.schema.NAME_MAX)..'_')
---
- error: 'Failed to create space 512: space name is too long'
...
s = box.schema.create_space(string.rep('t', box.schema.NAME_MAX - 1)..'_')
---
...
s.name
---
- ttttttttttttttttttttttttttttttt_
...
s:drop()
---
...
s = box.schema.create_space(string.rep('t', box.schema.NAME_MAX - 2)..'_')
---
...
s.name
---
- tttttttttttttttttttttttttttttt_
...
s:drop()
---
...
-- space with no indexes - test update, delete, select, truncate
s = box.schema.create_space('tweedledum')
---
...
s:insert(0)
---
- error: 'No index #0 is defined in space 512'
...
s:select(0)
---
- error: 'No index #0 is defined in space 512'
...
s:select_range(0, 0, 0)
---
- error: '[string "-- schema.lua (internal file)..."]:167: attempt to index a nil
    value'
...
s:delete(0)
---
- error: 'No index #0 is defined in space 512'
...
s:update(0, "=p", 0, 0)
---
- error: 'No index #0 is defined in space 512'
...
s:replace(0)
---
- error: 'No index #0 is defined in space 512'
...
s.index[0]
---
- null
...
s:truncate()
---
- error: 'No index #0 is defined in space 512'
...
s.enabled
---
- false
...
-- enabled/disabled transition
s:create_index('primary', 'hash', { parts = { 0, 'num' } })
---
...
s.enabled
---
- true
...
-- rename space - same name
s:rename('tweedledum')
---
...
s.name
---
- tweedledum
...
-- rename space - different name
s:rename('tweedledee')
---
...
s.name
---
- tweedledee
...
-- the reference from box.space[] to the space by old name should be gone
box.space['tweedledum']
---
- null
...
-- rename space - bad name
s:rename(string.rep('t', box.schema.NAME_MAX * 2))
---
- error: 'Can''t modify space 512: space name is too long'
...
s.name
---
- tweedledee
...
-- access to a renamed space
s:insert(0)
---
- [0]
...
s:delete(0)
---
- [0]
...
-- cleanup
s:drop()
---
...
-- create a space with reserved id (ok, but warns in the log)
s = box.schema.create_space('test', { id = 256 })
---
...
s.n
---
- 256
...
s:drop()
---
...
s = box.schema.create_space('test', { arity = 2 })
---
...
s.arity
---
- 2
...
s:create_index('primary', 'tree', { parts = { 0, 'num' } })
---
...
-- arity actually works
s:insert(1)
---
- error: Tuple field count 1 does not match space 512 arity 2
...
s:insert(1, 2)
---
- [1, 2]
...
s:insert(1, 2, 3)
---
- error: Tuple field count 3 does not match space 512 arity 2
...
s:select(0)
---
- [1, 2]
...
-- increase arity -- error
box.space['_space']:update(s.n, "=p", 1, 3)
---
- error: 'Can''t modify space 512: can not change arity on a non-empty space'
...
s:select(0)
---
- [1, 2]
...
-- decrease arity - error
box.space['_space']:update(s.n, "=p", 1, 1)
---
- error: 'Can''t modify space 512: can not change arity on a non-empty space'
...
-- remove arity - ok
box.space['_space']:update(s.n, "=p", 1, 0)
---
- [512, 0, 1953719668]
...
s:select(0)
---
- [1, 2]
...
-- increase arity - error
box.space['_space']:update(s.n, "=p", 1, 3)
---
- error: 'Can''t modify space 512: can not change arity on a non-empty space'
...
s:truncate()
---
...
s:select(0)
---
...
-- set arity of an empty space
box.space['_space']:update(s.n, "=p", 1, 3)
---
- [512, 3, 1953719668]
...
s:select(0)
---
...
-- arity actually works
s:insert(3, 4)
---
- error: Tuple field count 2 does not match space 512 arity 3
...
s:insert(3, 4, 5)
---
- [3, 4, 5]
...
s:insert(3, 4, 5, 6)
---
- error: Tuple field count 4 does not match space 512 arity 3
...
s:insert(7, 8, 9)
---
- [7, 8, 9]
...
s:select(0)
---
- [3, 4, 5]
- [7, 8, 9]
...
-- check transition of space from enabled to disabled on
-- deletion of the primary key
s.enabled
---
- true
...
s.index[0]:drop()
---
...
s.enabled
---
- false
...
s.index[0]
---
- null
...
-- "disabled" on
-- deletion of primary key
s:drop()
---
...
-- -- inject error at various stages of commit and see that
-- the alter has no effects
--
-- add index:
-- ---------
--     - a test case for checks  in tuple_format_new
--     - it raises an exception, and there may be a memory
--     leak if it is not handled correctly
--     - a test case for every constraint in key_def_check
--     - test that during the rebuild there is a duplicate
--     according to the new index
--     - index rebuild -> no field in the index (validate tuple
--     during build)
--     - alter unique -> non unique
--     - alter index type
--     - index access by name
--     - alter add key part
--     - arbitrary index
--     - index count exhaustion
--     - test that during commit phase
--       -> inject error at commit, inject error at rollback
--     - add check that doesn't allow drop of a primary
--       key in presence of other keys, or moves the space
--       to disabled state otherwise.
--
--     - add identical index - verify there is no rebuild
--     - rename index (all non-essential propeties)
--       -> duplicate key
--     - inject fiber sleep during commit, so that some stuff is added
--     (test crap which happens while there is a record to the wal
--     - test ambiguous field type when adding an index (ER_FIELD_TYPE_MISMATCH)
--     - test addition of a new index on data which it can't handle
--
-- space cache
-- -----------
-- - all the various kinds of reference to a dropped space
--   - iterator to index
--   index to space
--   space ot index
--   variable
--   key def
--   all userdata given away to lua - think how
--
--
-- usability
-- ---------
-- - space name in all error messages!
--         error: Duplicate key exists in unique index 1 (ugly)
--
-- triggers
-- --------
-- - test that after disabling triggers we can
-- create an empty snapshot
-- - test for run_triggers
--
-- recovery
-- --------
--  - add primary key in snapshot
--  - add secondary key in snapshot
--  - add primary key in xlog
--  - add secondary key in xlog
--  - the same for an empty space and a space with data
--  - test start from a space entry added in xlog
--  - test start from a space entry dropped in xlog
--  - test enabled/disabled property for these
--  spaces and space from a snapshot
--
--
-- features
--------
-- - ffi function to enable/disable space
