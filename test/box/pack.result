-- Test box.pack()
box.pack()
---
- error: 'bad argument #1 to ''?'' (string expected, got no value)'
...
box.pack(1)
---
- error: 'box.pack: argument count does not match the format'
...
box.pack('abc')
---
- error: 'box.pack: argument count does not match the format'
...
box.pack('a', ' - hello')
---
- ' - hello'
...
box.pack('Aa', ' - hello', ' world')
---
- ' - hello world'
...
string.sub(box.pack('p', 1684234849), 2)
---
- dcba
...
box.pack('p', 'this string is 45 characters long 1234567890 ')
---
- !!binary 2S10aGlzIHN0cmluZyBpcyA0NSBjaGFyYWN0ZXJzIGxvbmcgMTIzNDU2Nzg5MCA=
...
box.pack('s', 0x4d)
---
- "M\0"
...
box.pack('ssss', 25940, 29811, 28448, 11883)
---
- Test ok.
...
box.pack('SSSS', 25940, 29811, 28448, 11883)
---
- Test ok.
...
box.pack('SSSSSSSS', 28493, 29550, 27680, 27497, 29541, 20512, 29285, 8556)
---
- Mons likes Perl!
...
box.pack('bsil', 84, 29541, 1802444916, 2338318684567380014ULL)
---
- 'Test ok. Let`s '
...
box.unpack('b', 'T')
---
- 84
...
box.unpack('s', 'Te')
---
- 25940
...
box.unpack('i', 'Test')
---
- 1953719636
...
box.unpack('l', 'Test ok.')
---
- 3344889333436081492
...
box.unpack('bsil', box.pack('bsil', 255, 65535, 4294967295, tonumber64('18446744073709551615')))
---
- 255
- 65535
- 4294967295
- 18446744073709551615
...
box.unpack('ppp', box.pack('ppp', 'one', 'two', 'three'))
---
- one
- two
- three
...
num, str, num64 = box.unpack('ppp', box.pack('ppp', 666, 'string', tonumber64('666666666666666')))
---
...
num, str, num64
---
- 666
- string
- 666666666666666
...
box.unpack('=p', box.pack('=p', 1, '666'))
---
- 1
- '666'
...
box.unpack('','')
---
...
box.unpack('ii', box.pack('i', 1))
---
- error: 'box.unpack(''i''): got 4 bytes (expected: 8+)'
...
box.unpack('i', box.pack('ii', 1, 1))
---
- error: 'box.unpack(''i''): too many bytes: unpacked 4, total 8'
...
box.unpack('+p', box.pack('=p', 1, '666'))
---
- error: 'box.unpack(''+p''): unexpected opcode: offset 0, expected ''+'',found ''='''
...
box.unpack('p', box.pack('p', 'this this this this'))
---
- this this this this
...
