================ semaphores =======================
lua sm = box.ifc.semaphore(1)
---
...
lua sm.up()
---
error: 'usage: semaphore:up()'
...
lua sm.up({})
---
error: 'usage: semaphore:up()'
...
lua sm:up()
---
 - 2
...
lua sm()
---
 - 2
...
lua sm:up()
---
 - 3
...
lua sm()
---
 - 3
...
lua sm:down()
---
 - true
...
lua sm()
---
 - 2
...
lua sm:down(.1)
---
 - true
...
lua sm()
---
 - 1
...
lua sm:trydown()
---
 - true
...
lua sm()
---
 - 0
...
lua sm()
---
 - 0
...
lua sm:trydown()
---
 - false
...
lua sm:trydown()
---
 - false
...
lua sm:down(.5)
---
 - false
...
lua state = {}
---
...
lua tfbr = box.fiber.create(function() box.fiber.detach() table.insert(state, 'tfbr started') sm:down() table.insert(state, 'tfbr') sm:up() end) box.fiber.resume(tfbr)
---
...
lua tfbrd = box.fiber.create(function() box.fiber.detach() table.insert(state, 'tfbrd started') sm:down() table.insert(state, 'tfbrd') sm:up() end) box.fiber.resume(tfbrd)
---
...
lua box.fiber.sleep(.5)
---
...
lua  for k, v in pairs(state) do print(k, ': ', v) end
---
1: tfbr started
2: tfbrd started
...
lua sm()
---
 - -2
...
lua box.fiber.cancel(tfbrd)
---
...
lua sm()
---
 - -1
...
lua sm:up()
---
 - 0
...
lua box.fiber.sleep(.5)
---
...
lua  for k, v in pairs(state) do print(k, ': ', v) end
---
1: tfbr started
2: tfbrd started
3: tfbr
...
================ mutexes =======================
lua m = box.ifc.mutex()
---
...
lua m:locked()
---
 - false
...
lua print(m())
---
false
...
lua flag = 0
---
...
lua m:lock()
---
 - true
...
lua m:locked()
---
 - true
...
lua tfbr = box.fiber.create(function() box.fiber.detach() m:lock() flag = 1 m:unlock() end)
---
...
lua box.fiber.resume(tfbr)
---
...
lua print(flag)
---
0
...
lua box.fiber.sleep(.5)
---
...
lua m:trylock()
---
 - false
...
lua m:unlock()
---
...
lua print(flag)
---
1
...
lua m:locked()
---
 - false
...
lua m:lock(.1)
---
 - true
...
lua m:locked()
---
 - true
...
lua m:lock(.1)
---
 - false
...
lua m:locked()
---
 - true
...
lua m = nil
---
...
lua print(m)
---
nil
...
================ channels =======================
lua ch = box.ifc.channel()
---
...
lua ch:is_full()
---
 - false
...
lua ch:is_empty()
---
 - true
...
lua ch:get(.1)
---
 - nil
...
lua ch:put()
---
error: 'usage: channel:put(var [, timeout])'
...
lua ch:put('test')
---
 - true
...
lua ch:get()
---
 - test
...
lua ch:get('wrong timeout')
---
error: 'timeout must be number'
...
lua ch:get(-10)
---
error: 'wrong timeout'
...
lua ch:put(234)
---
 - true
...
lua ch:put(345, .5)
---
 - false
...
lua ch:is_full()
---
 - true
...
lua ch:is_empty()
---
 - false
...
lua buffer = {}
---
...
lua tfbr = box.fiber.create(function() box.fiber.detach() while true do table.insert(buffer, ch:get()) end end)
---
...
lua box.fiber.resume(tfbr)
---
...
lua for i = 1, 10 do ch:put(i) box.fiber.sleep(0.01) end
---
...
lua box.fiber.sleep(.5)
---
...
lua ch:has_readers()
---
 - true
...
lua ch:has_writers()
---
 - false
...
lua box.fiber.cancel(tfbr)
---
...
lua ch:has_readers()
---
 - false
...
lua ch:has_writers()
---
 - false
...
lua ch:put(box.info.pid)
---
 - true
...
lua ch:is_full()
---
 - true
...
lua ch:is_empty()
---
 - false
...
lua ch:get(box.info.pid) == box.info.pid
---
 - true
...
lua for i, v in pairs(buffer) do print(v) end
---
234
1
2
3
4
5
6
7
8
9
10
...
lua ch:is_empty()
---
 - true
...
lua ch:broadcast()
---
error: 'usage: channel:broadcast(variable)'
...
lua ch:broadcast(123)
---
 - true
...
lua ch:get()
---
 - 123
...
lua ch:is_full()
---
 - false
...
lua ch:is_empty()
---
 - true
...
lua tfbr = box.fiber.create(function() box.fiber.detach() while true do local v = ch:get() table.insert(buffer, 'tfbr  - ' .. tostring(v)) end end)
---
...
lua box.fiber.resume(tfbr)
---
...
lua tfbr2 = box.fiber.create(function() box.fiber.detach() while true do local v = ch:get() table.insert(buffer, 'tfbr2 - ' .. tostring(v)) end end)
---
...
lua box.fiber.resume(tfbr2)
---
...
lua buffer = {}
---
...
lua box.fiber.sleep(2)
---
...
lua for i, v in pairs(buffer) do print(v) end
---
...
lua ch:is_full()
---
 - false
...
lua ch:is_empty()
---
 - true
...
lua ch:put(1)
---
 - true
...
lua ch:put(2)
---
 - true
...
lua ch:put(3)
---
 - true
...
lua ch:put(4)
---
 - true
...
lua ch:put(5)
---
 - true
...
lua box.fiber.sleep(0.5)
---
...
lua ch:broadcast('broadcast message!')
---
 - 2
...
lua for i = 35, 45 do print(ch:put(i)) end
---
true
true
true
true
true
true
true
true
true
true
true
...
lua for i, v in pairs(buffer) do print(v) end
---
tfbr  - 1
tfbr2 - 2
tfbr  - 3
tfbr2 - 4
tfbr  - 5
tfbr2 - broadcast message!
tfbr  - broadcast message!
tfbr2 - 35
tfbr  - 36
tfbr2 - 37
tfbr  - 38
tfbr2 - 39
tfbr  - 40
tfbr2 - 41
tfbr  - 42
tfbr2 - 43
tfbr  - 44
tfbr2 - 45
...
