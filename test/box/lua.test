# encoding: utf-8
import os
import sys
# Test Lua from admin console. Whenever producing output,
# make sure it's a valid YAML.
admin("lua")
admin("lua 1")
admin("lua print('  lua says: hello')")
# What's in the box?
admin("lua local t = {} for n in pairs(box) do table.insert(t, '  - box.' .. tostring(n)) end table.sort(t) for i = 1, #t do print(t[i]) end t = nil")
# Test box.pack()
admin("lua box.pack()")
admin("lua box.pack(1)")
admin("lua box.pack('abc')")
admin("lua print(box.pack('a', ' - hello'))")
admin("lua print(box.pack('Aa', ' - hello', ' world'))")
admin("lua print(box.pack('w', 0x30))")
admin("lua print(box.pack('www', 0x30, 0x30, 0x30))")
admin("lua print(box.pack('www', 0x3030, 0x30))")
admin("lua print(string.byte(box.pack('w', 212345), 1, 2))")
admin("lua print(string.sub(box.pack('p', 1684234849), 2))")
admin("lua print(box.pack('p', 'this string is 45 characters long 1234567890 '))")
admin("lua print(box.pack('s', 0x4d))")
admin("lua print(box.pack('ssss', 25940, 29811, 28448, 11883))")
admin("lua print(box.pack('SSSS', 25940, 29811, 28448, 11883))")
admin("lua print(box.pack('SSSSSSSS', 28493, 29550, 27680, 27497, 29541, 20512, 29285, 8556))")
admin("lua print(box.pack('bsilww', 84, 29541, 1802444916, 2338318684567380014ULL, 103, 111))")
admin("lua print(box.unpack('b', 'T'))")
admin("lua print(box.unpack('s', 'Te'))")
admin("lua print(box.unpack('i', 'Test'))")
admin("lua print(box.unpack('l', 'Test ok.'))")
admin("lua box.unpack('bsil', box.pack('bsil', 255, 65535, 4294967295, tonumber64('18446744073709551615')))")
admin("lua box.unpack('www', box.pack('www', 255, 65535, 4294967295))")
admin("lua box.unpack('ppp', box.pack('ppp', 'one', 'two', 'three'))")
admin("lua num, str, num64 = box.unpack('ppp', box.pack('ppp', 666, 'string', tonumber64('666666666666666')))")
admin("lua print(box.unpack('i', num), str, box.unpack('l', num64))")
admin("lua box.unpack('=p', box.pack('=p', 1, '666'))")
admin("lua box.unpack('','')")
admin("lua box.unpack('ii', box.pack('i', 1))")
admin("lua box.unpack('i', box.pack('ii', 1, 1))")
admin("lua box.unpack('+p', box.pack('=p', 1, '666'))")

# Test the low-level box.process() call, which takes a binary packet
# and passes it to box for execution.
# insert:
admin("lua box.process(13, box.pack('iiippp', 0, 1, 3, 1, 'testing', 'lua rocks'))")
# select:
admin("lua box.process(17, box.pack('iiiiiip', 0, 0, 0, 2^31, 1, 1, 1))")
# delete:
admin("lua box.process(21, box.pack('iiip', 0, 1, 1, 1))")
# check delete:
admin("lua box.process(17, box.pack('iiiiiip', 0, 0, 0, 2^31, 1, 1, 1))")
admin("lua box.process(22, box.pack('iii', 0, 0, 0))")
sql("call box.process('abc', 'def')")
sql("call box.pack('test')")
sql("call box.pack('p', 'this string is 45 characters long 1234567890 ')")
sql("call box.pack('p', 'ascii symbols are visible starting from code 20')")
admin("lua function f1() return 'testing', 1, false, -1, 1.123, 1e123, nil end")
admin("lua f1()")
sql("call f1()")
admin("lua f1=nil")
sql("call f1()")
admin("lua function f1() return f1 end")
sql("call f1()")

sql("insert into t0 values (1, 'test box delete')")
sql("call box.delete('0', '\1\0\0\0')")
sql("call box.delete('0', '\1\0\0\0')")
sql("insert into t0 values (1, 'test box delete')")
admin("lua box.delete(0, 1)")
admin("lua box.delete(0, 1)")
sql("insert into t0 values ('abcd', 'test box delete')")
sql("call box.delete('0', '\1\0\0\0')")
sql("call box.delete('0', 'abcd')")
sql("call box.delete('0', 'abcd')")
sql("insert into t0 values ('abcd', 'test box delete')")
admin("lua box.delete(0, 'abcd')")
admin("lua box.delete(0, 'abcd')")
sql("call box.select('0', '0', 'abcd')")
sql("insert into t0 values ('abcd', 'test box.select()')")
sql("call box.select('0', '0', 'abcd')")
admin("lua box.select(0, 0, 'abcd')")
admin("lua box.select(0, 0)")
admin("lua box.select(0, 1)")
admin("lua box.select(0)")
sql("call box.replace('0', 'abcd', 'hello', 'world')")
sql("call box.replace('0', 'defc', 'goodbye', 'universe')")
sql("call box.select('0', '0', 'abcd')")
sql("call box.select('0', '0', 'defc')")
sql("call box.replace('0', 'abcd')")
sql("call box.select('0', '0', 'abcd')")
sql("call box.delete('0', 'abcd')")
sql("call box.delete('0', 'defc')")
sql("call box.insert('0', 'test', 'old', 'abcd')")
# test that insert produces a duplicate key error
sql("call box.insert('0', 'test', 'old', 'abcd')")
sql("call box.update('0', 'test', '=p=p', '\0\0\0\0', 'pass', 1, 'new')")
sql("call box.select('0', '0', 'pass')")
sql("call box.select_range(0, 0, 1, 'pass')")
sql("call box.update('0', 'miss', '+p', 2, '\1\0\0\0')")
sql("call box.update('0', 'pass', '+p', 2, '\1\0\0\0')")
sql("call box.update('0', 'pass', '-p', 2, '\1\0\0\0')")
sql("call box.update('0', 'pass', '-p', 2, '\1\0\0\0')")
admin("lua box.update(0, 'pass', '+p', 2, 1)")
sql("call box.select('0', '0', 'pass')")
admin("lua function field_x(space, key, field_index) return (box.select(space, 0, key))[tonumber(field_index)] end")
sql("call field_x('0', 'pass', '0')")
sql("call field_x('0', 'pass', '1')")
sql("call box.delete('0', 'pass')")
fifo_lua = os.path.abspath("box/fifo.lua")
# don't log the path name
sys.stdout.push_filter("lua dofile(.*)", "lua dofile(...)")
admin("lua dofile('{0}')".format(fifo_lua))
sys.stdout.pop_filter()
admin("lua fifo_max")
admin("lua fifo_push('test', 1)")
admin("lua fifo_push('test', 2)")
admin("lua fifo_push('test', 3)")
admin("lua fifo_push('test', 4)")
admin("lua fifo_push('test', 5)")
admin("lua fifo_push('test', 6)")
admin("lua fifo_push('test', 7)")
admin("lua fifo_push('test', 8)")
admin("lua fifo_top('test')")
admin("lua box.delete(0, 'test')")
admin("lua fifo_top('test')")
admin("lua box.delete(0, 'test')")
admin("lua for k,v in pairs(box.cfg) do print(' - ', k, ': ', v) end")
admin("lua for k,v in pairs(box.space[0]) do if type(v) ~= 'table' then print(' - ', k, ': ', v) end end")
admin("reload configuration")
admin("lua for k,v in pairs(box.cfg) do print(' - ', k, ': ', v) end")
admin("lua for k,v in pairs(box.space[0]) do if type(v) ~= 'table' then print(' - ', k, ': ', v) end end")
# must be read-only
admin("lua box.cfg.nosuchoption = 1")
admin("lua box.space[300] = 1")

admin("lua box.index.new('abc', 'cde')")
admin("lua box.index.new(1, 2)")
admin("lua box.index.new(0, 1)")
admin("lua box.index.new(0, 0)")
admin("lua #box.index.new(0,0)")
admin("lua #box.space[0].index[0].idx")
admin("lua box.insert(0, 'test')")
admin("lua box.insert(0, 'abcd')")
admin("lua #box.index.new(0,0)")
admin("lua #box.space[0].index[0].idx")
admin("lua box.delete(0, 'test')")
admin("lua #box.index.new(0,0)")
admin("lua box.delete(0, 'abcd')")
admin("lua #box.space[0].index[0].idx")
admin("lua #box.index.new(0,0)")
admin("lua box.space[0]:insert('test', 'hello world')")
admin("lua box.space[0]:update('test', '=p', 1, 'bye, world')")
admin("lua box.space[0]:delete('test')")
# test tuple iterators
admin("lua t=box.space[0]:insert('test')")
admin("lua t:next('abcd')")
admin("lua t:next(1)")
admin("lua t:next(t)")
admin("lua t:next(t:next())")
admin("lua for k, v in t:pairs() do print(v) end")
admin("lua t=box.space[0]:replace('test', 'another field')")
admin("lua for k, v in t:pairs() do print(v) end")
admin("lua t=box.space[0]:replace('test', 'another field', 'one more')")
admin("lua for k, v in t:pairs() do print(v) end")
admin("lua t=box.tuple.new({'a', 'b', 'c', 'd'})")
admin("lua for it,field in t:pairs() do print(field); end")
admin("lua it, field = t:next()")
admin("lua getmetatable(it)")
admin("lua box.space[0]:truncate()")
admin("lua box.fiber.sleep(0)")
admin("lua box.fiber.sleep(0.01)")
admin("lua box.fiber.sleep(0.0001)")
admin("lua box.fiber.sleep('hello')")
admin("lua box.fiber.sleep(box, 0.001)")
admin("lua box.fiber.cancel(box.fiber.self())")
admin("lua f = box.fiber.self()")
admin("lua old_id = f:id()")
admin("lua box.fiber.cancel(f)")
admin("lua box.fiber.self():id() - old_id < 3")
admin("lua box.fiber.cancel(box.fiber.self())")
admin("lua box.fiber.self():id() - old_id < 5")
admin("lua g = box.fiber.self()")
admin("lua f==g")
admin("lua function r() f = box.fiber.create(r) return (box.fiber.resume(f)) end")
admin("lua r()")
admin("lua f = box.fiber.create(print('hello')")
admin("lua box.fiber.resume(f)")
# test passing arguments in and out created fiber
admin("lua function r(a, b) print(a) print(b) return a, b end")
admin("lua f=box.fiber.create(r)")
admin("lua box.fiber.resume(f)")
admin("lua f=box.fiber.create(r)")
admin("lua box.fiber.resume(f, 'hello')")
admin("lua f=box.fiber.create(r)")
admin("lua box.fiber.resume(f, 'hello', 'world')")
admin("lua f=box.fiber.create(r)")
admin("lua box.fiber.resume(f, 'hello', 'world', 'wide')")
admin("lua function y(a, b) c=box.fiber.yield(a) return box.fiber.yield(b, c) end")
admin("lua f=box.fiber.create(y)")
admin("lua box.fiber.resume(f, 'hello', 'world')")
admin("lua box.fiber.resume(f, 'wide')")
admin("lua box.fiber.resume(f)")
admin("lua function y() print('started') box.fiber.detach() while true do box.replace(0, 'test', os.time()) box.fiber.sleep(0.001) end end")
admin("lua f = box.fiber.create(y)")
admin("lua box.fiber.resume(f)")
admin("lua box.fiber.sleep(0.002)")
admin("lua box.fiber.cancel(f)")
admin("lua box.fiber.resume(f)")
admin("lua f=nil")
admin("lua for k=1, 10000, 1 do box.fiber.create(function() box.fiber.detach() end) end")
admin("lua collectgarbage('collect')")
# check that these newly created fibers are garbage collected
admin("lua box.fiber.find(900)")
admin("lua box.fiber.find(910)")
admin("lua box.fiber.find(920)")

#
# Test box.fiber.wrap()
#
# This should try to infinitely create fibers,
# but hit the fiber stack size limit and fail
# with an error.
#
admin("lua f = function() box.fiber.wrap(f) end")
sql("call f()")
#
# Test argument passing
#
admin("lua f = function(a, b) box.fiber.wrap(function(arg) result = arg end, a..b) end")
admin("lua f('hello ', 'world')")
admin("lua result")
admin("lua f('bye ', 'world')")
admin("lua result")
#
# Test that the created fiber is detached
#
admin("lua box.fiber.wrap(function() result = box.fiber.status() end)")
admin("lua result")
#
#
print """# A test case for Bug#933487
# tarantool crashed during shutdown if non running LUA fiber
# was created
#"""
admin("lua f = box.fiber.create(function () return true end)")
admin("save snapshot")
admin("save snapshot")
admin("save snapshot")
admin("lua box.fiber.resume(f)")
admin("lua f = box.fiber.create(function () return true end)")
#
#
print """#
#
#"""
admin("lua box.space[0]:insert('test', 'something to splice')")
admin("lua box.space[0]:update('test', ':p', 1, box.pack('ppp', 0, 4, 'no'))")
admin("lua box.space[0]:update('test', ':p', 1, box.pack('ppp', 0, 2, 'every'))")
# check an incorrect offset
admin("lua box.space[0]:update('test', ':p', 1, box.pack('ppp', 100, 2, 'every'))")
admin("lua box.space[0]:update('test', ':p', 1, box.pack('ppp', -100, 2, 'every'))")
admin("lua box.space[0]:truncate()")
admin("lua box.space[0]:insert('test', 'hello', 'october', '20th'):unpack()")
admin("lua box.space[0]:truncate()")
# check how well we can return tables
admin("lua function f1(...) return {...} end")
admin("lua function f2(...) return f1({...}) end")
sql("call f1('test_', 'test_')")
sql("call f2('test_', 'test_')")
sql("call f1()")
sql("call f2()")

# check multi-tuple return
admin("lua function f3() return {{'hello'}, {'world'}} end")
sql("call f3()")
admin("lua function f3() return {'hello', {'world'}} end")
sql("call f3()")
admin("lua function f3() return 'hello', {{'world'}, {'canada'}} end")
sql("call f3()")
admin("lua function f3() return {}, '123', {{}, {}} end")
sql("call f3()")
admin("lua function f3() return { {{'hello'}} } end")
sql("call f3()")
admin("lua function f3() return { box.tuple.new('hello'), {'world'} } end")
sql("call f3()")
admin("lua function f3() return { {'world'}, box.tuple.new('hello') } end")
sql("call f3()")

sql("call f1('jason')")
sql("call f1('jason', 1, 'test', 2, 'stewart')")
lua = """
function box.crossjoin(space0, space1, limit)
  space0 = tonumber(space0)
  space1 = tonumber(space1)
  limit = tonumber(limit)
  local result = {}
  for k0, v0 in box.space[space0]:pairs() do
    for k1, v1 in box.space[space1]:pairs() do
      if limit <= 0 then
        return unpack(result)
      end
      newtuple = {v0:unpack()}
      for _, v in v1:pairs() do table.insert(newtuple, v) end
      table.insert(result, newtuple)
      limit = limit - 1
    end
  end
  return unpack(result)
end"""
admin("lua " + lua.replace('\n', ' '))
admin("lua box.crossjoin(0, 0, 0)")
admin("lua box.crossjoin(0, 0, 10000)")
admin("lua box.space[0]:insert(1)")
sql("call box.crossjoin('0', '0', '10000')")
admin("lua box.space[0]:insert(2)")
sql("call box.crossjoin('0', '0', '10000')")
admin("lua box.space[0]:insert(3, 'hello')")
sql("call box.crossjoin('0', '0', '10000')")
admin("lua box.space[0]:insert(4, 'world')")
admin("lua box.space[0]:insert(5, 'hello world')")
sql("call box.crossjoin('0', '0', '10000')")
admin("lua box.space[0]:truncate()")
admin("lua box.crossjoin = nil")
print """
# A test case for Bug#901674
# No way to inspect exceptions from Box in Lua
"""
admin("lua pcall(box.insert, 99, 1, 'test')")
admin("lua pcall(box.insert, 0, 1, 'hello')")
admin("lua pcall(box.insert, 0, 1, 'hello')")
admin("lua box.space[0]:truncate()")
print """
# A test case for Bug#908094
# Lua provides access to os.execute()
"""
admin("lua os.execute('ls')")


print """
#
# box.fiber test (create, resume, yield, status)
#
"""

box_fiber_lua = os.path.abspath("box/box_fiber.lua")
# don't log the path name
sys.stdout.push_filter("lua dofile(.*)", "lua dofile(...)")
admin("lua dofile('{0}')".format(box_fiber_lua))
sys.stdout.pop_filter()

print """
# test box.fiber.status functions: invalid arguments
"""
admin("lua box.fiber.status(1)")
admin("lua box.fiber.status('fafa-gaga')")
admin("lua box.fiber.status(nil)")

print """
# run fiber's test
"""
admin("lua box_fiber_run_test()")
# Testing 64bit
admin("lua tonumber64(123)")
admin("lua tonumber64('123')")
admin("lua type(tonumber64('123')) == 'cdata'")
admin("lua tonumber64('9223372036854775807') == tonumber64('9223372036854775807')")
admin("lua tonumber64('9223372036854775807') - tonumber64('9223372036854775800')")
admin("lua tonumber64('18446744073709551615') == tonumber64('18446744073709551615')")
admin("lua tonumber64('18446744073709551615') + 1")
admin("lua tonumber64(-1)")
admin("lua tonumber64('184467440737095516155')")
admin("lua string.byte(box.pack('p', tonumber64(123)))")
# test delete field
admin("lua box.space[0]:truncate()")
sql("call box.insert('0', 'tes1', 'tes2', 'tes3', 'tes4', 'tes5')")
sql("call box.update('0', 'tes1', '#p', 0, '')")
sql("call box.update('0', 'tes2', '#p', 0, '')")
sql("call box.update('0', 'tes3', '#p', 0, '')")
sql("call box.update('0', 'tes4', '#p', 0, '')")
admin("lua box.update(0, 'tes5', '#p', 0, '')")
admin("lua box.space[0]:truncate()")

print """
# test box.update: INSERT field
"""
admin("lua box.insert(0, 1, 3, 6, 9)")
admin("lua box.update(0, 1, '!p', 1, 2)")
admin("lua box.update(0, 1, '!p!p!p!p', 3, 4, 3, 5, 4, 7, 4, 8)")
admin("lua box.update(0, 1, '!p!p!p', 9, 10, 9, 11, 9, 12)")
admin("lua box.space[0]:truncate()")
admin("lua box.insert(0, 1, 'tuple')")
admin("lua box.update(0, 1, '#p!p=p', 1, '', 1, 'inserted tuple', 2, 'set tuple')")
admin("lua box.space[0]:truncate()")
admin("lua box.insert(0, 1, 'tuple')")
admin("lua box.update(0, 1, '=p!p#p', 1, 'set tuple', 1, 'inerted tuple', 2, '')")
admin("lua box.update(0, 1, '!p!p', 0, 3, 0, 2)")
admin("lua box.space[0]:truncate()")
print """
# Test for Bug #955226
# Lua Numbers are passed back wrongly as strings
#
"""
admin("lua function foo() return 1, 2, '1', '2' end")
sql("call foo()")


print """
# test update's assign opearations
"""
admin("lua box.replace(0, 1, 'field string value')")
admin("lua box.update(0, 1, '=p=p=p', 1, 'new field string value', 2, 42, 3, 0xdeadbeef)")

print """
# test update's arith opearations
"""
admin("lua box.update(0, 1, '+p&p|p^p', 2, 16, 3, 0xffff0000, 3, 0x0000a0a0, 3, 0xffff00aa)")

print """
# test update splice operation
"""
admin("lua ops_list = {}")
admin("lua table.insert(ops_list, box.upd.splice(1, 0, 3, 'the newest'))")
admin("lua box.update(0, 1, ':p', 1, box.pack('ppp', 0, 3, 'the newest'))")

print """
# test update delete operations
"""
admin("lua box.update(0, 1, '#p#p', 3, '', 2, '')")

print """
# test update insert operations
"""
admin("lua box.update(0, 1, '!p!p!p!p', 1, 1, 1, 2, 1, 3, 1, 4)")

admin("lua box.space[0]:truncate()")


print """
#
# test that ffi extension is inaccessible
#
"""

admin("lua ffi")


print """
#
# Lua init lua script test
#
"""

print """
# Load testing init lua script
"""
server.stop()
server.deploy(init_lua="box/test_init.lua")

print """
# Test asscess to box configuration
"""
admin("lua print_config()")

print """
# Test bug #977898
"""
# Run a dummy insert to avoid race conditions under valgrind
admin("lua box.insert(0, 4, 8, 16)")

print """
# Test insert from init.lua
"""
admin("lua box.select(0, 0, 1)")
admin("lua box.select(0, 0, 2)")
admin("lua box.select(0, 0, 4)")

print """
# Test bug #1002272
"""
admin("lua floor(0.5)")
admin("lua floor(0.9)")
admin("lua floor(1.1)")

print """
# clean-up after tests
"""
server.stop()
server.deploy(init_lua=None)
print """
# Test box.tuple:slice()
"""
admin("lua t=box.tuple.new({'0', '1', '2', '3', '4', '5', '6', '7'})")
admin("lua t:slice(0)")
admin("lua t:slice(-1)")
admin("lua t:slice(1)")
admin("lua t:slice(-1, -1)")
admin("lua t:slice(-1, 1)")
admin("lua t:slice(1, -1)")
admin("lua t:slice(1, 3)")
admin("lua t:slice(7)")
admin("lua t:slice(8)")
admin("lua t:slice(9)")
admin("lua t:slice(100500)")
admin("lua t:slice(9, -1)")
admin("lua t:slice(6, -1)")
admin("lua t:slice(4, 4)")
admin("lua t:slice(6, 4)")
admin("lua t:slice(0, 0)")
admin("lua t:slice(9, 10)")
admin("lua t:slice(-7)")
admin("lua t:slice(-8)")
admin("lua t:slice(-9)")
admin("lua t:slice(-100500)")
admin("lua t:slice(500, 700)")
admin("lua box.space[0]:truncate()")

print """
# A test case for Bug#911641 box.fiber.sleep() works incorrectly if
# a fiber is attached.
"""
admin("lua function r() return box.fiber.sleep(0.01) end")
admin("lua f = box.fiber.create(r)")
admin("lua box.fiber.resume(f)")
admin("lua box.fiber.resume(f)")
admin("lua function r() box.fiber.yield(box.space[0]:insert(0, 0, 1)) box.fiber.yield(box.space[0]:select(0, 0)) box.fiber.yield(box.space[0]:truncate()) end")
admin("lua f = box.fiber.create(r)")
admin("lua box.fiber.resume(f)")
admin("lua box.fiber.resume(f)")
admin("lua box.fiber.resume(f)")
admin("lua box.fiber.resume(f)")
admin("lua function r() return box.fiber.yield(box.fiber.create(r)) end")
admin("lua f = r()")
admin("lua f1 = box.fiber.resume(f)")
admin("lua f2 = box.fiber.resume(f1)")
admin("lua f3 = box.fiber.resume(f2)")
admin("lua f4 = box.fiber.resume(f3)")
admin("lua f5 = box.fiber.resume(f4)")
admin("lua f6 = box.fiber.resume(f5)")
admin("lua f7 = box.fiber.resume(f6)")
admin("lua f8 = box.fiber.resume(f7)")
admin("lua f9 = box.fiber.resume(f8)")
admin("lua f10 = box.fiber.resume(f9)")
admin("lua f11 = box.fiber.resume(f10)")
admin("lua f12 = box.fiber.resume(f11)")
admin("lua f13 = box.fiber.resume(f12)")
admin("lua f14 = box.fiber.resume(f13)")
admin("lua f15 = box.fiber.resume(f14)")
admin("lua f16 = box.fiber.resume(f15)")
admin("lua f17 = box.fiber.resume(f16)")
admin("lua box.fiber.resume(f)")
admin("lua box.fiber.resume(f1)")
admin("lua box.fiber.resume(f2)")
admin("lua box.fiber.resume(f3)")
admin("lua box.fiber.resume(f4)")
admin("lua box.fiber.resume(f5)")
admin("lua box.fiber.resume(f6)")
admin("lua box.fiber.resume(f7)")
admin("lua box.fiber.resume(f8)")
admin("lua box.fiber.resume(f9)")
admin("lua box.fiber.resume(f10)")
admin("lua box.fiber.resume(f11)")
admin("lua box.fiber.resume(f12)")
admin("lua box.fiber.resume(f13)")
admin("lua box.fiber.resume(f14)")
admin("lua box.fiber.resume(f15)")
admin("lua box.fiber.resume(f16)")
admin("lua f17 = nil")
admin("lua function r() box.fiber.detach() box.fiber.sleep(1000) end")
admin("lua f = box.fiber.create(r)")
admin("lua box.fiber.resume(f)")
admin("lua box.fiber.resume(f)")
admin("lua box.fiber.cancel(f)")
admin("lua box.fiber.resume(f)")

print """
# A test case for Bug#103491
# server CALL processing bug with name path longer than two
# https://bugs.launchpad.net/tarantool/+bug/1034912
"""
admin("lua f = function() return 'OK' end")
admin("lua test = {}")
admin("lua test.f = f")
admin("lua test.test = {}")
admin("lua test.test.f = f")
sql("call f()")
sql("call test.f()")
sql("call test.test.f()")
print """
# A test case for box.counter
"""
admin("lua box.counter.inc(0, 1)")
admin("lua box.select(0, 0, 1)")
admin("lua box.counter.inc(0, 1)")
admin("lua box.counter.inc(0, 1)")
admin("lua box.select(0, 0, 1)")
admin("lua box.counter.dec(0, 1)")
admin("lua box.counter.dec(0, 1)")
admin("lua box.select(0, 0, 1)")
admin("lua box.counter.dec(0, 1)")
admin("lua box.select(0, 0, 1)")


print """# box.dostring()"""
admin("lua box.dostring('abc')")
admin("lua box.dostring('abc=2')")
admin("lua box.dostring('return abc')")
admin("lua box.dostring('return ...', 1, 2, 3)")

print """# box.update: push/pop fields"""
admin("lua box.insert(0, 'abcd')")
admin("lua box.update(0, 'abcd', '#p', 1, '')")
admin("lua box.update(0, 'abcd', '=p', -1, 'push1')")
admin("lua box.update(0, 'abcd', '=p', -1, 'push2')")
admin("lua box.update(0, 'abcd', '=p', -1, 'push3')")
admin("lua box.update(0, 'abcd', '#p=p', 1, '', -1, 'swap1')")
admin("lua box.update(0, 'abcd', '#p=p', 1, '', -1, 'swap2')")
admin("lua box.update(0, 'abcd', '#p=p', 1, '', -1, 'swap3')")
admin("lua box.update(0, 'abcd', '#p=p', -1, '', -1, 'noop1')")
admin("lua box.update(0, 'abcd', '#p=p', -1, '', -1, 'noop2')")
admin("lua box.update(0, 'abcd', '#p=p', -1, '', -1, 'noop3')")
admin("lua box.space[0]:truncate()")

print """# A test case for Bug#1043804 lua error() -> server crash"""
admin("lua error()")
print """# Test box.fiber.name()"""
admin("lua old_name = box.fiber.name()")
admin("lua box.fiber.name() == old_name")
admin("lua box.fiber.self():name() == old_name")
admin("lua box.fiber.name('hello fiber')")
admin("lua box.fiber.name()")
admin("lua box.fiber.self():name('bye fiber')")
admin("lua box.fiber.self():name()")
admin("lua box.fiber.self():name(old_name)")

print """# A test case for bitwise operations """
admin("lua bit.lshift(1, 32)")
admin("lua bit.band(1, 3)")
admin("lua bit.bor(1, 2)")

print """# A test case for Bug#1061747 'tonumber64 is not transitive'"""
admin("lua tonumber64(tonumber64(2))")
admin("lua tostring(tonumber64(tonumber64(3)))")

print """# box.tuple.new test"""
admin("lua box.tuple.new()")
admin("lua box.tuple.new(1)")
admin("lua box.tuple.new('string')")
admin("lua box.tuple.new(tonumber64('18446744073709551615'))")
admin("lua box.tuple.new({tonumber64('18446744073709551615'), 'string', 1})")
print """# A test case for the key as an tuple"""
admin("lua t=box.insert(0, 777, '0', '1', '2', '3')")
admin("lua t")
admin("lua box.replace(0, t)")
admin("lua box.replace(0, 777, { 'a', 'b', 'c', {'d', 'e', t}})")
print """# A test case for tuple:totable() method"""
admin("lua t=box.select(0, 0, 777):totable()")
admin("lua t[2], t[3], t[4], t[5]")
admin("lua box.space[0]:truncate()")
print """# A test case for Bug#1119389 '(lbox_tuple_index) crashes on 'nil' argument'"""
admin("lua t=box.insert(0, 8989)")
admin("lua t[nil]")
print """# A test case for Bug#1131108 'tonumber64 from negative int inconsistency'"""
admin("lua tonumber64(-1)")
admin("lua tonumber64(-1LL)")
admin("lua tonumber64(-1ULL)")
admin("lua -1")
admin("lua -1LL")
admin("lua -1ULL")
admin("lua tonumber64(-1.0)")
admin("lua 6LL - 7LL")
print """# A test case for Bug#1131108 'incorrect conversion from boolean lua value to tarantool tuple'
"""
admin("lua function bug1075677() local range = {} table.insert(range, 1>0) return range end")
sql("call bug1075677()")
admin("lua bug1075677=nil")
admin("lua box.tuple.new(false)")
admin("lua box.tuple.new({false})")


admin("lua t = box.tuple.new('abc')")
admin("lua t")
admin("lua t:bsize()")
admin("lua box.delete(0, 8989)", silent=True)
