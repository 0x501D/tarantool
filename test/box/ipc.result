lua ch = box.ipc.channel()
---
...
lua ch:is_full()
---
 - false
...
lua ch:is_empty()
---
 - true
...
lua ch:get(.1)
---
 - nil
...
lua ch:put()
---
error: 'usage: channel:put(var [, timeout])'
...
lua ch:put('test')
---
 - true
...
lua ch:get()
---
 - test
...
lua ch:get('wrong timeout')
---
error: 'timeout must be a number'
...
lua ch:get(-10)
---
error: 'wrong timeout'
...
lua ch:put(234)
---
 - true
...
lua ch:put(345, .5)
---
 - false
...
lua ch:is_full()
---
 - true
...
lua ch:is_empty()
---
 - false
...
lua buffer = {}
---
...
lua tfbr = box.fiber.create(function() box.fiber.detach() while true do table.insert(buffer, ch:get()) end end)
---
...
lua box.fiber.resume(tfbr)
---
...
lua for i = 1, 10 do print(i, ' ', ch:put(i, 0.1)) end
---
1 true
2 true
3 true
4 true
5 true
6 true
7 true
8 true
9 true
10 true
...
lua ch:has_readers()
---
 - true
...
lua ch:has_writers()
---
 - false
...
lua box.fiber.cancel(tfbr)
---
...
lua ch:has_readers()
---
 - false
...
lua ch:has_writers()
---
 - false
...
lua ch:put(box.info.pid)
---
 - true
...
lua ch:is_full()
---
 - true
...
lua ch:is_empty()
---
 - false
...
lua ch:get(box.info.pid) == box.info.pid
---
 - true
...
lua for i, v in pairs(buffer) do print(v) end
---
234
1
2
3
4
5
6
7
8
9
10
...
lua ch:is_empty()
---
 - true
...
lua ch:broadcast()
---
error: 'usage: channel:broadcast(variable)'
...
lua ch:broadcast(123)
---
 - true
...
lua ch:get()
---
 - 123
...
lua ch:is_full()
---
 - false
...
lua ch:is_empty()
---
 - true
...
lua tfbr = box.fiber.create(function() box.fiber.detach() while true do local v = ch:get() table.insert(buffer, 'tfbr  - ' .. tostring(v)) end end)
---
...
lua box.fiber.resume(tfbr)
---
...
lua tfbr2 = box.fiber.create(function() box.fiber.detach() while true do local v = ch:get() table.insert(buffer, 'tfbr2 - ' .. tostring(v)) end end)
---
...
lua box.fiber.resume(tfbr2)
---
...
lua buffer = {}
---
...
lua for i, v in pairs(buffer) do print(v) end
---
...
lua ch:is_full()
---
 - false
...
lua ch:is_empty()
---
 - true
...
lua ch:put(1)
---
 - true
...
lua ch:put(2)
---
 - true
...
lua ch:put(3)
---
 - true
...
lua ch:put(4)
---
 - true
...
lua ch:put(5)
---
 - true
...
lua ch:broadcast('broadcast message!')
---
 - 2
...
lua for i = 35, 45 do print(ch:put(i)) end
---
true
true
true
true
true
true
true
true
true
true
true
...
lua for i, v in pairs(buffer) do print(v) end
---
tfbr  - 1
tfbr2 - 2
tfbr  - 3
tfbr2 - 4
tfbr  - 5
tfbr2 - broadcast message!
tfbr  - broadcast message!
tfbr2 - 35
tfbr  - 36
tfbr2 - 37
tfbr  - 38
tfbr2 - 39
tfbr  - 40
tfbr2 - 41
tfbr  - 42
tfbr2 - 43
tfbr  - 44
tfbr2 - 45
...
lua ch = box.ipc.channel(1)
---
...
lua ch:is_closed()
---
 - false
...
lua passed = false
---
...
lua type(box.fiber.wrap(function() if ch:get() == nil then passed = true end end))
---
 - userdata
...
lua ch:close()
---
...
lua passed
---
 - true
...
lua ch:get()
---
 - nil
...
lua ch:get()
---
 - nil
...
lua ch:put(10)
---
 - false
...
lua ch:is_closed()
---
 - true
...
lua ch = box.ipc.channel(1)
---
...
lua ch:put(true)
---
 - true
...
lua ch:is_closed()
---
 - false
...
lua passed = false
---
...
lua type(box.fiber.wrap(function() if ch:put(true) == false then passed = true end end))
---
 - userdata
...
lua ch:close()
---
...
lua passed
---
 - true
...
lua ch:get()
---
 - nil
...
lua ch:get()
---
 - nil
...
lua ch:put(10)
---
 - false
...
lua ch:is_closed()
---
 - true
...
lua chs = {}
---
...
lua count = 0
---
...
lua res = { }
---
...
lua for i = 1, 10 do table.insert(chs, box.ipc.channel()) end
---
...
lua for i = 1, 10 do local no = i box.fiber.wrap(function() box.fiber.self():name('pusher') while true do  chs[no]:put({no}) box.fiber.sleep(0.001 * math.random()) end end) end
---
...
lua for i = 1, 10 do local no = i box.fiber.wrap(function() box.fiber.self():name('receiver') while true do local r = chs[no]:get(math.random() * .001) if r ~= nil and r[1] == no then res[no] = true elseif r ~= nil then break end box.fiber.sleep(0.001 * math.random()) count = count + 1 end res[no] = false end) end
---
...
lua for i = 1, 100 do box.fiber.sleep(0.01) if count > 2000 then break end end
---
...
lua #res, unpack(res)
---
 - 10
 - true
 - true
 - true
 - true
 - true
 - true
 - true
 - true
 - true
 - true
...
