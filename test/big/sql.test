# encoding: utf-8
#
sql.sort = True

print """#
# A test case for Bug#729758
# "SELECT fails with a disjunct and small LIMIT"
# https://bugs.launchpad.net/tarantool/+bug/729758
#"""

sql("insert into t0 values ('Doe', 'Richard')", silent=False)
sql("insert into t0 values ('Roe', 'Richard')", silent=False)
sql("insert into t0 values ('Woe', 'Richard')", silent=False)
sql("insert into t0 values ('Major', 'Tomas')", silent=False)
sql("insert into t0 values ('Kytes', 'Tomas')", silent=False)
sql("select * from t0 where k1='Richard' or k1='Tomas' or k1='Tomas' limit 5", silent=False)

print """#
# A test case for Bug#729879
# "Zero limit is treated the same as no limit"
# https://bugs.launchpad.net/tarantool/+bug/729879
#"""
sql("select * from t0 where k1='Richard' or k1='Tomas' limit 0", silent=False)

# Cleanup
sql("delete from t0 where k0='Doe'", silent=False)
sql("delete from t0 where k0='Roe'", silent=False)
sql("delete from t0 where k0='Woe'", silent=False)
sql("delete from t0 where k0='Major'", silent=False)
sql("delete from t0 where k0='Kytes'", silent=False)

print """#
# A test case for Bug#730593
# "Bad data if incomplete tuple"
# https://bugs.launchpad.net/tarantool/+bug/730593
# Verify that if there is an index on, say, field 2,
# we can't insert tuples with cardinality 1 and
# get away with it.
#"""
sql("insert into t0 values ('Britney')", silent=False)
sql("select * from t0 where k1='Anything'", silent=False)
sql("insert into t0 values ('Stephanie')", silent=False)
sql("select * from t0 where k1='Anything'", silent=False)
sql("insert into t0 values ('Spears', 'Britney')", silent=False)
sql("select * from t0 where k0='Spears'", silent=False)
sql("select * from t0 where k1='Anything'", silent=False)
sql("select * from t0 where k1='Britney'", silent=False)
sql("call box.select_range('0', '0', '100', 'Spears')", silent=False)
sql("call box.select_range('0', '1', '100', 'Britney')", silent=False)
sql("delete from t0 where k0='Spears'", silent=False)
print """#
# Test composite keys with trees
#"""
sql("insert into t1 values ('key1', 'part1', 'part2')", silent=False)
# Test a duplicate insert on unique index that once resulted in a crash (bug #926080)
sql("replace into t1 values ('key1', 'part1', 'part2')", silent=False)
sql("insert into t1 values ('key2', 'part1', 'part2_a')", silent=False)
sql("insert into t1 values ('key3', 'part1', 'part2_b')", silent=False)
admin("lua for k, v in box.space[1]:pairs() do print(v) end", silent=False)
sql("select * from t1 where k0='key1'", silent=False)
sql("select * from t1 where k0='key2'", silent=False)
sql("select * from t1 where k0='key3'", silent=False)
sql("select * from t1 where k1='part1'", silent=False)
sql("call box.select_range('1', '1', '100', 'part1')", silent=False)
sql("call box.select_range('1', '0', '100', 'key2')", silent=False)
sql("call box.select_range('1', '1', '100', 'part1', 'part2_a')", silent=False)
# check non-unique multipart keys
sql("insert into t5 values ('01234567', 'part1', 'part2')", silent=False)
sql("insert into t5 values ('11234567', 'part1', 'part2')", silent=False)
sql("insert into t5 values ('21234567', 'part1', 'part2_a')", silent=False)
sql("insert into t5 values ('31234567', 'part1_a', 'part2')", silent=False)
sql("insert into t5 values ('41234567', 'part1_a', 'part2_a')", silent=False)
admin("lua for k, v in box.space[5]:pairs() do print(v) end", silent=False)
sql("select * from t5 where k0='01234567'", silent=False)
sql("select * from t5 where k0='11234567'", silent=False)
sql("select * from t5 where k0='21234567'", silent=False)
sql("select * from t5 where k1='part1'", silent=False)
sql("select * from t5 where k1='part1_a'", silent=False)
sql("select * from t5 where k1='part_none'", silent=False)
sql("call box.select('5', '1', 'part1', 'part2')", silent=False)
sql("insert into t7 values (1, 'hello')", silent=False)
sql("insert into t7 values (2, 'brave')", silent=False)
sql("insert into t7 values (3, 'new')", silent=False)
sql("insert into t7 values (4, 'world')", silent=False)
# Check how build_idnexes() works
server.stop()
server.start()
print """#
# Bug#929654 - secondary hash index is not built with build_indexes()
#"""
sql("select * from t7 where k1='hello'", silent=False)
sql("select * from t7 where k1='brave'", silent=False)
sql("select * from t7 where k1='new'", silent=False)
sql("select * from t7 where k1='world'", silent=False)
admin("lua box.space[7]:truncate()", silent=False)
sql("select * from t1 where k0='key1'", silent=False)
sql("select * from t1 where k0='key2'", silent=False)
sql("select * from t1 where k0='key3'", silent=False)
sql("select * from t1 where k1='part1'", silent=False)
sql("delete from t1 where k0='key1'", silent=False)
sql("delete from t1 where k0='key2'", silent=False)
sql("delete from t1 where k0='key3'", silent=False)
sql("select * from t5 where k1='part1'", silent=False)
sql("select * from t5 where k1='part2'", silent=False)
# cleanup
sql("delete from t5 where k0='01234567'", silent=False)
sql("delete from t5 where k0='11234567'", silent=False)
sql("delete from t5 where k0='21234567'", silent=False)
sql("delete from t5 where k0='31234567'", silent=False)
sql("delete from t5 where k0='41234567'", silent=False)
admin("lua for k, v in box.space[5]:pairs() do print(v) end", silent=False)

print """
#
# A test case for: http://bugs.launchpad.net/bugs/735140
# Partial REPLACE corrupts index.
#
"""
# clean data and restart with appropriate config

sql("insert into t4 values ('Spears', 'Britney')", silent=False)
sql("select * from t4 where k0='Spears'", silent=False)
sql("select * from t4 where k1='Britney'", silent=False)
# try to insert the incoplete tuple
sql("replace into t4 values ('Spears')", silent=False)
# check that nothing has been updated
sql("select * from t4 where k0='Spears'", silent=False)
# cleanup
sql("delete from t4 where k0='Spears'", silent=False)

#
# Test retrieval of duplicates via a secondary key
#
sql("insert into t4 values (1, 'duplicate one')", silent=False)
sql("insert into t4 values (2, 'duplicate one')", silent=False)
sql("insert into t4 values (3, 'duplicate one')", silent=False)
sql("insert into t4 values (4, 'duplicate one')", silent=False)
sql("insert into t4 values (5, 'duplicate one')", silent=False)
sql("insert into t4 values (6, 'duplicate two')", silent=False)
sql("insert into t4 values (7, 'duplicate two')", silent=False)
sql("insert into t4 values (8, 'duplicate two')", silent=False)
sql("insert into t4 values (9, 'duplicate two')", silent=False)
sql("insert into t4 values (10, 'duplicate two')", silent=False)
sql("insert into t4 values (11, 'duplicate three')", silent=False)
sql("insert into t4 values (12, 'duplicate three')", silent=False)
sql("insert into t4 values (13, 'duplicate three')", silent=False)
sql("insert into t4 values (14, 'duplicate three')", silent=False)
sql("insert into t4 values (15, 'duplicate three')", silent=False)
sql("select * from t4 where k1='duplicate one'", silent=False)
sql("select * from t4 where k1='duplicate two'", silent=False)
sql("select * from t4 where k1='duplicate three'", silent=False)
sql("delete from t4 where k0=1", silent=False)
sql("delete from t4 where k0=2", silent=False)
sql("delete from t4 where k0=3", silent=False)
sql("delete from t4 where k0=4", silent=False)
sql("delete from t4 where k0=5", silent=False)
sql("delete from t4 where k0=6", silent=False)
sql("delete from t4 where k0=7", silent=False)
sql("delete from t4 where k0=8", silent=False)
sql("delete from t4 where k0=9", silent=False)
sql("delete from t4 where k0=10", silent=False)
sql("delete from t4 where k0=11", silent=False)
sql("delete from t4 where k0=12", silent=False)
sql("delete from t4 where k0=13", silent=False)
sql("delete from t4 where k0=14", silent=False)
sql("delete from t4 where k0=15", silent=False)
#
# Check min() and max() functions
#
sql("insert into t4 values(1, 'Aardvark ')", silent=False)
sql("insert into t4 values(2, 'Bilimbi')", silent=False)
sql("insert into t4 values(3, 'Creature ')", silent=False)
admin("lua for k, v in box.space[4]:pairs() do print(v) end", silent=False)
admin("lua box.space[4].index[0].idx:min()", silent=False)
admin("lua box.space[4].index[0].idx:max()", silent=False)
admin("lua box.space[4].index[1].idx:min()", silent=False)
admin("lua box.space[4].index[1].idx:max()", silent=False)
sql("delete from t4 where k0=1", silent=False)
sql("delete from t4 where k0=2", silent=False)
sql("delete from t4 where k0=3", silent=False)

sql.sort = False
# vim: syntax=python
