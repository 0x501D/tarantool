Tarantool supports CSV file input/output.
CSV is comma separated values, like this:
example.txt:
package,method,return value
fio,pathjoin,string
csv,load,table
none,",comma in field", and ""quote""

Commas an linebreaks in fields must be in quotes
Quotes in fields is repeated two times quote character.
You can set delimiter and quote character:
    csv.delimiter = ','
    csv.quote = '"'
Input/output works through readable/writable objects, for example files or sockets.
Readable object has method read(N), which returns N or less bytes as string.
Writable object has method write(string), which sends string to output.

csv.iterate = function(readable[, csv_chunk_size])
--@brief parse csv string by string
--@param readable must be string or object with method read(num) returns string
--@param csv_chunk_size (default 4096). Parser will read by csv_chunk_size symbols
--@return iter function, iterator state

Example:
    f = require("fio").open("example.txt", { "O_RDONLY"})
    for tup in csv.iterate(f) do
        print(tup[1], tup[2], tup[3])
    end
Output:
    package method  return value
    fio     pathjoin        string
    csv     load    table
    none    ,comma in field and "quote"

csv.load = function(readable[, skip_lines, csv_chunk_size])
--@brief parse csv and make table
--@param skip_lines is number of lines to skip.
--@return table
If csv file has a header, it may be skipped.

csv.dump = function(t[, writable])
--@brief dumps tuple or table as csv
--@param t is table or tuple. Fields may be of any type, but it will be converted to string by method tostring(field).
--@param writable must be object with method write(string) like file or socket
--@return there is no writable it returns csv as string

Example:
    f = require("fio").open("dump.csv", { "O_WRONLY", "O_TRUNC" , "O_CREAT"}, 0x1FF)
    multiline_header = {{'csv example'}, {'3 numbers per string:'}}
    csv.dump(multiline_header, f)
    for i=0,14,3 do 
    t = {i, i + 1, i + 2} 
    s = csv.dump(t, f) 
    end
dump.csv:
    csv example
    3 numbers per string:
    0,1,2
    3,4,5
    6,7,8
    9,10,11
    12,13,14

