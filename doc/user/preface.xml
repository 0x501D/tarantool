<!DOCTYPE book [
<!ENTITY % tnt SYSTEM "../tnt.ent">
%tnt;
]>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0"
         xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="preface">
<title>Preface</title>
<section xml:id="tarantool-overview">
  <title>Tarantool: an overview</title>
  <para>   
    <productname>Tarantool</productname> is a Lua application server integrated with a database management system.
    It has a "fiber" model which means that many applications can run simultaneously on a single
    thread, while the Tarantool server can run multiple threads for input-output and background maintenance.
    It integrates the LuaJIT -- "Just In Time" -- Lua compiler, Lua libraries for most common
    applications, and the Tarantool Database Server which is an established
    NoSQL DBMS. Thus it serves all the purposes that have made node.js and Twisted popular in
    other environments, with the additional twist that it has a data persistence level.
  </para>

  <para> 
    The code is free. The open-source license is  <citetitle
    xlink:href="http://www.gnu.org/licenses/license-list.html#ModifiedBSD">BSD
    license</citetitle>. The supported platforms are GNU/Linux, Mac OS
    and FreeBSD.
  </para>
  
  <para>
    Tarantool's creator and biggest user is <citetitle xlink:href="https://en.wikipedia.org/wiki/Mail.ru">Mail.Ru</citetitle>,
    the largest internet company in Russia, with 30 million users, 25 million emails per day,
    and a web site whose Alexa global rank is in the <link xlink:href="http://www.alexa.com/siteinfo/mail.ru">top 40</link> worldwide.
    Tarantool services Mail.Ru's hottest data, such as the session data of online users,
    the properties of online applications, the caches of the underlying data,
    the distribution and sharding algorithms, and much more.
    Outside Mail.Ru the software is used by a growing
    number of projects in online gaming, digital marketing, and social
    media industries. While product development is sponsored by Mail.Ru, the
    roadmap, the bugs database and the development process are fully
    open. The software incorporates patches from dozens of
    community contributors. The Tarantool community writes and maintains
    most of the drivers for programming languages.
    The greater Lua community has hundreds of useful packages
    which can become Tarantool extensions.
  </para>

  <para>
    Users can create, modify and drop <emphasis
    role="strong">Lua functions</emphasis> at runtime.
     Or they can define <emphasis role="strong">Lua programs</emphasis>
    that are loaded during startup for triggers, background tasks,
    and interacting with networked peers.
    Unlike popular application development frameworks based on
    a "reactor" pattern, networking in server-side Lua is
    sequential, yet very efficient, as it is built on top of the
    <emphasis role="strong">cooperative multitasking</emphasis>
    environment that Tarantool itself uses.
    A key feature is that the functions
    can access and modify databases atomically.
    Thus some developers look at it as a DBMS with a popular stored procedure language,
    while others look at it as a replacement for multiple components
    of multi-tier Web application architectures.
    Performance is a few thousand transactions per second
    on a laptop, scalable upwards or outwards to server farms.
  </para>
  
  <para>
    <emphasis role="strong">Tarantool is lock-free</emphasis>.
    Instead of the operating system's concurrency primitives, such
    as mutexes, Tarantool uses cooperative
    multitasking to handle thousands of connections simultaneously.
    There is a fixed number of independent execution threads.
    The threads do not share state. Instead they
    exchange data using low-overhead message queues. While this
    approach limits the number of cores that the server will use,
    it removes competition for the memory bus and ensures peak
    scalability of memory access and network throughput.
    CPU utilization of a typical highly-loaded
    Tarantool server is under 10%.
  </para>

  <para>
    Although Tarantool can run without it, the database management component is a
    strong distinguishing feature. So here is a closer look at "The Box",
    or DBMS server.
  </para>

  <para>
    Ordinarily the server <emphasis role="strong">keeps all the data in
    random-access memory</emphasis>, and therefore has very low read
    latency.
    The server <emphasis role="strong">keeps persistent copies of
    the data in non-volatile storage</emphasis>, such as disk,
    when users request "snapshots". The server <emphasis role="strong">
    maintains a write-ahead log (WAL)</emphasis> to ensure
    consistency and crash safety of the persistent copies.
    The server <emphasis role="strong">performs inserts and updates atomically</emphasis> --
    changes are not considered complete until the WAL is written.
    The logging subsystem supports group commit.
  </para>

  <para>
    When the rate of data changes is high, the write-ahead log file
    (or files) can grow quickly. This uses up disk space, and
    increases the time necessary to restart the server (because
    the server must start with the last snapshot, and then replay
    the transactions that are in the log). The solution is to
    make snapshots frequently. Therefore the server ensures that
    <emphasis role="strong">snapshots are quick, resource-savvy, and non-blocking
    </emphasis>. To accomplish this, the server uses delayed garbage
    collection for data pages and uses a copy-on-write technique for
    index pages. This ensures that the snapshot process has a
    consistent read view.
  </para>

  <para>
    Unlike most NoSQL DBMSs, Tarantool supports <emphasis role="strong">
    secondary index keys and multi-part index keys</emphasis>
    as well as primary keys. The possible index types are
    HASH, TREE, and BITSET.
  </para>

  <para>
    Tarantool supports
    <emphasis role="strong">asynchronous replication</emphasis>,
    locally or to remote hosts. 
    In this latest version the replication architecture can be
    <emphasis role="strong">master-master</emphasis>, that is,
    many nodes may both handle the loads and receive what others
    have handled, for the same data sets. 
  </para>


</section>
<section xml:id="manual-conventions">
  <title>Conventions</title>
  <para>
    This manual is written in <citetitle
    xlink:href="http://www.docbook.org/tdg5/en/html/docbook.html">DocBook
    5</citetitle> XML markup language and is using the standard <citetitle
    xlink:href="http://docbook.sourceforge.net/release/xsl/current/doc/">DocBook
    XSL</citetitle> formatting conventions:</para>
  <para>
    UNIX shell command input is prefixed with '$ ' and is in
    a fixed-width font:
    <programlisting><prompt>$ </prompt>tarantool <option>--help</option></programlisting>
  </para>
  <para>
    File names are also in a fixed-width font:
    <programlisting><filename>/path/to/var/dir</filename></programlisting>
  </para>
  <para>
    Text that represents user input is in boldface:
    <programlisting><prompt>$ </prompt><userinput>your input here</userinput></programlisting>
  </para>
  <para>
    Within user input, replaceable items are in italics:
    <programlisting><prompt>$ </prompt><userinput>tarantool <replaceable>--option</replaceable></userinput></programlisting>
  </para>
</section>

<section xml:id="how-to-read">
 <title>How to read the documentation</title>
 <para>
   To get started, one can either download the whole package as described in
   the first part of Chapter 2 "Getting started", or one can initially skip
   the download and connect to the online Tarantool server running on the web at
   <link xlink:href="http://try.tarantool.org">http://try.tarantool.org</link>.
   Either way, the first tryout can be a matter of following the example
   in the second part of chapter 2: <link linkend="getting-started-start-stop">"Starting Tarantool and making your first
   database"</link>.
 </para>
 <para>
   Chapter 3 <link linkend="lua-and-packages">"Lua and the Tarantool Lua packages"</link> begins with explanations
   about Lua and Tarantool's connection with Lua. Those explanations are
   necessary; however, the detailed instructions about each package can be
   regarded as reference material, skip over them lightly until their
   functionality is needed.
 </para>
 <para>
    Chapter 4 <link linkend="databases">"Databases"</link> is about the Tarantool NoSQL DBMS.
    If the only intent is to use Tarantool as a Lua application server,
    most of the material in this chapter and in the following chapter
    (Chapter 5 <link linkend="replication">"Replication"</link>) will not be necessary. Once again, the
    detailed instructions about each package can be regarded as reference
    material.
 </para>
 <para>
    Chapter 6 <link linkend="server-administration">"Server administration"</link> and Chapter 7 <link linkend="configuration-reference">"Configuration reference"</link>
    are primarily for administrators; however, every user should know
    something about how the server is configured so the section about
    <code>box.cfg</code> is not skippable. Chapter 8 <link linkend="connectors">"Connectors"</link> is strictly for
    users who are connecting from a different language such as C or Perl or
    Python -- other users will find no immediate need for this chapter.
 </para>
 <para>
    The two long tutorials in Appendix C -- <link linkend="lua-tutorial-insert">"Insert one million tuples with a Lua
    stored procedure"</link> and <link linkend="lua-tutorial-sum">"Sum a JSON field for all tuples"</link> -- start
    slowly and contain commentary that is especially aimed at users
    who may not consider themselves experts at either Lua or NoSQL
    database management.
 </para>
 <para>
    Finally, Appendix D <link linkend="plugins">"Plugins"</link> has examples that will be essential
    for those users who want to connect the Tarantool server to another
    DBMS: MySQL or PostgreSQL.
 </para>
 <para>
   For experienced users, there is also a developer's guide
   and an extensive set of comments in the source code.
 </para>
</section>

<section xml:id="reporting-bugs">
  <title>Reporting bugs</title>
  <para>
    Please report bugs in Tarantool at <link
    xlink:href="http://github.com/tarantool/tarantool/issues"/>. You can
    contact developers directly on the
    <link xlink:href="irc://irc.freenode.net#tarantool">#tarantool</link>
    IRC channel on freenode, or via a mailing list,
    <link xlink:href="https://googlegroups.com/group/tarantool">Tarantool Google group</link>.
  </para>
</section>

</chapter>
<!--
vim: tw=66 syntax=docbk
vim: spell spelllang=en
-->
