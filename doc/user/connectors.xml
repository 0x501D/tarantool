<!DOCTYPE book [
<!ENTITY % tnt SYSTEM "../tnt.ent">
%tnt;
]>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xml:id="connectors">

<title>Connectors</title>
<blockquote><para>
  This chapter documents APIs for various programming languages.
</para></blockquote>

<section xml:id="protocol">
 <title>Protocol</title>
  <para>Tarantool protocol was designed with a focus on asynchronous
    I/O and easy integration with proxies. Each client
    request starts with a variable-length binary header, containing
    request id, request type, server id, log sequence number, and
    so on.
  </para>

 <para>
    The mandatory length, present in request header simplifies
    client or proxy I/O.  A response to a request is sent to the
    client as soon as it is ready. It always carries in its header
    the same type and id as in the request. The id makes it
    possible to match a request to a response, even if the latter
    arrived out of order.
  </para>

  <para>Unless implementing a client driver, one needn't
    concern oneself with the complications of the binary
    protocol. <olink targetptr="connectors">Language-specific
    drivers</olink> provide a friendly way to store domain
    language data structures in Tarantool.
    A complete description of the binary protocol
    is maintained in annotated Backus-Naur
    form in the source tree: please see
    <link xlink:href="http://tarantool.org/doc/box-protocol.html"><filename>doc/box-protocol.html</filename></link>.
  </para>
</section>

<section xml:id="connector-packet-example">
<title>Packet example</title>
<para>
The Tarantool API exists so that a client program can send a request packet
to the server, and receive a response. Here is an example of a what the client
 would send for <command>box.space[513]:insert{'A', 'BB'}</command>. The BNF description of the components
is in file <link xlink:href="http://tarantool.org/doc/box-protocol.html" xlink:title="A complete BNF of Tarantool client/server protocol">doc/box-protocol.html</link>.

</para>
                <informaltable frame='topbot'>
                <tgroup cols='5' align='left' colsep='1' rowsep='1'>
                <colspec colname='c1'/>
                <colspec colname='c2'/>
                <colspec colname='c3'/>
                <colspec colname='c4'/>
                <colspec colname='c5'/>
                <thead>
                <row>
                <entry>Component</entry>
                <entry>Byte#0</entry>
                <entry>Byte#1</entry>
                <entry>Byte#2</entry>
                <entry>Byte#3</entry>
                </row>
                </thead>
                      <tbody>
                        <row>
                          <entry>code for insert</entry>
                          <entry>2</entry>
                        </row>
                        <row>
                          <entry>rest of header</entry>
                          <entry>...</entry>
                          <entry>...</entry>
                          <entry>...</entry>
                          <entry>...</entry>
                        </row>
                        <row>
                          <entry>2-digit number: space id</entry>
                          <entry>cd</entry>
                          <entry>02</entry>
                          <entry>01</entry>
                        </row>
                        <row>
                          <entry>code for tuple</entry>
                          <entry>21</entry>
                        </row>
                        <row>
                          <entry>1-digit number: field count = 2</entry>
                          <entry>92</entry>
                        </row>
                        <row>
                          <entry>1-character string: field[1]</entry>
                          <entry>a1</entry>
                          <entry>41</entry>
                        </row>
                        <row>
                          <entry>2-character string: field[2]</entry>
                          <entry>a2</entry>
                          <entry>42</entry>
                          <entry>42</entry>
                        </row>
                       </tbody>
                    </tgroup>
                </informaltable>
<para>
Now, one could send that packet to the tarantool server,
and interpret the response (doc/box-protocol.html has a description
of the packet format for responses as well as requests).
But it would be easier, and less error-prone, if one could
invoke a routine that formats the packet according to typed
parameters. Something like <code>response=tarantool_routine("insert",513,"A","B");</code>.
And that is why APIs exist for drivers for Perl, Python, PHP, and so on.
</para>
  </section>
  
  <section xml:id="connector-server">
   <title>Setting up the server for connector examples</title>
   <para>
   This chapter has examples that show how to connect to the Tarantool
   server via the Perl, PHP, and Python connectors.
   The examples contain hard code that will work if and only if
   the server (tarantool) is running on localhost (127.0.0.1) and is listening on port 3301
   (<code>box.cfg.listen='3301'</code>) and space 'examples' has id = 999
   (<code>box.space.tester.id = 999</code>), and
   space 'examples' has a primary-key index for a numeric field
   (<code>box.space[999].index[0].parts[1].type = "NUM"</code>)
   and user 'guest' has privileges for reading and writing.
   </para>
   <para>
   It is easy to meet all the conditions by starting the
   server and executing this script:<programlisting>
box.cfg{listen=3301}
box.schema.space.create('examples',{id=999})
box.space.examples:create_index('primary', {type = 'hash', parts = {1, 'NUM'}})
box.schema.user.grant('guest','read,write','space','examples')
box.schema.user.grant('guest','read','space','_space')
</programlisting>
   </para>
  </section>

  <section xml:id="connector-java">
    <title>Java</title>
    <para>
       Please see <link xlink:href="http://dgreenru.github.io/tarantool-java/"><filename>http://dgreenru.github.io/tarantool-java/</filename></link>.
    </para>
  </section>
  
  <section xml:id="connector-go">
    <title>Go</title>
    <para>
       Please see <link xlink:href="https://github.com/mialinx/go-tarantool-1.6"><filename>https://github.com/mialinx/go-tarantool-1.6</filename></link>.
    </para>
  </section>

  <section xml:id="connector-perl">
    <title>Perl</title>
    <para>
     The most commonly used Perl driver is <link xlink:href='http://search.cpan.org/~unera/DR-Tarantool/'>DR::Tarantool</link>.
     It is not supplied as part of the Tarantool repository; it must be installed separately.
     The most common way to install it is with <link xlink:href='https://en.wikipedia.org/wiki/Cpan'>CPAN, the Comprehensive Perl Archive Network</link>.
     DR::Tarantool requires other modules which should be installed first.
     For example, on Ubuntu, the installation could look like this:<programlisting>
sudo cpan install AnyEvent
sudo cpan install Devel::GlobalDestruction
sudo cpan install Coro
sudo cpan install Test::Pod
sudo cpan install Test::Spelling
sudo cpan install PAR::Dist
sudo cpan install List::MoreUtils
sudo cpan install DR::Tarantool</programlisting>
    </para>
    <para>
    Here is a complete Perl program that inserts [99999,'BB'] into space[999] via the Perl API.
    Before trying to run, check that the server is listening and that <code>examples</code> exists,
    as described <link linkend="connector-server">earlier</link>.
    To run, paste the code into a file named example.pl and say <code>perl example.pl</code>.
    The program will connect using an application-specific definition of the space.
    The program will open a socket connection
    with the tarantool server at localhost:3301, then send an INSERT request,
    then &mdash; if all is well &mdash; end without displaying any messages.
    If tarantool is not running on localhost with listen address = 3301, the program will print
    <quote>Connection refused</quote>.
    </para>
    <para>
     <programlisting language="perl">
#!/usr/bin/perl
use DR::Tarantool ':constant', 'tarantool';
use DR::Tarantool ':all';
use DR::Tarantool::MsgPack::SyncClient;

my $tnt = DR::Tarantool::MsgPack::SyncClient->connect(
  host    => '127.0.0.1',                      # look for tarantool on localhost
  port    => 3301,                             # assume tarantool listen address = default
  user    => 'guest',                          # username. one could also say 'password=>...'

  spaces  => {
    999 => {                                   # definition of space[999] ...
      name => 'examples',                      #   space[999] name = 'examples'
      default_type => 'STR',                   #   space[999] field type is 'STR' if undefined
      fields => [ {                            #   definition of space[512].fields ...
          name => 'field1', type => 'NUM' } ], #     space[999].field[1] name='field1',type='NUM'
      indexes => {                             #   definition of space[999] indexes ...
        0 => {
          name => 'primary', fields => [ 'field1' ] } } } } );

$tnt->insert('examples' => [ 99999, 'BB' ]);</programlisting>
    </para>
    <para>
       The example program only shows one command and does not show all that's necessary for
       good practice. For that, please see
       <link xlink:href='http://search.cpan.org/~unera/DR-Tarantool/'>DR::Tarantool CPAN repository</link>.
    </para>
  </section>

  <section xml:id="connector-php">
    <title>PHP</title>
    
    <para>
    The PHP driver is <link xlink:href='https://github.com/tarantool/tarantool-php'>tarantool-php</link>.
    It is not supplied as part of the Tarantool repository; it must be installed separately.
    It can be installed with git.
    It requires other modules which should be installed first.
    For example, on Ubuntu, the installation could look like this:
    <programlisting>
sudo apt-get install php5-cli
sudo apt-get install php5-dev
sudo apt-get install php-pear
cd ~
git clone https://github.com/tarantool/tarantool-php.git
cd tarantool-php
phpize
./configure
make
#make install is optional</programlisting>
    </para>
    <para>
    At this point there is a file named <filename>~/tarantool-php/modules/tarantool.so</filename>.
    PHP will only find it if the PHP initialization file <filename>php.ini</filename> contains a line like
    <code>extension=./tarantool.so</code>.
    So copy <filename>tarantool.so</filename> to the working directory and tell PHP where
    to find the <filename>php.ini</filename> file that contains that line ...
    <programlisting>
cd ~
cp ./tarantool-php/modules/tarantool.so .
export PHP_INI_SCAN_DIR=~/tarantool-php/test/shared</programlisting>
    </para>
    <para>
    Here is a complete PHP program that inserts [99999,'BB'] into a space named 'examples' via the PHP API.
    Before trying to run, check that the server is listening and that <code>examples</code> exists,
    as described <link linkend="connector-server">earlier</link>.
    To run, paste the code into a file named example.php and say <code>php example.php</code>.
    The program will open a socket connection
    with the tarantool server at localhost:3301, then send an INSERT request,
    then &mdash; if all is well &mdash; print "Insert succeeded".
    If the tuple already exists, the program will print <quote>Duplicate key exists in unique index 0</quote>.
    </para>
    <para>
    <programlisting>
&lt;?php
$tarantool = new Tarantool("localhost", 3301);
try {
  $tarantool-&gt;insert("examples", array(99999, "BB"));
  print "Insert succeeded\n";
  }
catch (Exception $e) {
  echo "Exception: ", $e-&gt;getMessage(), "\n";
  }
?&gt;</programlisting>
    </para>
    <para>
    After running the example, it is good practice to delete the file ./tarantool.so,
    since it is only compatible with PHP and its existence could confuse non-PHP applications.
    </para>
    <para>
    The example program only shows one command and does not show all that's necessary for
    good practice. For that, please see
    <link
    xlink:href="https://github.com/tarantool/tarantool-php/"><filename>tarantool-php</filename></link> project at GitHub.
    </para>
  </section>

  <section xml:id="connector-python">
    <title>Python</title>
    <para>
     Here is a complete Python program that inserts [99999,'Value','Value'] into space <code>examples</code> via the high-level Python API.
    </para>
<programlisting language="python">
#!/usr/bin/python
from tarantool import Connection

c = Connection("127.0.0.1", 3301)
result = c.insert("examples",(99999,'Value', 'Value'))
print result
</programlisting>
    <para>
    To prepare, paste the code into a file named example.py and install tarantool-python with either
    <userinput><code>pip install tarantool\>0.4</code></userinput> to install in <filename>/usr</filename> (requires root privilege)
    or
    <userinput><code>pip install tarantool\>0.4 --user</code></userinput> to install in <filename>~</filename> i.e. user's default directory.
    Before trying to run, check that the server is listening and that <code>examples</code> exists,
    as described <link linkend="connector-server">earlier</link>.
    To run the program, say <code>python example.py</code>.
    The program will connect to the server, will send the request, and will not throw an exception if all went well.
    If the tuple already exists, the program will throw DatabaseException(“Duplicate key exists in unique index”).
    </para>
    <para>
       The example program only shows one request and does not show all that's necessary for
       good practice. For that, see
       <link xlink:href="http://github.com/tarantool/tarantool-python"><filename>http://github.com/tarantool/tarantool-python</filename></link>.
       For an example of a Python API for <link xlink:href="https://github.com/tarantool/queue">Queue managers on Tarantool</link>, see 
       <link xlink:href="https://github.com/tarantool/tarantool-queue-python"><filename>https://github.com/tarantool/tarantool-queue-python</filename></link>.
    </para>
  </section>
  
</chapter>

<!--
vim: tw=66 syntax=docbk
vim: spell spelllang=en_us
-->
