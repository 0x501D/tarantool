<!DOCTYPE chapter [
<!ENTITY % tnt SYSTEM "../tnt.ent">
%tnt;
]>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xml:id="triggers">
<title>Triggers</title>

    <para>
    Triggers, also known as callbacks, are functions which the server executes
    when certain events happen. Currently the two types of
    triggers are <link linkend="sp-box-session-triggers">connection triggers</link>,
    which are executed when a session begins or ends,
    and <link linkend="sp-box-replace-triggers">replace</link> triggers
    which are for database events, 
    </para>

    <para>
    All triggers have the following characteristics.
    
    <itemizedlist mark='bullet'>

    <listitem>
      <para>
      They associate a <emphasis>function</emphasis> with an <emphasis>event</emphasis>.
      The request to "define a trigger" consists of passing the name of the
      trigger's function to one of the "on_<replaceable>event-name</replaceable>..." functions:
      <code>on_connect()</code>, <code>on_disconnect()</code>, or <code>on_replace()</code>.
      </para>
    </listitem>

    <listitem>
      <para>
      They are <emphasis>defined by any user</emphasis>.
      There are no privilege requirements for defining triggers.
      </para>
    </listitem>

    <listitem>
      <para>
      They are called <emphasis>after</emphasis> the event.
      They are not called if the event ends prematurely due to an error.
      </para>
    </listitem>

    <listitem>
      <para>
      They are <emphasis>in server memory</emphasis>.
      They are not stored in the database.
      Triggers disappear when the server is shut down.
      If there is a requirement to make them permanent, then
      the function definitions and trigger settings should be
      part of an initialization script.
      </para>
    </listitem>

    <listitem>
      <para>
      They have <emphasis>low overhead</emphasis>.
      If a trigger is not defined, then the overhead is
      minimal: merely a pointer dereference and check.
      If a trigger is defined, then its overhead is equivalent to the
      overhead of calling a stored procedure.
      </para>
    </listitem>

    <listitem>
      <para>
      They can be <emphasis>multiple</emphasis> for one event.
      Triggers are executed in the reverse order that they were defined in.
      </para>
    </listitem>

    <listitem>
      <para>
      They must work <emphasis>within the event context</emphasis>.
      If the function contains requests which normally could not occur
      immediately after the event but before the return from the event,
      effects are undefined. For example, defining a trigger function
      as <code>os.exit()</code> or <code>box.rollback()</code> would
      be bringing in requests outside the event context.
      </para>
    </listitem>
    
    <listitem>
      <para>
      They are <emphasis>replaceable</emphasis>.
      The request to "redefine a trigger" consists of passing the
      names of a new trigger function and an old trigger function
      to one of the "on_<replaceable>event-name</replaceable>..." functions.
      </para>
    </listitem>

    </itemizedlist>

    </para>

<section xml:id="sp-box-session-triggers" xreflabel="session triggers">
    <title>Connection triggers</title>
<variablelist>
    <varlistentry>
        <term>
         <emphasis role="lua">box.session.on_connect(<replaceable>trigger-function-name</replaceable> [, <replaceable>old-trigger-function-name</replaceable>])</emphasis>
        </term>
        <listitem><para>
        Define a trigger for execution when a new session is created due to
        an event such as <ulink url="/doc/reference/console.html#console.connect"><code>console.connect()</code></ulink>.
        The trigger function will be the first
        thing executed after a new session is created.
        If the trigger fails by raising an error, the error
        is sent to the client and the connection is closed.
        </para>
        <para>
          Parameters: trigger-function-name = name of a function which will become the trigger function;
          (optional) old-trigger-function-name = name of an existing trigger function which will be
          replaced by trigger-function-name.
          If the parameters are (nil, old-trigger-function-name), then the old trigger is deleted.
        </para>
        <para>
          Returns: nil.
        </para>
        <para>
          Example: <code>function f () x = x + 1 end; box.session.on_connect(f)</code>
        </para>
        <warning>
        <para>
        If a trigger always results in an error, it may become
        impossible to connect to the server to reset it.
        </para>
        </warning>
        </listitem>
    </varlistentry>

    <varlistentry>
        <term>
         <emphasis role="lua">box.session.on_disconnect(<replaceable>trigger-function-name</replaceable> [, <replaceable>old-trigger-function-name</replaceable>])</emphasis>
        </term>
        <listitem>
        <para>Define a trigger for execution after a client has
        disconnected. If
        the trigger function causes an error, the error is logged but otherwise
        is ignored. The trigger is invoked while the session associated
        with the client still exists and can access session properties,
        such as box.session.id.
        </para>
        <para>
          Parameters: trigger-function-name = name of a function which will become the trigger function;
          (optional) old-trigger-function-name =  name of an existing trigger function which will be
          replaced by trigger-function-name.
          If the parameters are (nil, old-trigger-function-name), then the old trigger is deleted.
        </para>
        <para>
          Returns: nil.
        </para>
        <para>
          Example: <code>function f () x = x + 1 end; box.session.on_disconnect(f)</code>
        </para>
        </listitem>
    </varlistentry>
</variablelist>

            <para>
            <bridgehead renderas="sect4">Example</bridgehead>
              After the following series of requests, the server
              will write a message using the <ulink url="/doc/reference/log.html">log package</ulink>
              whenever any user connects or disconnects.
<programlisting>
console = require('console'); console.delimiter('!') --this means ignore line feeds until next '!'
function log_connect ()
  local log
  local m
  log = require('log')
  m = 'Connection. user=' .. box.session.user() .. ' id=' .. box.session.id()
  log.info(m)
  end!
function log_disconnect ()
  local log
  local m
  log = require('log')
  m = 'Disconnection. user=' .. box.session.user() .. ' id=' .. box.session.id()
  log.info(m)
  end!
console.delimiter('')!
box.session.on_connect(log_connect)
box.session.on_disconnect(log_disconnect)
</programlisting>
Here is what might appear in the log file in a typical installation:
<programlisting>
2014-12-15 13:21:34.444 [11360] main/103/iproto I&gt;
    Connection. user=guest id=3
2014-12-15 13:22:19.289 [11360] main/103/iproto I&gt;
    Disconnection. user=guest id=3
</programlisting>
            </para>

</section>

 <section xml:id="sp-box-replace-triggers" xreflabel="replace triggers">
    <title>Replace triggers</title>
<variablelist>

    <varlistentry>
        <term xml:id="on_replace">
         <emphasis role="lua">box.space.<replaceable>space-name</replaceable>:on_replace(<replaceable>trigger-function-name</replaceable> [, <replaceable>old-trigger-function-name</replaceable>])</emphasis>
        </term>
        <listitem>
            <para>
              Create a "replace trigger". The <code>function-name</code> will be executed whenever a replace() or insert()
              or update() or delete() happens to a tuple in <code>space-name</code>.
            </para>
        <para>
          Parameters: trigger-function-name = name of a function which will become the trigger function;
          (optional) old-trigger-function-name = name of an existing trigger function which will be
          replaced by trigger-function-name.
          If the parameters are (nil, old-trigger-function-name), then the old trigger is deleted.
        </para>
            <para>
              Returns: nil.
            </para>
        <para>
          Example: <code>function f () x = x + 1 end; box.space.X:on_replace(f)</code>
        </para>
        </listitem>
    </varlistentry>

    <varlistentry>
        <term xml:id="run_triggers">
         <emphasis role="lua">box.space.<replaceable>space-name</replaceable>:run_triggers(<replaceable>true|false</replaceable>)</emphasis>
        </term>
        <listitem>
            <para>
             At the time that a trigger is defined, it is automatically enabled -- that is, it will be executed.
             Replace triggers can be disabled with <code>box.space.<replaceable>space-name</replaceable>:run_triggers(false)</code>
             and re-enabled with <code>box.space.<replaceable>space-name</replaceable>:run_triggers(true)</code>.
            </para>
            <para>
              Returns: nil.
            </para>
        <para>
          Example: <code>box.space.X:run_triggers(false)</code>
        </para>
        </listitem>
    </varlistentry>

</variablelist>

            <para>
            <bridgehead renderas="sect4">Example</bridgehead>
              The following series of requests will create a space, create an index,
              create a function which increments a counter, create a trigger,
              do two inserts, drop the space, and display the counter value -- which is 2,
              because the function is executed once after each insert.
<programlisting>s = box.schema.space.create('space53')
s:create_index('primary', {parts = {1, 'NUM'}})
function replace_trigger() replace_counter = replace_counter + 1 end
s:on_replace(replace_trigger)
replace_counter = 0
t = s:insert{1, 'First replace'}
t = s:insert{2, 'Second replace'}
s:drop()
replace_counter</programlisting>
            </para>
            
            <para>
            <bridgehead renderas="sect4">Another Example</bridgehead>
              The following series of requests will associate an existing
              function named F with an existing space named T,
              associate the function a second time with the same space
              (so it will be called twice), disable all triggers of
              T, and destroy each trigger by replacing with nil.
<programlisting>box.space.T:on_replace(F)
box.space.T:on_replace(F)
box.space.T:run_triggers(false)
box.space.T:on_replace(nil, F)
box.space.T:on_replace(nil, F)</programlisting>
            </para>


</section>

</chapter>

<!--
vim: tw=66 syntax=docbk
vim: spell spelllang=en_us
-->
