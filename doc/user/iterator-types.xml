<!DOCTYPE para [
<!ENTITY % tnt SYSTEM "../tnt.ent">
%tnt;
]>
<para xmlns="http://docbook.org/ns/docbook" version="5.0"
      xmlns:xi="http://www.w3.org/2001/XInclude"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xml:id="iterator-types">


<table frame='all' pgwide='1'>
<title>TREE iterator types</title>

<tgroup cols='3' colsep='1' rowsep='1'>
<colspec colnum='3' colname="Description" colwidth="6*"/>

<thead>
    <row>
        <entry>Type</entry>
        <entry>Arguments</entry>
        <entry>Description</entry>
    </row>
</thead>

<tbody>
 
     <row>
        <entry>box.index.ALL or 'ALL'</entry>
        <entry>none</entry>
        <entry>
            Iterate over all tuples in an index.
            Tuples are returned in ascending
            order of the key.
        </entry>
    </row>

    <row>
        <entry>box.index.EQ or 'EQ'</entry>
        <entry>field values</entry>
        <entry>
            <simpara>
            Equality iterator: iterate over all tuples
            where field values = key values.
            Parts of a multi-part key need to be separated by
            commas.
            </simpara>
            <simpara>
            If the number of field values is less than the
            number of parts of a multi-part key, the
            missing field values are considered to be matching.
            </simpara>
            <simpara>
            If there are multiple matches, then tuples are
            returned in ascending order by key.
            </simpara>
        </entry>
    </row>

    <row>
        <entry>box.index.GT or 'GT'</entry>
        <entry>field values</entry>
        <entry>
            Keys match if key values are greater than field values.
            If the number of field values is less than the
            number of parts of a multi-part key, the
            missing field values are considered to be matching.
            If the field value is <code>nil</code>, iteration starts from
            the smallest key in the index. Tuples are returned
            in ascending order by key.
        </entry>
    </row>

    <row>
        <entry>box.index.REQ or 'REQ'</entry>
        <entry>field values</entry>
        <entry>
            Reverse equality iterator. Matching is determined
            in the same way as for <code>box.index.EQ</code>,
            but, if there are multiple matches, then tuples
            are returned in descending order by key,
        </entry>
    </row>

    <row>
        <entry>box.index.GE or 'GE'</entry>
        <entry>field values</entry>
        <entry>
            Keys match if key values are greater than or equal
            to field values.
            Tuples are returned in ascending order by key.
            If the field value is
            <code>nil</code>, iteration starts from the first
            key in the index.
        </entry>
    </row>

    <row>
        <entry>box.index.LT or 'LT'</entry>
        <entry>field values</entry>
        <entry>
            Keys match if key values are less than
            field values.
            Tuples are returned in descending order by key.
            If the field value is
            <code>nil</code>, iteration starts from the last
            key in the index.
        </entry>
    </row>

    <row>
        <entry>box.index.LE or 'LE'</entry>
        <entry>field values</entry>
        <entry>
            Keys match if key values are less than or equal
            to field values.
            Tuples are returned in descending order by key.
            If the field value is
            <code>nil</code>, iteration starts from the last
            key in the index.
        </entry>
    </row>
</tbody>
</tgroup>
</table>


<table frame='all' pgwide='1'>
<title>HASH iterator types</title>

<tgroup cols='3' colsep='1' rowsep='1'>
<colspec colnum='3' colname="Description" colwidth="6*"/>

<thead>
    <row>
        <entry>Type</entry>
        <entry>Arguments</entry>
        <entry>Description</entry>
    </row>
</thead>

<tbody>

     <row>
        <entry>box.index.ALL or 'ALL'</entry>
        <entry>none</entry>
        <entry>
            Iterate over all tuples in an index.
            Tuples are returned in ascending
            order of the key's hash, and so
            will appear to be unordered.
        </entry>
    </row>
    
    <row>
        <entry>box.index.EQ or 'EQ'</entry>
        <entry>field values</entry>
        <entry>
            <simpara>
            Equality iterator: iterate over all tuples matching
            the key.
            Parts of a multi-part key need to be separated by
            commas.
            </simpara>
            <simpara>
            A HASH index only supports exact match: all parts
            of a key participating in the index must be provided.
            </simpara>
            <simpara>
            HASH indexes are always unique.
            </simpara>
        </entry>
    </row>

    <row>
        <entry>box.index.GT or 'GT'</entry>
        <entry>field values</entry>
        <entry>
            Keys match if hashed key values are greater than hashed field values.
            If the number of field values is less than the
            number of parts of a multi-part key, the result is an error.
            Tuples are returned in ascending order by hashed key,
            so the order will appear to be random.
            Provided that the space is not being updated,
            the 'GT' iterator can be used
            to retrieve all tuples piece by piece,
            by supplying the last returned value from the previous range as the
            start field value for an iterator over the next range. 
        </entry>
    </row>

</tbody>
</tgroup>
</table>


<table frame='all' pgwide='1'>
<title>BITSET iterator types</title>

<tgroup cols='3' colsep='1' rowsep='1'>
<colspec colnum='3' colname="Description" colwidth="6*"/>

<thead>
    <row>
        <entry>Type</entry>
        <entry>Arguments</entry>
        <entry>Description</entry>
    </row>
</thead>

<tbody>

     <row>
        <entry>box.index.ALL or 'ALL'</entry>
        <entry>none</entry>
        <entry>
            Iterate over all tuples in an index.
            Tuples are returned in ascending
            order of the key's bitset, and so
            will appear to be unordered.
        </entry>
    </row>

    <row>
        <entry>box.index.EQ or 'EQ'</entry>
        <entry>field values</entry>
        <entry>
            <simpara>
            Equality iterator: iterate over all tuples matching
            the field values.
            If there are multiple field values, they need to be separated by
            commas.
            </simpara>
            <simpara>
            BITSET indexes are always unique.
            </simpara>
        </entry>
    </row>

    <row>
        <entry>box.index.BITS_ALL_SET</entry>
        <entry>bit mask</entry>
        <entry>
            Keys match if all of the bits specified in 'bit mask'
            are set.
        </entry>
    </row>

    <row>
        <entry>box.index.BITS_ANY_SET</entry>
        <entry>bit mask</entry>
        <entry>
            Keys match if any of the bits specified in 'bit mask'
            is set.
        </entry>
    </row>

    <row>
        <entry>box.index.BITS_ALL_NOT_SET</entry>
        <entry>bit mask</entry>
        <entry>
            Keys match if none of the bits specified in 'bit mask'
            is set.
        </entry>
    </row>
</tbody>
</tgroup>
</table>

<table xml:id="rtree-iterator" frame='all' pgwide='1'>
<title>RTREE iterator types</title>

<tgroup cols='3' colsep='1' rowsep='1'>
<colspec colnum='3' colname="Description" colwidth="6*"/>

<thead>
    <row>
        <entry>Type</entry>
        <entry>Arguments</entry>
        <entry>Description</entry>
    </row>
</thead>

<tbody>

     <row>
        <entry>box.index.ALL or 'ALL'</entry>
        <entry>none</entry>
        <entry>
            All keys match.
            Tuples are returned in ascending
            order of the primary key.
        </entry>
    </row>

    <row>
        <entry>box.index.EQ or 'EQ'</entry>
        <entry>field values</entry>
        <entry>
            Keys match if the rectangle defined by the field values
            is the same as the rectangle defined by the key --
            where "key" means "the key in the RTREE index" and
            "rectangle" means "rectangle as explained in section
            <link linkend="RTREE">RTREE</link>.
        </entry>
    </row>

    <row>
        <entry>box.index.GT or 'GT'</entry>
        <entry>field values</entry>
        <entry>
            Keys match if all points of the rectangle defined by the field values
            are within the rectangle defined by the key.
        </entry>
    </row>
    
    <row>
        <entry>box.index.GE or 'GE'</entry>
        <entry>field values</entry>
        <entry>
            Keys match if all points of the rectangle defined by the field values
            are within, or at the side of, the rectangle defined by the key.
        </entry>
    </row>

    <row>
        <entry>box.index.LT or 'LT'</entry>
        <entry>field values</entry>
        <entry>
            Keys match if all points of the rectangle defined by the key
            are within the rectangle defined by the field values.
        </entry>
    </row>

    <row>
        <entry>box.index.LE or 'LE'</entry>
        <entry>field values</entry>
        <entry>
            Keys match if all points of the rectangle defined by the key
            are within, or at the side of, the rectangle defined by the field values.
        </entry>
    </row>

    <row>
        <entry>box.index.OVERLAPS or 'OVERLAPS'</entry>
        <entry>field values</entry>
        <entry>
            Keys match if any point of the rectangle defined by the field values
            is within, or at the side of, the rectangle defined by the key.
        </entry>
    </row>

    <row>
        <entry>box.index.NEIGHBOR or 'NEIGHBOR'</entry>
        <entry>field values</entry>
        <entry>
            All keys match. Tuples are returned in order according to the
            distance from the top left corner of the rectangle
            defined by the field values.
        </entry>
    </row>

</tbody>
</tgroup>
</table>

</para>

<!--
vim: tw=66 syntax=docbk
vim: spell spelllang=en_us
-->
