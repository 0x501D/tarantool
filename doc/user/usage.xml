<!DOCTYPE book [
<!ENTITY % tnt SYSTEM "../tnt.ent">
%tnt;
]>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0">
<title>Dynamic data model</title>
<blockquote><para>
  This chapter describes how Tarantool stores 
  values and what operations with data it supports.
</para></blockquote>

<para>
  Tarantool data is organized in tuples. Tuple
  cardinality is varying: a tuple can contain any number
  of fields. A field can be either numeric &mdash;
  32- or 64- bit unsigned integer, or binary
  string &mdash; a sequence of 8-bit octets.  The first field of a
  tuple is always assumed to be
  the identifying (unique) key. The remaining fields make up a 
  value, associated with the key.
  Tuple sets are called <emphasis>namespaces<alt>perhaps, not the best name</alt></emphasis>, and there can be up to 255 namespaces defined per
  one Tarantool instance.

  Apart from the primary key, it is possible to define secondary
  <quote>indexes</quote> on other tuple fields. A secondary index does
  not have to be unique, and can cover several fields.
  If a namespace has a secondary index, tuple cardinality must be
  at least equal to the ordinal number of the field
  participating in the index.
</para>
<para>
  Currently, entire server <emphasis>schema</emphasis> must be
  specified in the configuration file. The schema contains all
  namespaces and indexes. A server started with a configuration
  file that doesn't match contents of its data directory will most
  likely crash, but may also behave in a non-defined way. 
  It is, however, possible to stop the server,
  add new namespaces to the schema or temporarily disable
  existing namespaces, and then restart the server.
</para>
<para>
  Schema objects, such as namespaces and indexes, are referred to
  by a numeric id. For example, to insert a tuple, is is necessary
  to proivde id of the destination namespace; to select
  a tuple, one must provide the identifying key, namespace id and
  index id of the index used for lookup.
</para>

<para>
  The configuration file shipped with the binary package defines
  only one namespace with id <literal>0</literal>. It has no keys
  other than the primary. The primary key numeric id is also 
  <literal>0</literal>. Tarantool command line client
  supports a small subset of SQL, and we'll use it to demonstrate
  supported data manipulation commands:
  <programlisting>
  </programlisting>
</para>
<para>
  Additional examples of data manipulation using SQL statements
  can be found in Tarantool regression tests.
  A complete grammar of supported SQL is provided in the Data console 
  chapter. To use all options of data manipulation statements,
  one must use a Perl, Python, Ruby or C connector. 
  The client/server protocol is open and documented: an annotated
  BNF can be found in the source tree, doc/protocol.txt.

  , supported by of the range of supported data
  manipulation When working with tarantool through a Connector library,
  A complete description of data manipulation functionality
  is provided in the featurthe binary network
  protocol, used by Tarantool, is provided in 
</para>

<!--
<section>

  <title>Data console</title>

  <para>The default data port is 33014. It can be set in the 
  configuration file. Data console supports asynchronous I/O.
  Four commands are supported. For a complete protocol manual, see
  developers guide.
  </para>

</section>


<section>
  <title>Administrative console</title>
  <para>YAML output. Provide command reference</para>
</section>
-->

</chapter>
<!--
vim: tw=66
vim: spell spelllang=en
-->
