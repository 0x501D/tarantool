<!DOCTYPE book [
<!ENTITY % tnt SYSTEM "../tnt.ent">
%tnt;
]>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xml:id="getting-started">

<title>Getting started</title>

<para>
This chapter shows how to download, how to install, and how to start Tarantool for the first time.
</para> 

<para>
For production, if possible, you should download a binary (executable) package.
This will ensure that you have the same build of the same version that the developers have.
That makes analysis easier if later you need to
report a problem, and avoids subtle problems that might happen if
you used different tools or different parameters when building from source.
The section about binaries is <olink
targetptr="getting-started-binary"><quote>Downloading and
installing a binary package</quote></olink>.
</para>

<para>
For development, you will want to download a source package and make the binary
by yourself using a C/C++ compiler and common tools.
Although this is a bit harder, it gives more control.
And the source packages include additional files, for example the Tarantool test suite.
The section about source is 
<link xlink:href="http://tarantool.org/doc/dev_guide/building_from_source.html"><quote>Building from source</quote></link>
</para>

<para>
If the installation has already been done, then you should try it out.
	So we've provided some instructions that you can use to make a temporary <quote>sandbox</quote>.
In a few minutes you can start the server and type in some
database-manipulation statements.
The section about sandbox is <olink
targetptr="getting-started-start-stop"><quote>Starting Tarantool and making your first database</quote></olink>.
</para>

<section xml:id="getting-started-binary">
<title>Downloading and installing a binary package</title>

<para>
The repositories for the <quote>stable</quote> release are at <link xlink:href="http://tarantool.org/dist/stable" xlink:title="tarantool.org/dist/stble">tarantool.org/dist/stable</link>.
The repositories for the <quote>master</quote> release are at <link xlink:href="http://tarantool.org/dist/master" xlink:title="tarantool.org/dist/master">tarantool.org/dist/master</link>.
Since this is the manual for the <quote>master</quote> release, all instructions use <link xlink:href="http://tarantool.org/dist/master" xlink:title="tarantool.org/dist/master">tarantool.org/dist/master</link>.
</para>

<para>
An automatic build system creates, tests and publishes packages for every push into the master branch. 
Therefore if you looked at <link xlink:href="http://tarantool.org/dist/master" xlink:title="tarantool.org/dist/master">tarantool.org/dist/master</link> you would see
that there are source files and subdirectories for the packages that will be described in this section.
</para>

<para>
To download and install the package that's appropriate for your environment,
start a shell (terminal) and enter one of the following sets of command-line instructions.
</para>
<para>
More advice for binary downloads is at <link xlink:href="http://tarantool.org/download.html">http://tarantool.org/download.html</link>.
</para>


<simplesect>
<title>Debian GNU/Linux</title>
<para>
There is always an up-to-date Debian repository at
<link xlink:href="http://tarantool.org/dist/master/debian">http://tarantool.org/dist/master/debian</link>
The repository contains builds for Debian unstable "Sid", stable "Wheezy",
forthcoming "Jessie". Add the tarantool.org repository to your apt
sources list. $release is an environment variable which will
contain the Debian version code e.g. "Wheezy":
<programlisting>
<userinput>
<command>wget</command> http://tarantool.org/dist/public.key
<command>sudo apt-key add</command> <filename>./public.key</filename>
release=`lsb_release -c -s`
# append two lines to a list of source repositories
<command>echo</command> "deb http://tarantool.org/dist/master/debian/ $release main" | \
<command>sudo tee</command> <option>-a</option> <filename>/etc/apt/sources.list.d/tarantool.list</filename>
<command>echo</command> "deb-src http://tarantool.org/dist/master/debian/ $release main" | \
<command>sudo tee</command> <option>-a</option> <filename>/etc/apt/sources.list.d/tarantool.list</filename>
# install
<command>sudo apt-get update</command>
<command>sudo apt-get install</command> tarantool
</userinput>
</programlisting>
</para>
</simplesect>

<simplesect>
<title>Ubuntu</title>
<para>
There is always an up-to-date Ubuntu repository at
<link xlink:href="http://tarantool.org/dist/master/ubuntu">http://tarantool.org/dist/master/ubuntu</link>
The repository contains builds for Ubuntu 12.04 "precise",
13.10 "saucy", and 14.04 "trusty".
Add the tarantool.org repository to your apt sources list
$release is an environment variable which will contain the Ubuntu version
code e.g. "precise". If you want the version that comes with
Ubuntu, start with the lines that follow the '# install' comment:
<programlisting>
<userinput>
<command>cd</command> ~
<command>wget</command> http://tarantool.org/dist/public.key
<command>sudo apt-key add</command> <filename>./public.key</filename>
release=`lsb_release -c -s`
# append two lines to a list of source repositories
<command>echo</command> "deb http://tarantool.org/dist/master/ubuntu/ $release main" | \
<command>sudo tee</command> <option>-a</option> <filename>/etc/apt/sources.list.d/tarantool.list</filename>
<command>echo</command> "deb-src http://tarantool.org/dist/master/ubuntu/ $release main" | \
<command>sudo tee</command> <option>-a</option> <filename>/etc/apt/sources.list.d/tarantool.list</filename>
# install
<command>sudo apt-get update</command>
<command>sudo apt-get install</command> tarantool
</userinput>
</programlisting>
</para>
</simplesect>

<simplesect>
<title>CentOS</title>
<para>
These instructions are applicable for CentOS version 5 or 6,
and RHEL version 5 or 6.
Pick the CentOS repository which fits your CentOS/RHEL version
and your x86 platform:
<itemizedlist>
<listitem><simpara>
<link xlink:href="http://tarantool.org/dist/master/centos/5/os/i386">http://tarantool.org/dist/master/centos/5/os/i386</link> for version 5, x86-32
</simpara></listitem>
<listitem><simpara>
<link xlink:href="http://tarantool.org/dist/master/centos/6/os/i386">http://tarantool.org/dist/master/centos/6/os/i386</link> for version 6, x86-32
</simpara></listitem>
<listitem><simpara>
<link xlink:href="http://tarantool.org/dist/master/centos/5/os/x86_64">http://tarantool.org/dist/master/centos/5/os/x86_64</link> for version 5, x86-64
</simpara></listitem>
<listitem><simpara>
<link xlink:href="http://tarantool.org/dist/master/centos/6/os/x86_64">http://tarantool.org/dist/master/centos/6/os/x86_64</link> for version 6, x86-64
</simpara></listitem>
</itemizedlist>
Add the following section to your yum repository list
(<filename>/etc/yum.repos.d/tarantool.repo</filename>)
(in the following instructions, $releasever i.e. CentOS release
version must be either 5 or 6 and  $basearch i.e. base
architecture must be either i386 or x86_64):
<programlisting>
<userinput>
# [tarantool]
name=CentOS-<replaceable>$releasever</replaceable> - Tarantool
baseurl=http://tarantool.org/dist/master/centos/<replaceable>$releasever</replaceable>/os/<replaceable>$basearch</replaceable>/
enabled=1
gpgcheck=0
</userinput></programlisting>
For example, if you have CentOS version 6 and x86-64, you can
add the new section thus:
<programlisting><userinput>
<command>echo</command> "[tarantool]" | \
<command>sudo tee</command> <filename>/etc/yum.repos.d/tarantool.repo</filename>
<command>echo</command> "name=CentOS-6 - Tarantool"| <command>sudo tee</command> <option>-a</option> <filename>/etc/yum.repos.d/tarantool.repo</filename>
<command>echo</command> "baseurl=http://tarantool.org/dist/master/centos/6/os/x86_64/" | \
<command>sudo tee</command> <option>-a</option> <filename>/etc/yum.repos.d/tarantool.repo</filename>
<command>echo</command> "enabled=1" | <command>sudo tee</command> <option>-a</option> <filename>/etc/yum.repos.d/tarantool.repo</filename>
<command>echo</command> "gpgcheck=0" | <command>sudo tee</command> <option>-a</option> <filename>/etc/yum.repos.d/tarantool.repo</filename>
</userinput>
</programlisting>
</para>
</simplesect>

<simplesect>
<title>Fedora</title>
<para>
These instructions are applicable for Fedora 19 or Fedora 20.
Pick the Fedora repository, for example <link xlink:href="http://tarantool.org/dist/master/fedora/20/x86_64">http://tarantool.org/dist/master/fedora/20/x86_64</link> for version 20, x86-64.
Add the following section to your yum repository list
(<filename>/etc/yum.repos.d/tarantool.repo</filename>)
(in the following instructions, $releasever i.e. Fedora release
version must be 19 or 20 and $basearch i.e. base architecture must be x86_64):
<programlisting>
<userinput>
[tarantool]
name=Fedora-<replaceable>$releasever</replaceable> - Tarantool
baseurl=http://tarantool.org/dist/master/fedora/<replaceable>$releasever</replaceable><replaceable>$basearch</replaceable>/
enabled=1
gpgcheck=0
</userinput>
</programlisting>
For example, if you have Fedora version 20, you can add the new section thus:
<programlisting>
<userinput>
<command>echo</command> "[tarantool]" | \
<command>sudo tee</command> <filename>/etc/yum.repos.d/tarantool.repo</filename>
<command>echo</command> "name=Fedora-20 - Tarantool"| <command>sudo tee</command> <option>-a</option> <filename>/etc/yum.repos.d/tarantool.repo</filename>
<command>echo</command> "baseurl=http://tarantool.org/dist/master/fedora/20/x86_64/" | \
<command>sudo tee</command> <option>-a</option> <filename>/etc/yum.repos.d/tarantool.repo</filename>
<command>echo</command> "enabled=1" | <command>sudo tee</command> <option>-a</option> <filename>/etc/yum.repos.d/tarantool.repo</filename>
<command>echo</command> "gpgcheck=0" | <command>sudo tee</command> <option>-a</option> <filename>/etc/yum.repos.d/tarantool.repo</filename></userinput></programlisting>
Then install with <code>sudo yum install tarantool</code>.
</para>
</simplesect>

<simplesect>
<title>Gentoo</title>
<para>
Tarantool is available from tarantool portage overlay.
Use layman to add the overlay to your system:
<programlisting>
<userinput>
<command>layman</command> <option>-S</option>
<command>layman</command> <option>-a</option> tarantool
<command>emerge</command> <filename>dev-db/tarantool</filename> <option>-av</option>
</userinput>
</programlisting>
</para>
</simplesect>

<simplesect>
<title>FreeBSD</title>
<para>
With your browser go to the FreeBSD ports page
<link xlink:href="http://www.freebsd.org/ports/index.html">http://www.freebsd.org/ports/index.html</link>.
Enter the search term: tarantool.
Choose the package you want.
</para>

</simplesect>
<simplesect>
<title>Mac OS X</title>
<para>
This is actually a <quote><productname>homebrew</productname></quote> recipe
so it's not a true binary download, some source code is involved.
First upgrade Clang (the C compiler) to version 3.2 or later using
Command Line Tools for Xcode disk image version 4.6+ from
Apple Developer web-site. Then download the recipe file from
<link xlink:href="http://tarantool.org/dist/master/tarantool.rb">tarantool.org/dist/master/tarantool.rb</link>.
Make the file executable, execute it, and the script in the file should
handle the necessary steps with cmake, make, and make install.
</para>
</simplesect>

</section>

<section xml:id="getting-started-start-stop">
<title>Starting Tarantool and making your first database</title>

<para>
Here is how to create a simple test database after installing.
</para>

<para>
1. Create a new directory. It's just for tests, you can delete it when the tests are over.<programlisting><userinput>
<command>mkdir</command> <replaceable>~/tarantool_sandbox</replaceable>
<command>cd</command> <replaceable>~/tarantool_sandbox</replaceable> </userinput></programlisting>
</para>

<para>
2. Start the server.
The server name is <computeroutput><filename>tarantool</filename></computeroutput>.<programlisting><userinput>
#if you downloaded a binary with apt-get or yum, say this:
  <command>/usr/bin/tarantool</command>
#if you downloaded and untarred a binary tarball to ~/tarantool, say this:
  <command>~/tarantool/bin/tarantool</command>
#if you built from a source download, say this:
  <command>~/tarantool/src/tarantool</command> </userinput></programlisting>
</para>

<para>
    The server starts in interactive mode and outputs a command prompt.
    To turn on the database, <link linkend="configuration-parameters">configure it</link>:
<programlisting><prompt>tarantool></prompt> <userinput>box.cfg{listen=3301}</userinput></programlisting>
    (this minimal example is sufficient).
</para>

<para>
If all goes well, you will see the server displaying progress as it initializes, something like this:<programlisting><computeroutput>
tarantool> box.cfg{listen=3301}
2014-08-07 09:41:41.077 ... version 1.6.3-439-g7e1011b
2014-08-07 09:41:41.077 ... log level 5
2014-08-07 09:41:41.078 ... mapping 1073741824 bytes for a shared arena...
2014-08-07 09:41:41.079 ... initialized
2014-08-07 09:41:41.081 ... initializing an empty data directory
2014-08-07 09:41:41.095 ... creating `./00000000000000000000.snap.inprogress'
2014-08-07 09:41:41.095 ... saving snapshot `./00000000000000000000.snap.inprogress'
2014-08-07 09:41:41.127 ... done
2014-08-07 09:41:41.128 ... primary: bound to 0.0.0.0:3301
2014-08-07 09:41:41.128 ... ready to accept requests</computeroutput></programlisting>
</para>

<para>
	Now that the server is up, you could start up a different shell and
 connect to its primary port with<programlisting>
  <command>telnet 0 3301</command></programlisting>
but for example purposes it is simpler to just leave the
server running in "interactive mode".
On production machines the interactive mode is just
for administrators, but because it's convenient for
learning it will be used for most examples in this manual.

Tarantool is waiting for the user to type instructions.
</para>

<para>
To create the first space and the first <link linkend="an-index">index</link>, try this:<programlisting>
<prompt>tarantool&gt; </prompt><userinput>s = box.schema.space.create('tester')</userinput>
<prompt>tarantool&gt; </prompt><userinput>i = s:create_index('primary', {type = 'hash', parts = {1, 'NUM'}})</userinput></programlisting>
</para>

<para>
To insert three <quote>tuples</quote> (our name for <quote>records</quote>) into the first <quote>space</quote> of the database
try this:<programlisting><prompt>tarantool&gt; </prompt><userinput>t = s:insert({1})</userinput>
<prompt>tarantool&gt; </prompt><userinput>t = s:insert({2, 'Music'})</userinput>
<prompt>tarantool&gt; </prompt><userinput>t = s:insert({3, 'Length', 93})</userinput>
</programlisting>

To select a tuple from the first space of the database,
using the first defined key, try this:<programlisting><prompt>tarantool&gt; </prompt><userinput>s:select{3}</userinput></programlisting>

Your terminal screen should now look like this:<programlisting><computeroutput>
tarantool&gt; s = box.schema.space.create('tester')
2014-06-10 12:04:18.158 ... creating `./00000000000000000002.xlog.inprogress'
---
...
tarantool&gt; s:create_index('primary', {type = 'hash', parts = {1, 'NUM'}})
---
...
tarantool&gt; t = s:insert{1}
---
...
tarantool&gt; t = s:insert{2, 'Music'}
---
...
tarantool&gt; t = s:insert{3, 'Length', 93}
---
...
tarantool&gt; s:select{3}
---
- - [3, 'Length', 93]
...

tarantool&gt;</computeroutput></programlisting>
</para>

<para>
Now, to prepare for the example in the next section,
try this:<programlisting><prompt>tarantool&gt; </prompt><userinput>box.schema.user.grant('guest','read,write,execute','universe')</userinput></programlisting>
</para>

</section>
<section xml:id="getting-started-connecting-remotely">
<title>Starting another Tarantool instance and connecting remotely</title>

<para>
In the previous section the first request was
with "box.cfg{listen=3301}". The "listen" value can be
any form of URI (uniform resource identifier); in this
case it's just a local port: port 3301. It's possible
to send requests to the listen URI via (a) telnet,
(b) a connector (which will be the subject of Chapter 8), or
(c) another instance of Tarantool. Let's try (c).
</para>
<para>
1. Switch to another terminal. On Linux, for example, this
means starting another instance of a Bash shell.
There is no need to use <computeroutput><command>cd</command></computeroutput> to switch to the ~/tarantool_sandbox directory.
</para>
<para>
2. Start the second instance of Tarantool.
The server name is <computeroutput><filename>tarantool</filename></computeroutput>.<programlisting><userinput>
#if you downloaded a binary with apt-get or yum, say this:
  <command>/usr/bin/tarantool</command>
#if you downloaded and untarred a binary tarball to ~/tarantool, say this:
  <command>~/tarantool/bin/tarantool</command>
#if you built from a source download, say this:
  <command>~/tarantool/src/tarantool</command> </userinput></programlisting>
</para>
<para>
3. Try these requests:<programlisting><userinput>console = require('console')
console.connect('localhost:3301')
box.space.tester:select{2}</userinput></programlisting>
</para>
<para>
The requests are saying "use the <link linkend="sp-console">console package</link> to connect to the
Tarantool server that's listening on localhost:3301, send a request
to that server, and display the result." The result in this case is one of
the tuples that was inserted earlier.
Your terminal screen should now look like this:<programlisting><computeroutput>
...

tarantool&gt; console = require('console')
---
...

tarantool&gt; console.connect('localhost:3301')
2014-08-31 12:46:54.650 [32628] main/101/interactive I> connected to localhost:3301
---
...

localhost:3301&gt; box.space.tester:select{2}
---
- - [2, 'Music']
...

localhost:3301&gt;</computeroutput></programlisting>
</para>

<para>
You can repeat box.space...:insert{} and box.space...:select{} indefinitely,
on either Tarantool instance.
When the testing is over:
To drop the space: <computeroutput>s:drop()</computeroutput>.
To stop tarantool: <keycombo><keysym>Ctrl</keysym><keysym>C</keysym></keycombo>.
To stop tarantool (an alternative): <computeroutput>os.exit()</computeroutput>.
To stop tarantool (from another terminal): <computeroutput><command>sudo pkill</command> -f tarantool</computeroutput>.
To destroy the test: <computeroutput><command>rm</command> -r ~/tarantool_sandbox</computeroutput>.
</para>

<sidebar>
<para>
To review ...
If you followed all the instructions in this chapter, then
so far you have: installed Tarantool from either a binary
or a source repository, started up the Tarantool server,
inserted and selected tuples.
</para>
</sidebar>

</section>




</chapter>

<!--
vim: tw=66 syntax=docbk
vim: spell spelllang=en_us
-->
