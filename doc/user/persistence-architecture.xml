<!DOCTYPE section [
<!ENTITY % tnt SYSTEM "../tnt.ent">
%tnt;
]>
<section xmlns="http://docbook.org/ns/docbook" version="5.0"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xml:id="data-persistence">
<title>Data persistence</title>
<para>
To maintain data persistence, Tarantool writes each data change
request (INSERT, UPDATE, DELETE) into a write-ahead log. WAL
files have extension <filename>.xlog</filename> and are stored in <olink
targetptr="wal_dir"/>. A new WAL file is created for every <olink
targetptr="rows_per_wal"/> records.  Each INSERT, UPDATE or DELETE
gets assigned a continuously growing 64-bit log sequence number.
The name of the log file is based on the log sequence
number of the first record this file contains.
</para>

<para>Apart from a log sequence number and the data change request
(its format is the same as in the binary protocol and is described
in <link
xlink:href="https://github.com/mailru/tarantool/blob/master/doc/box-protocol.txt"><filename>doc/box-protocol.txt</filename></link>),
each WAL record contains a checksum and a UNIX time stamp.
</para>

<para>
Tarantool processes requests atomically: a change is either
accepted and recorded in the WAL, or discarded completely.
Let's clarify how this happens, using REPLACE command as an
example:
<orderedlist>
    <listitem><para>
    The server attempts to locate the original tuple by
    primary key. If found, a reference to the tuple is retained
    for later use.
    </para></listitem>
    <listitem><para>
    The new tuple is then <emphasis>validated</emphasis>. If it
    violates a unique-key constraint, misses
    an indexed field, or an index-field type does not
    match the type of the index, the change is aborted.
    </para></listitem>
    <listitem><para>
    The new tuple replaces the old tuple in all
    existing indexes.
    </para></listitem>
    <listitem><para>
    A message is sent to <quote>wal_writer</quote>, running in a
    separate thread, requesting that the change be recorded in the WAL.
    The fiber associated with the current connection is suspended
    until an acknowledgment from the WAL writer.
    </para></listitem>
    <listitem><para>
    Upon success, a confirmation is sent to the client that
    a REPLACE has succeeded.
    Upon failure, a rollback procedure is begun.
    During the rollback procedure, all changes to the database
    which occurred after the failed change are rolled back in reverse
    order. No new change is applied while rollback is in progress.
    When the rollback procedure is finished, 
    <olink targetptr="ER_WAL_IO"/> error is sent to the client.
    </para></listitem>
</orderedlist>
</para>

<para>
One advantage of the described algorithm is that complete request
pipelining is achieved, even for requests on the same primary key.
In Tarantool, unlike in most database systems, database performance
doesn't degrade even if all requests touch upon the same key in the
same space.
</para>

<para>
The master and the WAL writer threads communicate using
asynchronous (yet reliable) messaging; the master thread, not
being blocked on WAL tasks, continues to handle requests quickly
even at high volumes of disk I/O. A response to a request
is sent as soon as it is ready, even if there were earlier
requests on the same connection which have not completed yet.
For instance, SELECT performance, even for SELECTs running 
on the same connection as UPDATEs and DELETEs, remains unaffected
by disk load.
</para>

<para>
WAL writer employs a number of modes for synchronization between
requesting fibers, WAL writer and disk hardware, as defined
in configuration for <olink targetptr="wal_mode"/>. It is also
possible to turn the write ahead log completely off, by setting
<olink targetptr="wal_mode"/> to <emphasis>none</emphasis>.
Even without the write ahead log it's still possible to take a
persistent copy of the entire data set with
<olink targetptr="save-snapshot"/>.
</para>


</section>
<!--
vim: tw=66 syntax=docbk
vim: spell spelllang=en_us
-->
