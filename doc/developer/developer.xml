<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE book [
<!ENTITY % tnt SYSTEM "../tnt.ent">
%tnt;
]>
<book xmlns="http://docbook.org/ns/docbook"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0">
<title>Tarantool/Box Developer Guide</title>
<preface>
  <title>What documentation there is</title>
  <para>
    Tarantool documentation consists of:
    <itemizedlist>
    <listitem><para>a user guide</para></listitem>
    <listitem><para>a developer guide (you're reading it)</para></listitem>
    <listitem><para>protocol description box-protocol.txt</para></listitem>
    <listitem><para>coding style guides for Lua, Objective C, C, Python (for
    other connectors, we use conventions of the connector programming
    language community)</para></listitem>
  </itemizedlist>
  </para>
</preface>
<chapter>
<title>Compiling</title>
<section>
<title>How to fix a compile time error about missing confetti</title>
<para>
  An error about missing confetti:
<programlisting>
Generating prscfg.h, prscfg.c...
[ 13%] Generating prscfg.h, prscfg.c
/bin/sh: CONFETTI-NOTFOUND: not found
</programlisting>
This error is caused by cmake, trying to re-create generated files
prscfg.h, prscfg.c in <filename>cfg/</filename> directory.
These files are under revision control and normally need not to be 
regenerated. 
The fix is to
<programlisting>
<prompt>$ </prompt>git checkout cfg/prscfg.h
<prompt>$ </prompt>git checkout cfg/prscfg.c
<prompt>$ </prompt>touch cfg/prscfg.[hc]
</programlisting>
The other alternative, if you have actually modified
<filename>core_cfg.cfg_tmpl</filename> is to install confetti from
<link xlink:href="http://github.com/mailru/confetti"/> and let cmake use it.
  
  </para>
</section>

<section>
<title>How to build the XML manual</title>
<para>
To build XML manual, you'll need:
<itemizedlist>

<listitem><para>xsltproc</para></listitem>
<listitem><para>docbook5-xml</para></listitem>
<listitem><para>docbook-xsl-ns</para></listitem>
<listitem><para>libsaxon-java- for saxon processing</para></listitem>
<listitem><para>libxml-commons-resolver1.1-java</para></listitem>
<listitem><para>libxerces2-java</para></listitem>
<listitem><para>libxslthl-java</para></listitem>
</itemizedlist>
Once all pre-requisites are met, <computeroutput>make html</computeroutput>
to build the user guide.
</para>
</section>
</chapter>
<chapter>
<title>Release management</title>
  <section><title>How to make a minor release</title>
  <para>
  <programlisting>git tag -a 1.4.4 -m "Next minor in 1.4 series"
vim CMakeLists.txt # edit CPACK_PACKAGE_VERSION_PATCH
git push --tags
</programlisting>
Go to launchpad and move all "Fix committed" bugs to "Fix released".
</para>
<para>
Update all blueprints, upload the ChangeLog, based on <prompt>git log</prompt>output.
The ChangeLog must only include items which are mentioned as bugs
or blueprints on Launchpad. If anything significant is there,
which is not mentioned, something went wrong in release planning
and the release should be held up until this is cleared.
  </para>
  </section>
</chapter>
</book>

<!--
vim: tw=66 syntax=docbk
vim: spell spelllang=en_us
-->
