# SOME DESCRIPTIVE TITLE.
# Copyright (C) 
# This file is distributed under the same license as the Tarantool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Tarantool 1.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-05-31 15:19+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../dev_guide/box-protocol.rst:27
msgid "IProto Protocol"
msgstr ""

#: ../dev_guide/box-protocol.rst:31
msgid "Notion in diagrams"
msgstr ""

#: ../dev_guide/box-protocol.rst:33
msgid "0    X\n"
"+----+\n"
"|    | - X bytes\n"
"+----+\n"
" TYPE - type of MsgPack value (if it is MsgPack object)\n"
"\n"
"+====+\n"
"|    | - Variable size MsgPack object\n"
"+====+\n"
" TYPE - type of MsgPack value\n"
"\n"
"+~~~~+\n"
"|    | - Variable size MsgPack Array/Map\n"
"+~~~~+\n"
" TYPE - type of MsgPack value"
msgstr ""

#: ../dev_guide/box-protocol.rst:52
msgid "MsgPack data types:"
msgstr ""

#: ../dev_guide/box-protocol.rst:54
msgid "**MP_INT** - Integer"
msgstr ""

#: ../dev_guide/box-protocol.rst:55
msgid "**MP_MAP** - Map"
msgstr ""

#: ../dev_guide/box-protocol.rst:56
msgid "**MP_ARR** - Array"
msgstr ""

#: ../dev_guide/box-protocol.rst:57
msgid "**MP_STRING** - String"
msgstr ""

#: ../dev_guide/box-protocol.rst:58
msgid "**MP_FIXSTR** - Fixed size string"
msgstr ""

#: ../dev_guide/box-protocol.rst:59
msgid "**MP_OBJECT** - Any MsgPack object"
msgstr ""

#: ../dev_guide/box-protocol.rst:64
msgid "Overview"
msgstr ""

#: ../dev_guide/box-protocol.rst:66
msgid "IPROTO is a binary request/response protocol."
msgstr ""

#: ../dev_guide/box-protocol.rst:70
msgid "Greeting Packet"
msgstr ""

#: ../dev_guide/box-protocol.rst:72
msgid "TARANTOOL'S GREETING:\n"
"\n"
"0                                     63\n"
"+--------------------------------------+\n"
"|                                      |\n"
"| Tarantool Greeting (server version)  |\n"
"|               64 bytes               |\n"
"+---------------------+----------------+\n"
"|                     |                |\n"
"| BASE64 encoded SALT |      NULL      |\n"
"|      44 bytes       |                |\n"
"+---------------------+----------------+\n"
"64                  107              127"
msgstr ""

#: ../dev_guide/box-protocol.rst:88
msgid "The server begins the dialogue by sending a fixed-size (128 bytes) text greeting to the client. The greeting always contains two 64 byte lines of ASCII text, each line ending with newline character ('\\\\n'). The first line contains the server version and protocol type. The second line contains up to 44 bytes of base64-encoded random string, to use in authentication packet, and ends with up to 23 spaces."
msgstr ""

#: ../dev_guide/box-protocol.rst:96
msgid "Unified packet structure"
msgstr ""

#: ../dev_guide/box-protocol.rst:98
msgid "Once a greeting is read, the protocol becomes pure request/response and features a complete access to Tarantool functionality, including:"
msgstr ""

#: ../dev_guide/box-protocol.rst:101
msgid "request multiplexing, e.g. ability to asynchronously issue multiple requests via the same connection"
msgstr ""

#: ../dev_guide/box-protocol.rst:103
msgid "response format that supports zero-copy writes"
msgstr ""

#: ../dev_guide/box-protocol.rst:105
msgid "For data structuring and encoding, the protocol uses msgpack data format, see http://msgpack.org"
msgstr ""

#: ../dev_guide/box-protocol.rst:108
msgid "Tarantool protocol mandates use of a few integer constants serving as keys in maps used in the protocol. These constants are defined in `src/box/iproto_constants.h <https://github.com/tarantool/tarantool/blob/master/src/box/iproto_constants.h>`_"
msgstr ""

#: ../dev_guide/box-protocol.rst:112
msgid "Let's list them here too:"
msgstr ""

#: ../dev_guide/box-protocol.rst:114
msgid "-- user keys\n"
"<code>          ::= 0x00\n"
"<sync>          ::= 0x01\n"
"<schema_id>     ::= 0x05\n"
"<space_id>      ::= 0x10\n"
"<index_id>      ::= 0x11\n"
"<limit>         ::= 0x12\n"
"<offset>        ::= 0x13\n"
"<iterator>      ::= 0x14\n"
"<key>           ::= 0x20\n"
"<tuple>         ::= 0x21\n"
"<function_name> ::= 0x22\n"
"<username>      ::= 0x23\n"
"<expression>    ::= 0x27\n"
"<ops>           ::= 0x28\n"
"<data>          ::= 0x30\n"
"<error>         ::= 0x31"
msgstr ""

#: ../dev_guide/box-protocol.rst:134
msgid "-- -- Value for <code> key in request can be:\n"
"-- User command codes\n"
"<select>  ::= 0x01\n"
"<insert>  ::= 0x02\n"
"<replace> ::= 0x03\n"
"<update>  ::= 0x04\n"
"<delete>  ::= 0x05\n"
"<call>    ::= 0x06\n"
"<auth>    ::= 0x07\n"
"<eval>    ::= 0x08\n"
"<upsert>  ::= 0x09\n"
"-- Admin command codes\n"
"<ping>    ::= 0x40\n"
"\n"
"-- -- Value for <code> key in response can be:\n"
"<OK>      ::= 0x00\n"
"<ERROR>   ::= 0x8XXX"
msgstr ""

#: ../dev_guide/box-protocol.rst:155
msgid "Both :code:`<header>` and :code:`<body>` are msgpack maps:"
msgstr ""

#: ../dev_guide/box-protocol.rst:157
msgid "Request/Response:\n"
"\n"
"0        5\n"
"+--------+ +============+ +===================================+\n"
"| BODY + | |            | |                                   |\n"
"| HEADER | |   HEADER   | |               BODY                |\n"
"|  SIZE  | |            | |                                   |\n"
"+--------+ +============+ +===================================+\n"
"  MP_INT       MP_MAP                     MP_MAP"
msgstr ""

#: ../dev_guide/box-protocol.rst:169
msgid "UNIFIED HEADER:\n"
"\n"
"+================+================+=====================+\n"
"|                |                |                     |\n"
"|   0x00: CODE   |   0x01: SYNC   |    0x05: SCHEMA_ID  |\n"
"| MP_INT: MP_INT | MP_INT: MP_INT |  MP_INT: MP_INT     |\n"
"|                |                |                     |\n"
"+================+================+=====================+\n"
"                          MP_MAP"
msgstr ""

#: ../dev_guide/box-protocol.rst:181
msgid "They only differ in the allowed set of keys and values, the key defines the type of value that follows. If a body has no keys, entire msgpack map for the body may be missing. Such is the case, for example, in <ping> request. ``schema_id`` may be absent in request's header, that means that there'll be no version checking, but it must be present in the response. If ``schema_id`` is sent in the header, then it'll be checked."
msgstr ""

#: ../dev_guide/box-protocol.rst:192
msgid "Authentication"
msgstr ""

#: ../dev_guide/box-protocol.rst:194
msgid "When a client connects to the server, the server responds with a 128-byte text greeting message. Part of the greeting is base-64 encoded session salt - a random string which can be used for authentication. The length of decoded salt (44 bytes) exceeds the amount necessary to sign the authentication message (first 20 bytes). An excess is reserved for future authentication schemas."
msgstr ""

#: ../dev_guide/box-protocol.rst:201
msgid "PREPARE SCRAMBLE:\n"
"\n"
"    LEN(ENCODED_SALT) = 44;\n"
"    LEN(SCRAMBLE)     = 20;\n"
"\n"
"prepare 'chap-sha1' scramble:\n"
"\n"
"    salt = base64_decode(encoded_salt);\n"
"    step_1 = sha1(password);\n"
"    step_2 = sha1(step_1);\n"
"    step_3 = sha1(salt, step_2);\n"
"    scramble = xor(step_1, step_3);\n"
"    return scramble;\n"
"\n"
"AUTHORIZATION BODY: CODE = 0x07\n"
"\n"
"+==================+====================================+\n"
"|                  |        +-------------+-----------+ |\n"
"|  (KEY)           | (TUPLE)|  len == 9   | len == 20 | |\n"
"|   0x23:USERNAME  |   0x21:| \"chap-sha1\" |  SCRAMBLE | |\n"
"| MP_INT:MP_STRING | MP_INT:|  MP_STRING  | MP_STRING | |\n"
"|                  |        +-------------+-----------+ |\n"
"|                  |                   MP_ARRAY         |\n"
"+==================+====================================+\n"
"                        MP_MAP"
msgstr ""

#: ../dev_guide/box-protocol.rst:229
msgid ":code:`<key>` holds the user name. :code:`<tuple>` must be an array of 2 fields: authentication mechanism (\"chap-sha1\" is the only supported mechanism right now) and password, encrypted according to the specified mechanism. Authentication in Tarantool is optional, if no authentication is performed, session user is 'guest'. The server responds to authentication packet with a standard response with 0 tuples."
msgstr ""

#: ../dev_guide/box-protocol.rst:237
msgid "Requests"
msgstr ""

#: ../dev_guide/box-protocol.rst:239
msgid "SELECT: CODE - 0x01 Find tuples matching the search pattern"
msgstr ""

#: ../dev_guide/box-protocol.rst:242
msgid "SELECT BODY:\n"
"\n"
"+==================+==================+==================+\n"
"|                  |                  |                  |\n"
"|   0x10: SPACE_ID |   0x11: INDEX_ID |   0x12: LIMIT    |\n"
"| MP_INT: MP_INT   | MP_INT: MP_INT   | MP_INT: MP_INT   |\n"
"|                  |                  |                  |\n"
"+==================+==================+==================+\n"
"|                  |                  |                  |\n"
"|   0x13: OFFSET   |   0x14: ITERATOR |   0x20: KEY      |\n"
"| MP_INT: MP_INT   | MP_INT: MP_INT   | MP_INT: MP_ARRAY |\n"
"|                  |                  |                  |\n"
"+==================+==================+==================+\n"
"                          MP_MAP"
msgstr ""

#: ../dev_guide/box-protocol.rst:259
msgid "INSERT:  CODE - 0x02 Inserts tuple into the space, if no tuple with same unique keys exists. Otherwise throw *duplicate key* error."
msgstr ""

#: ../dev_guide/box-protocol.rst:261
msgid "REPLACE: CODE - 0x03 Insert a tuple into the space or replace an existing one."
msgstr ""

#: ../dev_guide/box-protocol.rst:264
msgid "INSERT/REPLACE BODY:\n"
"\n"
"+==================+==================+\n"
"|                  |                  |\n"
"|   0x10: SPACE_ID |   0x21: TUPLE    |\n"
"| MP_INT: MP_INT   | MP_INT: MP_ARRAY |\n"
"|                  |                  |\n"
"+==================+==================+\n"
"                 MP_MAP"
msgstr ""

#: ../dev_guide/box-protocol.rst:277
msgid "UPDATE: CODE - 0x04 Update a tuple"
msgstr ""

#: ../dev_guide/box-protocol.rst:280
msgid "UPDATE BODY:\n"
"\n"
"+==================+=======================+\n"
"|                  |                       |\n"
"|   0x10: SPACE_ID |   0x11: INDEX_ID      |\n"
"| MP_INT: MP_INT   | MP_INT: MP_INT        |\n"
"|                  |                       |\n"
"+==================+=======================+\n"
"|                  |          +~~~~~~~~~~+ |\n"
"|                  |          |          | |\n"
"|                  | (TUPLE)  |    OP    | |\n"
"|   0x20: KEY      |    0x21: |          | |\n"
"| MP_INT: MP_ARRAY |  MP_INT: +~~~~~~~~~~+ |\n"
"|                  |            MP_ARRAY   |\n"
"+==================+=======================+\n"
"                 MP_MAP"
msgstr ""

#: ../dev_guide/box-protocol.rst:299
msgid "OP:\n"
"    Works only for integer fields:\n"
"    * Addition    OP = '+' . space[key][field_no] += argument\n"
"    * Subtraction OP = '-' . space[key][field_no] -= argument\n"
"    * Bitwise AND OP = '&' . space[key][field_no] &= argument\n"
"    * Bitwise XOR OP = '^' . space[key][field_no] ^= argument\n"
"    * Bitwise OR  OP = '|' . space[key][field_no] |= argument\n"
"    Works on any fields:\n"
"    * Delete      OP = '#'\n"
"      delete <argument> fields starting\n"
"      from <field_no> in the space[<key>]\n"
"\n"
"0           2\n"
"+-----------+==========+==========+\n"
"|           |          |          |\n"
"|    OP     | FIELD_NO | ARGUMENT |\n"
"| MP_FIXSTR |  MP_INT  |  MP_INT  |\n"
"|           |          |          |\n"
"+-----------+==========+==========+\n"
"              MP_ARRAY"
msgstr ""

#: ../dev_guide/box-protocol.rst:322
msgid "    * Insert      OP = '!'\n"
"      insert <argument> before <field_no>\n"
"    * Assign      OP = '='\n"
"      assign <argument> to field <field_no>.\n"
"      will extend the tuple if <field_no> == <max_field_no> + 1\n"
"\n"
"0           2\n"
"+-----------+==========+===========+\n"
"|           |          |           |\n"
"|    OP     | FIELD_NO | ARGUMENT  |\n"
"| MP_FIXSTR |  MP_INT  | MP_OBJECT |\n"
"|           |          |           |\n"
"+-----------+==========+===========+\n"
"              MP_ARRAY\n"
"\n"
"    Works on string fields:\n"
"    * Splice      OP = ':'\n"
"      take the string from space[key][field_no] and\n"
"      substitute <offset> bytes from <position> with <argument>"
msgstr ""

#: ../dev_guide/box-protocol.rst:344
msgid "0           2\n"
"+-----------+==========+==========+========+==========+\n"
"|           |          |          |        |          |\n"
"|    ':'    | FIELD_NO | POSITION | OFFSET | ARGUMENT |\n"
"| MP_FIXSTR |  MP_INT  |  MP_INT  | MP_INT |  MP_STR  |\n"
"|           |          |          |        |          |\n"
"+-----------+==========+==========+========+==========+\n"
"                         MP_ARRAY"
msgstr ""

#: ../dev_guide/box-protocol.rst:356
msgid "It's an error to specify an argument of a type that differs from expected type."
msgstr ""

#: ../dev_guide/box-protocol.rst:358
msgid "DELETE: CODE - 0x05 Delete a tuple"
msgstr ""

#: ../dev_guide/box-protocol.rst:361
msgid "DELETE BODY:\n"
"\n"
"+==================+==================+==================+\n"
"|                  |                  |                  |\n"
"|   0x10: SPACE_ID |   0x11: INDEX_ID |   0x20: KEY      |\n"
"| MP_INT: MP_INT   | MP_INT: MP_INT   | MP_INT: MP_ARRAY |\n"
"|                  |                  |                  |\n"
"+==================+==================+==================+\n"
"                          MP_MAP"
msgstr ""

#: ../dev_guide/box-protocol.rst:374
msgid "CALL: CODE - 0x06 Call a stored function"
msgstr ""

#: ../dev_guide/box-protocol.rst:377
msgid "CALL BODY:\n"
"\n"
"+=======================+==================+\n"
"|                       |                  |\n"
"|   0x22: FUNCTION_NAME |   0x21: TUPLE    |\n"
"| MP_INT: MP_STRING     | MP_INT: MP_ARRAY |\n"
"|                       |                  |\n"
"+=======================+==================+\n"
"                    MP_MAP"
msgstr ""

#: ../dev_guide/box-protocol.rst:390
msgid "EVAL: CODE - 0x08 Evaulate Lua expression"
msgstr ""

#: ../dev_guide/box-protocol.rst:393
msgid "EVAL BODY:\n"
"\n"
"+=======================+==================+\n"
"|                       |                  |\n"
"|   0x27: EXPRESSION    |   0x21: TUPLE    |\n"
"| MP_INT: MP_STRING     | MP_INT: MP_ARRAY |\n"
"|                       |                  |\n"
"+=======================+==================+\n"
"                    MP_MAP"
msgstr ""

#: ../dev_guide/box-protocol.rst:406
msgid "UPSERT: CODE - 0x09 Update tuple if it would be found elsewhere try to insert tuple. Always use primary index for key."
msgstr ""

#: ../dev_guide/box-protocol.rst:409
msgid "UPSERT BODY:\n"
"\n"
"+==================+==================+==========================+\n"
"|                  |                  |             +~~~~~~~~~~+ |\n"
"|                  |                  |             |          | |\n"
"|   0x10: SPACE_ID |   0x21: TUPLE    |       (OPS) |    OP    | |\n"
"| MP_INT: MP_INT   | MP_INT: MP_ARRAY |       0x28: |          | |\n"
"|                  |                  |     MP_INT: +~~~~~~~~~~+ |\n"
"|                  |                  |               MP_ARRAY   |\n"
"+==================+==================+==========================+\n"
"                                MP_MAP\n"
"\n"
"Operations structure same as for UPDATE operation.\n"
"   0           2\n"
"+-----------+==========+==========+\n"
"|           |          |          |\n"
"|    OP     | FIELD_NO | ARGUMENT |\n"
"| MP_FIXSTR |  MP_INT  |  MP_INT  |\n"
"|           |          |          |\n"
"+-----------+==========+==========+\n"
"              MP_ARRAY\n"
"\n"
"Supported operations:\n"
"\n"
"'+' - add a value to a numeric field. If the filed is not numeric, it's\n"
"      changed to 0 first. If the field does not exist, the operation is\n"
"      skipped. There is no error in case of overflow either, the value\n"
"      simply wraps around in C style. The range of the integer is MsgPack:\n"
"      from -2^63 to 2^64-1\n"
"'-' - same as the previous, but subtract a value\n"
"'=' - assign a field to a value. The field must exist, if it does not exist,\n"
"      the operation is skipped.\n"
"'!' - insert a field. It's only possible to insert a field if this create no\n"
"      nil \"gaps\" between fields. E.g. it's possible to add a field between\n"
"      existing fields or as the last field of the tuple.\n"
"'#' - delete a field. If the field does not exist, the operation is skipped.\n"
"      It's not possible to change with update operations a part of the primary\n"
"      key (this is validated before performing upsert)."
msgstr ""

#: ../dev_guide/box-protocol.rst:453
msgid "Response packet structure"
msgstr ""

#: ../dev_guide/box-protocol.rst:455
msgid "We'll show whole packets here:"
msgstr ""

#: ../dev_guide/box-protocol.rst:457
msgid "OK:    LEN + HEADER + BODY\n"
"\n"
"0      5                                          OPTIONAL\n"
"+------++================+================++===================+\n"
"|      ||                |                ||                   |\n"
"| BODY ||   0x00: 0x00   |   0x01: SYNC   ||   0x30: DATA      |\n"
"|HEADER|| MP_INT: MP_INT | MP_INT: MP_INT || MP_INT: MP_OBJECT |\n"
"| SIZE ||                |                ||                   |\n"
"+------++================+================++===================+\n"
" MP_INT                MP_MAP                      MP_MAP"
msgstr ""

#: ../dev_guide/box-protocol.rst:471
msgid "Set of tuples in the response :code:`<data>` expects a msgpack array of tuples as value EVAL command returns arbitrary `MP_ARRAY` with arbitrary MsgPack values."
msgstr ""

#: ../dev_guide/box-protocol.rst:474
msgid "ERROR: LEN + HEADER + BODY\n"
"\n"
"0      5\n"
"+------++================+================++===================+\n"
"|      ||                |                ||                   |\n"
"| BODY ||   0x00: 0x8XXX |   0x01: SYNC   ||   0x31: ERROR     |\n"
"|HEADER|| MP_INT: MP_INT | MP_INT: MP_INT || MP_INT: MP_STRING |\n"
"| SIZE ||                |                ||                   |\n"
"+------++================+================++===================+\n"
" MP_INT                MP_MAP                      MP_MAP\n"
"\n"
"Where 0xXXX is ERRCODE."
msgstr ""

#: ../dev_guide/box-protocol.rst:489
msgid "Error message is present in the response only if there is an error :code:`<error>` expects as value a msgpack string"
msgstr ""

#: ../dev_guide/box-protocol.rst:492
msgid "Convenience macros which define hexadecimal constants for return codes can be found in `src/box/errcode.h <https://github.com/tarantool/tarantool/blob/master/src/box/errcode.h>`_"
msgstr ""

#: ../dev_guide/box-protocol.rst:498
msgid "Replication packet structure"
msgstr ""

#: ../dev_guide/box-protocol.rst:500
msgid "-- replication keys\n"
"<server_id>     ::= 0x02\n"
"<lsn>           ::= 0x03\n"
"<timestamp>     ::= 0x04\n"
"<server_uuid>   ::= 0x24\n"
"<cluster_uuid>  ::= 0x25\n"
"<vclock>        ::= 0x26"
msgstr ""

#: ../dev_guide/box-protocol.rst:510
msgid "-- replication codes\n"
"<join>      ::= 0x41\n"
"<subscribe> ::= 0x42"
msgstr ""

#: ../dev_guide/box-protocol.rst:517
msgid "JOIN:\n"
"\n"
"In the beginning you must send JOIN\n"
"                         HEADER                          BODY\n"
"+================+================+===================++-------+\n"
"|                |                |    SERVER_UUID    ||       |\n"
"|   0x00: 0x41   |   0x01: SYNC   |   0x24: UUID      || EMPTY |\n"
"| MP_INT: MP_INT | MP_INT: MP_INT | MP_INT: MP_STRING ||       |\n"
"|                |                |                   ||       |\n"
"+================+================+===================++-------+\n"
"               MP_MAP                                   MP_MAP\n"
"\n"
"Then server, which we connect to, will send last SNAP file by, simply,\n"
"creating a number of INSERTs (with additional LSN and ServerID)\n"
"(don't reply). Then it'll send a vclock's MP_MAP and close a socket.\n"
"\n"
"+================+================++============================+\n"
"|                |                ||        +~~~~~~~~~~~~~~~~~+ |\n"
"|                |                ||        |                 | |\n"
"|   0x00: 0x00   |   0x01: SYNC   ||   0x26:| SRV_ID: SRV_LSN | |\n"
"| MP_INT: MP_INT | MP_INT: MP_INT || MP_INT:| MP_INT: MP_INT  | |\n"
"|                |                ||        +~~~~~~~~~~~~~~~~~+ |\n"
"|                |                ||               MP_MAP       |\n"
"+================+================++============================+\n"
"               MP_MAP                      MP_MAP\n"
"\n"
"SUBSCRIBE:\n"
"\n"
"Then you must send SUBSCRIBE:\n"
"\n"
"                              HEADER\n"
"+===================+===================+\n"
"|                   |                   |\n"
"|     0x00: 0x41    |    0x01: SYNC     |\n"
"|   MP_INT: MP_INT  |  MP_INT: MP_INT   |\n"
"|                   |                   |\n"
"+===================+===================+\n"
"|    SERVER_UUID    |    CLUSTER_UUID   |\n"
"|   0x24: UUID      |   0x25: UUID      |\n"
"| MP_INT: MP_STRING | MP_INT: MP_STRING |\n"
"|                   |                   |\n"
"+===================+===================+\n"
"                 MP_MAP\n"
"\n"
"      BODY\n"
"+================+\n"
"|                |\n"
"|   0x26: VCLOCK |\n"
"| MP_INT: MP_INT |\n"
"|                |\n"
"+================+\n"
"      MP_MAP\n"
"\n"
"Then you must process every query that'll came through other masters.\n"
"Every request between masters will have Additional LSN and SERVER_ID."
msgstr ""

#: ../dev_guide/box-protocol.rst:577
msgid "XLOG / SNAP"
msgstr ""

#: ../dev_guide/box-protocol.rst:579
msgid "XLOG and SNAP have the same format. They start with:"
msgstr ""

#: ../dev_guide/box-protocol.rst:581
msgid "SNAP\\n\n"
"0.12\\n\n"
"Server: e6eda543-eda7-4a82-8bf4-7ddd442a9275\\n\n"
"VClock: {1: 0}\\n\n"
"\\n\n"
"..."
msgstr ""

#: ../dev_guide/box-protocol.rst:590
msgid "So, **Header** of an SNAP/XLOG consists of:"
msgstr ""

#: ../dev_guide/box-protocol.rst:592
msgid "<format>\\n\n"
"<format_version>\\n\n"
"Server: <server_uuid>\\n\n"
"VClock: <vclock_map>\\n\n"
"\\n"
msgstr ""

#: ../dev_guide/box-protocol.rst:601
msgid "There are two markers: tuple beginning - **0xd5ba0bab** and EOF marker - **0xd510aded**. So, next, between **Header** and EOF marker there's data with the following schema:"
msgstr ""

#: ../dev_guide/box-protocol.rst:605
msgid "0            3 4                                         17\n"
"+-------------+========+============+===========+=========+\n"
"|             |        |            |           |         |\n"
"| 0xd5ba0bab  | LENGTH | CRC32 PREV | CRC32 CUR | PADDING |\n"
"|             |        |            |           |         |\n"
"+-------------+========+============+===========+=========+\n"
"  MP_FIXEXT2    MP_INT     MP_INT       MP_INT      ---\n"
"\n"
"+============+ +===================================+\n"
"|            | |                                   |\n"
"|   HEADER   | |                BODY               |\n"
"|            | |                                   |\n"
"+============+ +===================================+\n"
"    MP_MAP                     MP_MAP"
msgstr ""

#: ../dev_guide/building_documentation.rst:21
msgid "Building Documentation"
msgstr ""

#: ../dev_guide/building_documentation.rst:23
msgid "After building and testing your local instance of Tarantool, you can build a local version of this documentation and contribute to it."
msgstr ""

#: ../dev_guide/building_documentation.rst:25
msgid "Documentation is based on the python-based Sphinx generator. So, make sure to install all python modules indicated in the BUILDING FROM SOURCE (http://tarantool.org/doc/dev_guide/building_from_source.html) section of this documentation. The procedure below implies that you already took those steps and successfully tested your instance of Tarantool."
msgstr ""

#: ../dev_guide/building_documentation.rst:27
msgid "Build a local version of the existing documentation package."
msgstr ""

#: ../dev_guide/building_documentation.rst:29
msgid "Run the following set of commands (the example below is based on Ubuntu OS, but the precedure is similar for other supported OS's):"
msgstr ""

#: ../dev_guide/building_documentation.rst:31
msgid "cd ~/tarantool\n"
"cmake -DENABLE_DOC=TRUE\n"
"make -C doc"
msgstr ""

#: ../dev_guide/building_documentation.rst:37
msgid "Documentation is created and stored at ``doc/www/output``."
msgstr ""

#: ../dev_guide/building_documentation.rst:39
msgid "Set up a web-server."
msgstr ""

#: ../dev_guide/building_documentation.rst:41
msgid "Note that if your Tarantool Database runs on a Virtual machine, you need to make sure that your host and client machines operate in the same network, i.e., to configure port forwarding. If you use Oracle VM VirtualBox, follow the guidelines below:"
msgstr ""

#: ../dev_guide/building_documentation.rst:43
msgid "To create a network, navigate to **Network > Advanced > Port Forwarding** in your VirtualBox instance menu."
msgstr ""

#: ../dev_guide/building_documentation.rst:44
msgid "Enable the **Cable connected** checkbox."
msgstr ""

#: ../dev_guide/building_documentation.rst:45
msgid "Click the **Port Forwarding** button."
msgstr ""

#: ../dev_guide/building_documentation.rst:46
msgid "Set Host and Guest Ports to ``8000``, Host IP to ``127.0.0.1`` and Guest IP to ``10.0.2.15``. Make sure to check the IP of your VB instance, it must be 10.0.2.15 (``ifconfig`` command)"
msgstr ""

#: ../dev_guide/building_documentation.rst:47
msgid "Save your settings"
msgstr ""

#: ../dev_guide/building_documentation.rst:49
msgid "If all the prerequisites are met, run the following command to set up a web-server (the example below is based on Ubuntu, but the procedure is similar for other supported OS's). Make sure to run it from the documentation output folder, as specified below:"
msgstr ""

#: ../dev_guide/building_documentation.rst:51
msgid "cd ~/tarantool/doc/www/output\n"
"python -m SimpleHTTPServer 8000"
msgstr ""

#: ../dev_guide/building_documentation.rst:56
msgid "Open your browser and enter ``127.0.0.1:8000`` into the address box. If your local documentation build is valid, the HTML version will be displayed in the browser."
msgstr ""

#: ../dev_guide/building_documentation.rst:58
msgid "To contribute to documentation, use the ``.rst`` format for drafting and submit your updates as \"Pull Requests\" via GitHub."
msgstr ""

#: ../dev_guide/building_documentation.rst:60
msgid "To comply with the writing and formatting style, use guidelines provided in the documentation, common sense and existing documents."
msgstr ""

#: ../dev_guide/building_documentation.rst:62
msgid "Note that if you suggest creating a new documentation section (i.e., a whole new page), it has to be saved to the relevant section at GitHub."
msgstr ""

#: ../dev_guide/building_documentation.rst:64
msgid "Root folder for documentation source files is located at https://github.com/tarantool/tarantool/tree/master/doc/sphinx."
msgstr ""

#: ../dev_guide/building_documentation.rst:65
msgid "Source files for the developers' guide are located at https://github.com/tarantool/tarantool/tree/master/doc/sphinx/dev_guide."
msgstr ""

#: ../dev_guide/building_from_source.rst:21
msgid "Building from source"
msgstr ""

#: ../dev_guide/building_from_source.rst:23
msgid "For downloading Tarantool source and building it, the platforms can differ and the preferences can differ. But the steps are always the same. Here in the manual we'll explain what the steps are, then on the Internet you can look at some example scripts."
msgstr ""

#: ../dev_guide/building_from_source.rst:27
msgid "Get tools and libraries that will be necessary for building and testing. The absolutely necessary ones are:"
msgstr ""

#: ../dev_guide/building_from_source.rst:30
msgid "A program for downloading source repositories. |br| In this case the necessary program is ``git``. Although tarantool.org/dist has source tarballs (the files whose names end in `-src.tar.gz`), the latest complete source downloads are on github.com, and from github one gets with git."
msgstr ""

#: ../dev_guide/building_from_source.rst:35
msgid "A C/C++ compiler. |br| Ordinarily the compiler is `gcc` and ``g++`` version 4.6 or later, on Mac OS X it should be ``Clang`` version 3.2 or later."
msgstr ""

#: ../dev_guide/building_from_source.rst:38
msgid "A program for managing the build process. |br| This is always ``CMake`` for GNU/Linux and FreeBSD. The CMake version should be 2.8 or later."
msgstr ""

#: ../dev_guide/building_from_source.rst:41
msgid "Here are names of tools and libraries which may have to be installed in advance, using ``sudo apt-get`` (for Ubuntu), ``sudo yum install`` (for CentOS), or the equivalent on other platforms. Different platforms may use slightly different names. Ignore the ones marked `optional, only in Mac OS scripts` unless the platform is Mac OS. Ignore the one marked `optional, only for documentation` unless the intent is to use the ``-DENABLE_DOC`` option in step 5."
msgstr ""

#: ../dev_guide/building_from_source.rst:48
msgid "**gcc and g++, or clang**                # see above"
msgstr ""

#: ../dev_guide/building_from_source.rst:49
msgid "**git**                                  # see above"
msgstr ""

#: ../dev_guide/building_from_source.rst:50
msgid "**cmake**                                # see above"
msgstr ""

#: ../dev_guide/building_from_source.rst:51
msgid "**libreadline-dev or libreadline6-dev or readline-devel**  # for interactive mode"
msgstr ""

#: ../dev_guide/building_from_source.rst:52
msgid "**autoconf**                             # optional, only in Mac OS scripts"
msgstr ""

#: ../dev_guide/building_from_source.rst:53
msgid "**zlib1g** or **zlib**                   # optional, only in Mac OS scripts"
msgstr ""

#: ../dev_guide/building_from_source.rst:54
msgid "**doxygen**                              # optional, only for documentation"
msgstr ""

#: ../dev_guide/building_from_source.rst:56
msgid "Set up python modules for running the test suite or creating documentation. This step is optional. Python modules are not necessary for building Tarantool itself, unless one intends to use the ``-DENABLE_DOC`` option in step 5 or the \"Run the test suite\" option in step 7. Say: |br| ``python --version`` |br| You should see that the python version is greater than 2.6 -- preferably 2.7 -- and less than 3.0. It may be necessary to install python first."
msgstr ""

#: ../dev_guide/building_from_source.rst:65
msgid "On Ubuntu you can get modules from the repository:"
msgstr ""

#: ../dev_guide/building_from_source.rst:67
msgid "# For both test suite and documentation\n"
"sudo apt-get install python-pip python-dev python-yaml\n"
"# For test suite\n"
"sudo apt-get install python-daemon\n"
"# For documentation\n"
"sudo apt-get install python-sphinx python-pelican python-beautifulsoup"
msgstr ""

#: ../dev_guide/building_from_source.rst:76
msgid "On CentOS 6 too you can get modules from the repository:"
msgstr ""

#: ../dev_guide/building_from_source.rst:78
msgid "sudo yum install python26 python26-PyYAML etc."
msgstr ""

#: ../dev_guide/building_from_source.rst:82
msgid "If modules are not available on a repository, it is best to set up the modules by getting a tarball and doing the setup with ``python setup.py``, thus:"
msgstr ""

#: ../dev_guide/building_from_source.rst:86
msgid "# On some machines this initial command may be necessary:\n"
"# wget https://bootstrap.pypa.io/ez_setup.py -O - | sudo python\n"
"\n"
"# python module for parsing YAML (pyYAML): For test suite:\n"
"# (If wget fails, check the http://pyyaml.org/wiki/PyYAML\n"
"# to see what the current version is.)\n"
"cd ~\n"
"wget http://pyyaml.org/download/pyyaml/PyYAML-3.10.tar.gz\n"
"tar -xzf PyYAML-3.10.tar.gz\n"
"cd PyYAML-3.10\n"
"sudo python setup.py install\n"
"\n"
"# python module for helping programs become daemons (daemon):\n"
"# For test suite: (if wget fails, check the\n"
"# http://pypi.python.org/pypi/python-daemon\n"
"# to see what the current version is.)\n"
"cd ~\n"
"wget http://pypi.python.org/packages/source/p/python-daemon/python-daemon-1.5.5.tar.gz\n"
"tar -xzvf python-daemon-1.5.5.tar.gz\n"
"cd python-daemon-1.5.5\n"
"sudo python setup.py install\n"
"\n"
"# python module for HTML scraping: For documentation:\n"
"cd ~\n"
"wget http://www.crummy.com/software/BeautifulSoup/bs3/download//3.x/BeautifulSoup-3.2.1.tar.gz\n"
"tar -xzvf BeautifulSoup-3.2.1.tar.gz\n"
"cd BeautifulSoup-3.2.1\n"
"sudo python setup.py install"
msgstr ""

#: ../dev_guide/building_from_source.rst:117
msgid "Finally, use Python :code:`pip` to bring in Python packages that may not be up-to-date in the distro repositories. (On CentOS 7 it will be necessary to install pip first, with :code:`sudo yum install epel-release` followed by :code:`sudo yum install python-pip`.)"
msgstr ""

#: ../dev_guide/building_from_source.rst:123
msgid "# For test suite\n"
"pip install tarantool\\>0.4 --user\n"
"# For documentation\n"
"sudo pip install pelican\n"
"sudo pip install breathe\n"
"sudo pip install -U sphinx"
msgstr ""

#: ../dev_guide/building_from_source.rst:132
msgid "Use :code:`git` to download the latest source code from the Tarantool 1.6 master branch on github.com. |br| |br| :code:`cd ~` |br| :code:`git clone https://github.com/tarantool/tarantool.git ~/tarantool`"
msgstr ""

#: ../dev_guide/building_from_source.rst:137
msgid "Use ``git`` again so that third-party contributions will be seen as well. This step is only necessary once, the first time you do a download. There is an alternative -- say ``git clone --recursive`` in step 3 -- but we prefer this method because it works with older versions of ``git``."
msgstr ""

#: ../dev_guide/building_from_source.rst:142
msgid "cd ~/tarantool\n"
"git submodule init\n"
"git submodule update --recursive\n"
"cd ../"
msgstr ""

#: ../dev_guide/building_from_source.rst:149
msgid "On rare occasions, the submodules will need to be updated again with the command: ``git submodule update --init --recursive``."
msgstr ""

#: ../dev_guide/building_from_source.rst:152
msgid "Use CMake to initiate the build."
msgstr ""

#: ../dev_guide/building_from_source.rst:154
msgid "cd ~/tarantool\n"
"make clean         # unnecessary, added for good luck\n"
"rm CMakeCache.txt  # unnecessary, added for good luck\n"
"cmake .            # Start build with build type=Debug, no doc"
msgstr ""

#: ../dev_guide/building_from_source.rst:161
msgid "On some platforms it may be necessary to specify the C and C++ versions, for example |br| :code:`CC=gcc-4.8 CXX=g++-4.8 cmake .` |br| The option for specifying build type is :samp:`-DCMAKE_BUILD_TYPE={type}` where :samp:`{type} = Debug | Release | RelWithDebInfo` and a reasonable choice for production is ``-DCMAKE_BUILD_TYPE=RelWithDebInfo`` (``Debug`` is a default used by project maintainers and ``Release`` is used when the highest performance is required)."
msgstr ""

#: ../dev_guide/building_from_source.rst:170
msgid "The option for asking to build documentation is :code:`-DENABLE_DOC=true|false`, which outputs HTML documentation (such as what you're reading now) to the subdirectory doc/www/output/doc. Tarantool uses the `Sphinx <http://sphinx-doc.org/>`_ simplified markup system. Since most users do not need to rebuild the documentation, the reasonable option is ``-DENABLE_DOC=false`` or just don't use the ``-DENABLE_DOC`` clause at all."
msgstr ""

#: ../dev_guide/building_from_source.rst:178
msgid "Use make to complete the build."
msgstr ""

#: ../dev_guide/building_from_source.rst:180
msgid "make"
msgstr ""

#: ../dev_guide/building_from_source.rst:184
msgid "It's possible to say ``make install`` too, but that's not generally done."
msgstr ""

#: ../dev_guide/building_from_source.rst:186
msgid "Run the test suite. This step is optional. |br| Tarantool's developers always run the test suite before they publish new versions. You should run the test suite too, if you make any changes in the code. Assuming you downloaded to ``~/tarantool``, the principal steps are:"
msgstr ""

#: ../dev_guide/building_from_source.rst:191
msgid "# make a subdirectory named `bin`\n"
"mkdir ~/tarantool/bin\n"
"# link python to bin (this may require superuser privilege)\n"
"ln /usr/bin/python ~/tarantool/bin/python\n"
"# get on the test subdirectory\n"
"cd ~/tarantool/test\n"
"# run tests using python\n"
"PATH=~/tarantool/bin:$PATH ./test-run.py"
msgstr ""

#: ../dev_guide/building_from_source.rst:202
msgid "The output should contain reassuring reports, for example:"
msgstr ""

#: ../dev_guide/building_from_source.rst:204
msgid "======================================================================\n"
"TEST                                            RESULT\n"
"------------------------------------------------------------\n"
"box/bad_trigger.test.py                         [ pass ]\n"
"box/call.test.py                                [ pass ]\n"
"box/iproto.test.py                              [ pass ]\n"
"box/xlog.test.py                                [ pass ]\n"
"box/admin.test.lua                              [ pass ]\n"
"box/auth_access.test.lua                        [ pass ]\n"
"... etc."
msgstr ""

#: ../dev_guide/building_from_source.rst:217
msgid "There are more than 70 tests in the suite."
msgstr ""

#: ../dev_guide/building_from_source.rst:219
msgid "To prevent later confusion, clean up what's in the `bin` subdirectory:"
msgstr ""

#: ../dev_guide/building_from_source.rst:222
msgid "rm ~/tarantool/bin/python\n"
"rmdir ~/tarantool/bin"
msgstr ""

#: ../dev_guide/building_from_source.rst:227
msgid "Make an rpm. |br| This step is optional. It's only for people who want to redistribute Tarantool. Package maintainers who want to build with rpmbuild should consult the rpm-build instructions for the appropriate platform."
msgstr ""

#: ../dev_guide/building_from_source.rst:231
msgid "This is the end of the list of steps to take for source downloads."
msgstr ""

#: ../dev_guide/building_from_source.rst:233
msgid "For your added convenience, github.com has README files with example scripts: |br| `README.CentOS <https://github.com/tarantool/tarantool/blob/master/README.CentOS>`_ for CentOS 5.8, |br| `README.FreeBSD <https://github.com/tarantool/tarantool/blob/master/README.FreeBSD>`_ for FreeBSD 10.1, |br| `README.MacOSX <https://github.com/tarantool/tarantool/blob/master/README.MacOSX>`_ for Mac OS X `El Capitan`, |br| `README.md <https://github.com/tarantool/tarantool/blob/master/README.md>`_ for generic GNU/Linux. |br| These example scripts assume that the intent is to download from the master branch, build the server (but not the documentation), and run tests after build."
msgstr ""

#: ../dev_guide/building_from_source.rst:241
msgid "The python connector can be installed with ``sudo easy_install pip`` and ``sudo pip install tarantool``."
msgstr ""

#: ../dev_guide/c_style_guide.rst:19
msgid "C Style Guide"
msgstr ""

#: ../dev_guide/c_style_guide.rst:21
msgid "The project's coding style is based on a version of the Linux kernel coding style."
msgstr ""

#: ../dev_guide/c_style_guide.rst:23
msgid "The latest version of the Linux style can be found at: http://www.kernel.org/doc/Documentation/CodingStyle"
msgstr ""

#: ../dev_guide/c_style_guide.rst:26
msgid "Since it is open for changes, the version of style that we follow, one from 2007-July-13, will be also copied later in this document."
msgstr ""

#: ../dev_guide/c_style_guide.rst:29
msgid "There are a few additional guidelines, either unique to Tarantool or deviating from the Kernel guidelines."
msgstr ""

#: ../dev_guide/c_style_guide.rst:32
msgid "Chapters 10 \"Kconfig configuration files\", 11 \"Data structures\", 13 \"Printing kernel messages\", 14 \"Allocating memory\" and 17 \"Don't re-invent the kernel macros\" do not apply, since they are specific to Linux kernel programming environment."
msgstr ""

#: ../dev_guide/c_style_guide.rst:37
msgid "The rest of Linux Kernel Coding Style is amended as follows:"
msgstr ""

#: ../dev_guide/c_style_guide.rst:41
msgid "General guidelines"
msgstr ""

#: ../dev_guide/c_style_guide.rst:43
msgid "We use Git for revision control. The latest development is happening in the 'master' branch. Our git repository is hosted on github, and can be checked out with git clone git://github.com/tarantool/tarantool.git # anonymous read-only access"
msgstr ""

#: ../dev_guide/c_style_guide.rst:47
msgid "If you have any questions about Tarantool internals, please post them on the developer discussion list, https://groups.google.com/forum/#!forum/tarantool. However, please be warned: Launchpad silently deletes posts from non-subscribed members, thus please be sure to have subscribed to the list prior to posting. Additionally, some engineers are always present on #tarantool channel on irc.freenode.net."
msgstr ""

#: ../dev_guide/c_style_guide.rst:55
msgid "Commenting style"
msgstr ""

#: ../dev_guide/c_style_guide.rst:57
msgid "Use Doxygen comment format, Javadoc flavor, i.e. `@tag` rather than `\\tag`. The main tags in use are @param, @retval, @return, @see, @note and @todo."
msgstr ""

#: ../dev_guide/c_style_guide.rst:60
msgid "Every function, except perhaps a very short and obvious one, should have a comment. A sample function comment may look like below:"
msgstr ""

#: ../dev_guide/c_style_guide.rst:63
msgid "/** Write all data to a descriptor.\n"
"*\n"
"* This function is equivalent to 'write', except it would ensure\n"
"* that all data is written to the file unless a non-ignorable\n"
"* error occurs.\n"
"*\n"
"* @retval 0  Success\n"
"*\n"
"* @reval  1  An error occurred (not EINTR)\n"
"* /\n"
"static int\n"
"write_all(int fd, void \\*data, size_t len)"
msgstr ""

#: ../dev_guide/c_style_guide.rst:78
msgid "Public structures and important structure members should be commented as well."
msgstr ""

#: ../dev_guide/c_style_guide.rst:82
msgid "Header files"
msgstr ""

#: ../dev_guide/c_style_guide.rst:84
msgid "Use header guards. Put the header guard in the first line in the header, before the copyright or declarations. Use all-uppercase name for the header guard. Derive the header guard name from the file name, and append _INCLUDED to get a macro name. For example, core/log_io.h -> CORE_LOG_IO_H_INCLUDED. In .c (implementation) file, include the respective declaration header before all other headers, to ensure that the header is self- sufficient. Header \"header.h\" is self-sufficient if the following compiles without errors:"
msgstr ""

#: ../dev_guide/c_style_guide.rst:92
msgid "#include \"header.h\""
msgstr ""

#: ../dev_guide/c_style_guide.rst:98
msgid "Allocating memory"
msgstr ""

#: ../dev_guide/c_style_guide.rst:100
msgid "Prefer the supplied slab (salloc) and pool (palloc) allocators to malloc()/free() for any performance-intensive or large  memory allocations. Repetitive use of malloc()/free() can lead to memory fragmentation and should therefore be avoided."
msgstr ""

#: ../dev_guide/c_style_guide.rst:104
msgid "Always free all allocated memory, even allocated  at start-up. We aim at being valgrind leak-check clean, and in most cases it's just as easy to free() the allocated memory as it is to write a valgrind suppression. Freeing all allocated memory is also dynamic-load friendly: assuming a plug-in can be dynamically loaded and unloaded multiple times, reload should not lead to a memory leak."
msgstr ""

#: ../dev_guide/c_style_guide.rst:112
msgid "Other"
msgstr ""

#: ../dev_guide/c_style_guide.rst:114
msgid "Select GNU C99 extensions are acceptable. It's OK to mix declarations and statements, use true and false."
msgstr ""

#: ../dev_guide/c_style_guide.rst:117
msgid "The not-so-current list of all GCC C extensions can be found at: http://gcc.gnu.org/onlinedocs/gcc-4.3.5/gcc/C-Extensions.html"
msgstr ""

#: ../dev_guide/c_style_guide.rst:122
msgid "Linux kernel coding style"
msgstr ""

#: ../dev_guide/c_style_guide.rst:124
msgid "This is a short document describing the preferred coding style for the linux kernel.  Coding style is very personal, and I won't _force_ my views on anybody, but this is what goes for anything that I have to be able to maintain, and I'd prefer it for most other things too.  Please at least consider the points made here."
msgstr ""

#: ../dev_guide/c_style_guide.rst:130
msgid "First off, I'd suggest printing out a copy of the GNU coding standards, and NOT read it.  Burn them, it's a great symbolic gesture."
msgstr ""

#: ../dev_guide/c_style_guide.rst:133
msgid "Anyway, here goes:"
msgstr ""

#: ../dev_guide/c_style_guide.rst:137
msgid "Chapter 1: Indentation"
msgstr ""

#: ../dev_guide/c_style_guide.rst:139
msgid "Tabs are 8 characters, and thus indentations are also 8 characters. There are heretic movements that try to make indentations 4 (or even 2!) characters deep, and that is akin to trying to define the value of PI to be 3."
msgstr ""

#: ../dev_guide/c_style_guide.rst:144
msgid "Rationale: The whole idea behind indentation is to clearly define where a block of control starts and ends.  Especially when you've been looking at your screen for 20 straight hours, you'll find it a lot easier to see how the indentation works if you have large indentations."
msgstr ""

#: ../dev_guide/c_style_guide.rst:149
msgid "Now, some people will claim that having 8-character indentations makes the code move too far to the right, and makes it hard to read on a 80-character terminal screen.  The answer to that is that if you need more than 3 levels of indentation, you're screwed anyway, and should fix your program."
msgstr ""

#: ../dev_guide/c_style_guide.rst:155
msgid "In short, 8-char indents make things easier to read, and have the added benefit of warning you when you're nesting your functions too deep. Heed that warning."
msgstr ""

#: ../dev_guide/c_style_guide.rst:159
msgid "The preferred way to ease multiple indentation levels in a switch statement is to align the \"switch\" and its subordinate \"case\" labels in the same column instead of \"double-indenting\" the \"case\" labels. e.g.:"
msgstr ""

#: ../dev_guide/c_style_guide.rst:163
msgid "switch (suffix) {\n"
"case 'G':\n"
"case 'g':\n"
"    mem <<= 30;\n"
"    break;\n"
"case 'M':\n"
"case 'm':\n"
"    mem <<= 20;\n"
"    break;\n"
"case 'K':\n"
"case 'k':\n"
"    mem <<= 10;\n"
"    /* fall through */\n"
"default:\n"
"    break;\n"
"}"
msgstr ""

#: ../dev_guide/c_style_guide.rst:183
msgid "Don't put multiple statements on a single line unless you have something to hide:"
msgstr ""

#: ../dev_guide/c_style_guide.rst:186
msgid "if (condition) do_this;\n"
"  do_something_everytime;"
msgstr ""

#: ../dev_guide/c_style_guide.rst:191
msgid "Don't put multiple assignments on a single line either. Kernel coding style is super simple. Avoid tricky expressions."
msgstr ""

#: ../dev_guide/c_style_guide.rst:194
msgid "Outside of comments, documentation and except in Kconfig, spaces are never used for indentation, and the above example is deliberately broken."
msgstr ""

#: ../dev_guide/c_style_guide.rst:197
msgid "Get a decent editor and don't leave whitespace at the end of lines."
msgstr ""

#: ../dev_guide/c_style_guide.rst:202
msgid "Chapter 2: Breaking long lines and strings"
msgstr ""

#: ../dev_guide/c_style_guide.rst:204
msgid "Coding style is all about readability and maintainability using commonly available tools."
msgstr ""

#: ../dev_guide/c_style_guide.rst:207
msgid "The limit on the length of lines is 80 columns and this is a strongly preferred limit."
msgstr ""

#: ../dev_guide/c_style_guide.rst:210
msgid "Statements longer than 80 columns will be broken into sensible chunks. Descendants are always substantially shorter than the parent and are placed substantially to the right. The same applies to function headers with a long argument list. Long strings are as well broken into shorter strings. The only exception to this is where exceeding 80 columns significantly increases readability and does not hide information."
msgstr ""

#: ../dev_guide/c_style_guide.rst:217
msgid "void fun(int a, int b, int c)\n"
"{\n"
"    if (condition)\n"
"        printk(KERN_WARNING \"Warning this is a long printk with \"\n"
"                        \"3 parameters a: %u b: %u \"\n"
"                        \"c: %u \\n\", a, b, c);\n"
"    else\n"
"        next_statement;\n"
"}"
msgstr ""

#: ../dev_guide/c_style_guide.rst:231
msgid "Chapter 3: Placing Braces and Spaces"
msgstr ""

#: ../dev_guide/c_style_guide.rst:233
msgid "The other issue that always comes up in C styling is the placement of braces.  Unlike the indent size, there are few technical reasons to choose one placement strategy over the other, but the preferred way, as shown to us by the prophets Kernighan and Ritchie, is to put the opening brace last on the line, and put the closing brace first, thusly:"
msgstr ""

#: ../dev_guide/c_style_guide.rst:239
msgid "if (x is true) {\n"
"    we do y\n"
"}"
msgstr ""

#: ../dev_guide/c_style_guide.rst:245
msgid "This applies to all non-function statement blocks (if, switch, for, while, do). e.g.:"
msgstr ""

#: ../dev_guide/c_style_guide.rst:248
msgid "switch (action) {\n"
"case KOBJ_ADD:\n"
"    return \"add\";\n"
"case KOBJ_REMOVE:\n"
"    return \"remove\";\n"
"case KOBJ_CHANGE:\n"
"    return \"change\";\n"
"default:\n"
"    return NULL;\n"
"}"
msgstr ""

#: ../dev_guide/c_style_guide.rst:261
msgid "However, there is one special case, namely functions: they have the opening brace at the beginning of the next line, thus:"
msgstr ""

#: ../dev_guide/c_style_guide.rst:264
msgid "int function(int x)\n"
"{\n"
"    body of function\n"
"}"
msgstr ""

#: ../dev_guide/c_style_guide.rst:271
msgid "Heretic people all over the world have claimed that this inconsistency is ...  well ...  inconsistent, but all right-thinking people know that (a) K&R are _right_ and (b) K&R are right.  Besides, functions are special anyway (you can't nest them in C)."
msgstr ""

#: ../dev_guide/c_style_guide.rst:276
msgid "Note that the closing brace is empty on a line of its own, _except_ in the cases where it is followed by a continuation of the same statement, ie a \"while\" in a do-statement or an \"else\" in an if-statement, like this:"
msgstr ""

#: ../dev_guide/c_style_guide.rst:281
msgid "do {\n"
"    body of do-loop\n"
"} while (condition);"
msgstr ""

#: ../dev_guide/c_style_guide.rst:287
msgid "and"
msgstr ""

#: ../dev_guide/c_style_guide.rst:289
msgid "if (x == y) {\n"
"    ..\n"
"} else if (x > y) {\n"
"    ...\n"
"} else {\n"
"    ....\n"
"}"
msgstr ""

#: ../dev_guide/c_style_guide.rst:299
msgid "Rationale: K&R."
msgstr ""

#: ../dev_guide/c_style_guide.rst:301
msgid "Also, note that this brace-placement also minimizes the number of empty (or almost empty) lines, without any loss of readability.  Thus, as the supply of new-lines on your screen is not a renewable resource (think 25-line terminal screens here), you have more empty lines to put comments on."
msgstr ""

#: ../dev_guide/c_style_guide.rst:307
msgid "Do not unnecessarily use braces where a single statement will do."
msgstr ""

#: ../dev_guide/c_style_guide.rst:309
msgid "if (condition)\n"
"    action();"
msgstr ""

#: ../dev_guide/c_style_guide.rst:314
msgid "This does not apply if one branch of a conditional statement is a single statement. Use braces in both branches."
msgstr ""

#: ../dev_guide/c_style_guide.rst:317
msgid "if (condition) {\n"
"    do_this();\n"
"    do_that();\n"
"} else {\n"
"    otherwise();\n"
"}"
msgstr ""

#: ../dev_guide/c_style_guide.rst:328
msgid "Chapter 3.1:  Spaces"
msgstr ""

#: ../dev_guide/c_style_guide.rst:330
msgid "Linux kernel style for use of spaces depends (mostly) on function-versus-keyword usage.  Use a space after (most) keywords.  The notable exceptions are sizeof, typeof, alignof, and __attribute__, which look somewhat like functions (and are usually used with parentheses in Linux, although they are not required in the language, as in: \"sizeof info\" after \"struct fileinfo info;\" is declared)."
msgstr ""

#: ../dev_guide/c_style_guide.rst:337
msgid "So use a space after these keywords: if, switch, case, for, do, while but not with sizeof, typeof, alignof, or __attribute__.  E.g.,"
msgstr ""

#: ../dev_guide/c_style_guide.rst:340
msgid "s = sizeof(struct file);"
msgstr ""

#: ../dev_guide/c_style_guide.rst:344
msgid "Do not add spaces around (inside) parenthesized expressions. This example is **bad**:"
msgstr ""

#: ../dev_guide/c_style_guide.rst:347
msgid "s = sizeof( struct file );"
msgstr ""

#: ../dev_guide/c_style_guide.rst:351
msgid "When declaring pointer data or a function that returns a pointer type, the preferred use of '*' is adjacent to the data name or function name and not adjacent to the type name.  Examples:"
msgstr ""

#: ../dev_guide/c_style_guide.rst:355
msgid "char *linux_banner;\n"
"unsigned long long memparse(char *ptr, char **retptr);\n"
"char *match_strdup(substring_t *s);"
msgstr ""

#: ../dev_guide/c_style_guide.rst:361
msgid "Use one space around (on each side of) most binary and ternary operators, such as any of these:"
msgstr ""

#: ../dev_guide/c_style_guide.rst:364
msgid "=  +  -  <  >  *  /  %  |  &  ^  <=  >=  ==  !=  ?  :"
msgstr ""

#: ../dev_guide/c_style_guide.rst:366
msgid "but no space after unary operators:"
msgstr ""

#: ../dev_guide/c_style_guide.rst:368
msgid "&  *  +  -  ~  !  sizeof  typeof  alignof  __attribute__  defined"
msgstr ""

#: ../dev_guide/c_style_guide.rst:370
msgid "no space before the postfix increment & decrement unary operators:"
msgstr ""

#: ../dev_guide/c_style_guide.rst:372
#: ../dev_guide/c_style_guide.rst:376
msgid "++  --"
msgstr ""

#: ../dev_guide/c_style_guide.rst:374
msgid "no space after the prefix increment & decrement unary operators:"
msgstr ""

#: ../dev_guide/c_style_guide.rst:378
msgid "and no space around the '.' and \"->\" structure member operators."
msgstr ""

#: ../dev_guide/c_style_guide.rst:380
msgid "Do not leave trailing whitespace at the ends of lines.  Some editors with \"smart\" indentation will insert whitespace at the beginning of new lines as appropriate, so you can start typing the next line of code right away. However, some such editors do not remove the whitespace if you end up not putting a line of code there, such as if you leave a blank line.  As a result, you end up with lines containing trailing whitespace."
msgstr ""

#: ../dev_guide/c_style_guide.rst:387
msgid "Git will warn you about patches that introduce trailing whitespace, and can optionally strip the trailing whitespace for you; however, if applying a series of patches, this may make later patches in the series fail by changing their context lines."
msgstr ""

#: ../dev_guide/c_style_guide.rst:395
msgid "Chapter 4: Naming"
msgstr ""

#: ../dev_guide/c_style_guide.rst:397
msgid "C is a Spartan language, and so should your naming be.  Unlike Modula-2 and Pascal programmers, C programmers do not use cute names like ThisVariableIsATemporaryCounter.  A C programmer would call that variable \"tmp\", which is much easier to write, and not the least more difficult to understand."
msgstr ""

#: ../dev_guide/c_style_guide.rst:403
msgid "HOWEVER, while mixed-case names are frowned upon, descriptive names for global variables are a must.  To call a global function \"foo\" is a shooting offense."
msgstr ""

#: ../dev_guide/c_style_guide.rst:407
msgid "GLOBAL variables (to be used only if you _really_ need them) need to have descriptive names, as do global functions.  If you have a function that counts the number of active users, you should call that \"count_active_users()\" or similar, you should _not_ call it \"cntusr()\"."
msgstr ""

#: ../dev_guide/c_style_guide.rst:412
msgid "Encoding the type of a function into the name (so-called Hungarian notation) is brain damaged - the compiler knows the types anyway and can check those, and it only confuses the programmer.  No wonder MicroSoft makes buggy programs."
msgstr ""

#: ../dev_guide/c_style_guide.rst:417
msgid "LOCAL variable names should be short, and to the point.  If you have some random integer loop counter, it should probably be called \"i\". Calling it \"loop_counter\" is non-productive, if there is no chance of it being mis-understood.  Similarly, \"tmp\" can be just about any type of variable that is used to hold a temporary value."
msgstr ""

#: ../dev_guide/c_style_guide.rst:423
msgid "If you are afraid to mix up your local variable names, you have another problem, which is called the function-growth-hormone-imbalance syndrome. See chapter 6 (Functions)."
msgstr ""

#: ../dev_guide/c_style_guide.rst:430
msgid "Chapter 5: Typedefs"
msgstr ""

#: ../dev_guide/c_style_guide.rst:432
msgid "Please don't use things like \"vps_t\"."
msgstr ""

#: ../dev_guide/c_style_guide.rst:434
msgid "It's a _mistake_ to use typedef for structures and pointers. When you see a"
msgstr ""

#: ../dev_guide/c_style_guide.rst:436
msgid "vps_t a;"
msgstr ""

#: ../dev_guide/c_style_guide.rst:440
msgid "in the source, what does it mean?"
msgstr ""

#: ../dev_guide/c_style_guide.rst:442
msgid "In contrast, if it says"
msgstr ""

#: ../dev_guide/c_style_guide.rst:444
msgid "struct virtual_container *a;"
msgstr ""

#: ../dev_guide/c_style_guide.rst:448
msgid "you can actually tell what \"a\" is."
msgstr ""

#: ../dev_guide/c_style_guide.rst:450
msgid "Lots of people think that typedefs \"help readability\". Not so. They are useful only for:"
msgstr ""

#: ../dev_guide/c_style_guide.rst:453
msgid "totally opaque objects (where the typedef is actively used to _hide_ what the object is)."
msgstr ""

#: ../dev_guide/c_style_guide.rst:456
msgid "Example: \"pte_t\" etc. opaque objects that you can only access using the proper accessor functions."
msgstr ""

#: ../dev_guide/c_style_guide.rst:459
msgid "NOTE! Opaqueness and \"accessor functions\" are not good in themselves. The reason we have them for things like pte_t etc. is that there really is absolutely _zero_ portably accessible information there."
msgstr ""

#: ../dev_guide/c_style_guide.rst:463
msgid "Clear integer types, where the abstraction _helps_ avoid confusion whether it is \"int\" or \"long\"."
msgstr ""

#: ../dev_guide/c_style_guide.rst:466
msgid "u8/u16/u32 are perfectly fine typedefs, although they fit into category (d) better than here."
msgstr ""

#: ../dev_guide/c_style_guide.rst:469
msgid "NOTE! Again - there needs to be a _reason_ for this. If something is \"unsigned long\", then there's no reason to do"
msgstr ""

#: ../dev_guide/c_style_guide.rst:472
msgid "typedef unsigned long myflags_t;"
msgstr ""

#: ../dev_guide/c_style_guide.rst:476
msgid "but if there is a clear reason for why it under certain circumstances might be an \"unsigned int\" and under other configurations might be \"unsigned long\", then by all means go ahead and use a typedef."
msgstr ""

#: ../dev_guide/c_style_guide.rst:480
msgid "when you use sparse to literally create a _new_ type for type-checking."
msgstr ""

#: ../dev_guide/c_style_guide.rst:483
msgid "New types which are identical to standard C99 types, in certain exceptional circumstances."
msgstr ""

#: ../dev_guide/c_style_guide.rst:486
msgid "Although it would only take a short amount of time for the eyes and brain to become accustomed to the standard types like 'uint32_t', some people object to their use anyway."
msgstr ""

#: ../dev_guide/c_style_guide.rst:490
msgid "Therefore, the Linux-specific 'u8/u16/u32/u64' types and their signed equivalents which are identical to standard types are permitted -- although they are not mandatory in new code of your own."
msgstr ""

#: ../dev_guide/c_style_guide.rst:495
msgid "When editing existing code which already uses one or the other set of types, you should conform to the existing choices in that code."
msgstr ""

#: ../dev_guide/c_style_guide.rst:498
msgid "Types safe for use in userspace."
msgstr ""

#: ../dev_guide/c_style_guide.rst:500
msgid "In certain structures which are visible to userspace, we cannot require C99 types and cannot use the 'u32' form above. Thus, we use __u32 and similar types in all structures which are shared with userspace."
msgstr ""

#: ../dev_guide/c_style_guide.rst:505
msgid "Maybe there are other cases too, but the rule should basically be to NEVER EVER use a typedef unless you can clearly match one of those rules."
msgstr ""

#: ../dev_guide/c_style_guide.rst:508
msgid "In general, a pointer, or a struct that has elements that can reasonably be directly accessed should **never** be a typedef."
msgstr ""

#: ../dev_guide/c_style_guide.rst:514
msgid "Chapter 6: Functions"
msgstr ""

#: ../dev_guide/c_style_guide.rst:516
msgid "Functions should be short and sweet, and do just one thing.  They should fit on one or two screenfuls of text (the ISO/ANSI screen size is 80x24, as we all know), and do one thing and do that well."
msgstr ""

#: ../dev_guide/c_style_guide.rst:520
msgid "The maximum length of a function is inversely proportional to the complexity and indentation level of that function.  So, if you have a conceptually simple function that is just one long (but simple) case-statement, where you have to do lots of small things for a lot of different cases, it's OK to have a longer function."
msgstr ""

#: ../dev_guide/c_style_guide.rst:526
msgid "However, if you have a complex function, and you suspect that a less-than-gifted first-year high-school student might not even understand what the function is all about, you should adhere to the maximum limits all the more closely.  Use helper functions with descriptive names (you can ask the compiler to in-line them if you think it's performance-critical, and it will probably do a better job of it than you would have done)."
msgstr ""

#: ../dev_guide/c_style_guide.rst:534
msgid "Another measure of the function is the number of local variables.  They shouldn't exceed 5-10, or you're doing something wrong.  Re-think the function, and split it into smaller pieces.  A human brain can generally easily keep track of about 7 different things, anything more and it gets confu/sed.  You know you're brilliant, but maybe you'd like to understand what you did 2 weeks from now."
msgstr ""

#: ../dev_guide/c_style_guide.rst:541
msgid "In source files, separate functions with one blank line.  If the function is exported, the EXPORT* macro for it should follow immediately after the closing function brace line.  E.g.:"
msgstr ""

#: ../dev_guide/c_style_guide.rst:545
msgid "int system_is_up(void)\n"
"{\n"
"    return system_state == SYSTEM_RUNNING;\n"
"}\n"
"EXPORT_SYMBOL(system_is_up);"
msgstr ""

#: ../dev_guide/c_style_guide.rst:553
msgid "In function prototypes, include parameter names with their data types. Although this is not required by the C language, it is preferred in Linux because it is a simple way to add valuable information for the reader."
msgstr ""

#: ../dev_guide/c_style_guide.rst:559
msgid "Chapter 7: Centralized exiting of functions"
msgstr ""

#: ../dev_guide/c_style_guide.rst:561
msgid "Albeit deprecated by some people, the equivalent of the goto statement is used frequently by compilers in form of the unconditional jump instruction."
msgstr ""

#: ../dev_guide/c_style_guide.rst:564
msgid "The goto statement comes in handy when a function exits from multiple locations and some common work such as cleanup has to be done."
msgstr ""

#: ../dev_guide/c_style_guide.rst:567
msgid "The rationale is:"
msgstr ""

#: ../dev_guide/c_style_guide.rst:569
msgid "unconditional statements are easier to understand and follow"
msgstr ""

#: ../dev_guide/c_style_guide.rst:570
msgid "nesting is reduced"
msgstr ""

#: ../dev_guide/c_style_guide.rst:571
msgid "errors by not updating individual exit points when making modifications are prevented"
msgstr ""

#: ../dev_guide/c_style_guide.rst:573
msgid "saves the compiler work to optimize redundant code away ;)"
msgstr ""

#: ../dev_guide/c_style_guide.rst:575
msgid "int fun(int a)\n"
"{\n"
"    int result = 0;\n"
"    char *buffer = kmalloc(SIZE);\n"
"\n"
"    if (buffer == NULL)\n"
"        return -ENOMEM;\n"
"\n"
"    if (condition1) {\n"
"        while (loop1) {\n"
"            ...\n"
"        }\n"
"        result = 1;\n"
"        goto out;\n"
"    }\n"
"    ...\n"
"out:\n"
"    kfree(buffer);\n"
"    return result;\n"
"}\n"
"\n"
"    Chapter 8: Commenting"
msgstr ""

#: ../dev_guide/c_style_guide.rst:600
msgid "Comments are good, but there is also a danger of over-commenting. NEVER try to explain HOW your code works in a comment: it's much better to write the code so that the _working_ is obvious, and it's a waste of time to explain badly written code."
msgstr ""

#: ../dev_guide/c_style_guide.rst:605
msgid "Generally, you want your comments to tell WHAT your code does, not HOW. Also, try to avoid putting comments inside a function body: if the function is so complex that you need to separately comment parts of it, you should probably go back to chapter 6 for a while.  You can make small comments to note or warn about something particularly clever (or ugly), but try to avoid excess.  Instead, put the comments at the head of the function, telling people what it does, and possibly WHY it does it."
msgstr ""

#: ../dev_guide/c_style_guide.rst:614
msgid "When commenting the kernel API functions, please use the kernel-doc format. See the files Documentation/kernel-doc-nano-HOWTO.txt and scripts/kernel-doc for details."
msgstr ""

#: ../dev_guide/c_style_guide.rst:618
msgid "Linux style for comments is the C89 `\"/\\* ... \\*/\"` style. Don't use C99-style `\"// ...\"` comments."
msgstr ""

#: ../dev_guide/c_style_guide.rst:621
msgid "The preferred style for long (multi-line) comments is:"
msgstr ""

#: ../dev_guide/c_style_guide.rst:623
msgid "/*\n"
" * This is the preferred style for multi-line\n"
" * comments in the Linux kernel source code.\n"
" * Please use it consistently.\n"
" *\n"
" * Description:  A column of asterisks on the left side,\n"
" * with beginning and ending almost-blank lines.\n"
" */"
msgstr ""

#: ../dev_guide/c_style_guide.rst:634
msgid "It's also important to comment data, whether they are basic types or derived types.  To this end, use just one data declaration per line (no commas for multiple data declarations).  This leaves you room for a small comment on each item, explaining its use."
msgstr ""

#: ../dev_guide/c_style_guide.rst:641
msgid "Chapter 9: You've made a mess of it"
msgstr ""

#: ../dev_guide/c_style_guide.rst:643
msgid "That's OK, we all do.  You've probably been told by your long-time Unix user helper that \"GNU emacs\" automatically formats the C sources for you, and you've noticed that yes, it does do that, but the defaults it uses are less than desirable (in fact, they are worse than random typing - an infinite number of monkeys typing into GNU emacs would never make a good program)."
msgstr ""

#: ../dev_guide/c_style_guide.rst:650
msgid "So, you can either get rid of GNU emacs, or change it to use saner values.  To do the latter, you can stick the following in your .emacs file:"
msgstr ""

#: ../dev_guide/c_style_guide.rst:653
msgid "(defun c-lineup-arglist-tabs-only (ignored)\n"
"\"Line up argument lists by tabs, not spaces\"\n"
"(let* ((anchor (c-langelem-pos c-syntactic-element))\n"
"    (column (c-langelem-2nd-pos c-syntactic-element))\n"
"    (offset (- (1+ column) anchor))\n"
"    (steps (floor offset c-basic-offset)))\n"
"    (* (max steps 1)\n"
"    c-basic-offset)))\n"
"\n"
"(add-hook 'c-mode-common-hook\n"
"        (lambda ()\n"
"            ;; Add kernel style\n"
"            (c-add-style\n"
"            \"linux-tabs-only\"\n"
"            '(\"linux\" (c-offsets-alist\n"
"                        (arglist-cont-nonempty\n"
"                        c-lineup-gcc-asm-reg\n"
"                        c-lineup-arglist-tabs-only))))))\n"
"\n"
"(add-hook 'c-mode-hook\n"
"        (lambda ()\n"
"            (let ((filename (buffer-file-name)))\n"
"            ;; Enable kernel mode for the appropriate files\n"
"            (when (and filename\n"
"                        (string-match (expand-file-name \"~/src/linux-trees\")\n"
"                                    filename))\n"
"                (setq indent-tabs-mode t)\n"
"                (c-set-style \"linux-tabs-only\")))))"
msgstr ""

#: ../dev_guide/c_style_guide.rst:684
msgid "This will make emacs go better with the kernel coding style for C files below ~/src/linux-trees."
msgstr ""

#: ../dev_guide/c_style_guide.rst:687
msgid "But even if you fail in getting emacs to do sane formatting, not everything is lost: use \"indent\"."
msgstr ""

#: ../dev_guide/c_style_guide.rst:690
msgid "Now, again, GNU indent has the same brain-dead settings that GNU emacs has, which is why you need to give it a few command line options. However, that's not too bad, because even the makers of GNU indent recognize the authority of K&R (the GNU people aren't evil, they are just severely misguided in this matter), so you just give indent the options \"-kr -i8\" (stands for \"K&R, 8 character indents\"), or use \"scripts/Lindent\", which indents in the latest style."
msgstr ""

#: ../dev_guide/c_style_guide.rst:698
msgid "\"indent\" has a lot of options, and especially when it comes to comment re-formatting you may want to take a look at the man page.  But remember: \"indent\" is not a fix for bad programming."
msgstr ""

#: ../dev_guide/c_style_guide.rst:705
msgid "Chapter 10: Kconfig configuration files"
msgstr ""

#: ../dev_guide/c_style_guide.rst:707
msgid "For all of the Kconfig* configuration files throughout the source tree, the indentation is somewhat different.  Lines under a \"config\" definition are indented with one tab, while help text is indented an additional two spaces.  Example:"
msgstr ""

#: ../dev_guide/c_style_guide.rst:712
msgid "config AUDIT\n"
"    bool \"Auditing support\"\n"
"    depends on NET\n"
"    help\n"
"    Enable auditing infrastructure that can be used with another\n"
"    kernel subsystem, such as SELinux (which requires this for\n"
"    logging of avc messages output).  Does not do system-call\n"
"    auditing without CONFIG_AUDITSYSCALL."
msgstr ""

#: ../dev_guide/c_style_guide.rst:723
msgid "Features that might still be considered unstable should be defined as dependent on \"EXPERIMENTAL\":"
msgstr ""

#: ../dev_guide/c_style_guide.rst:726
msgid "config SLUB\n"
"    depends on EXPERIMENTAL && !ARCH_USES_SLAB_PAGE_STRUCT\n"
"    bool \"SLUB (Unqueued Allocator)\"\n"
"    ..."
msgstr ""

#: ../dev_guide/c_style_guide.rst:733
msgid "while seriously dangerous features (such as write support for certain filesystems) should advertise this prominently in their prompt string:"
msgstr ""

#: ../dev_guide/c_style_guide.rst:736
msgid "config ADFS_FS_RW\n"
"    bool \"ADFS write support (DANGEROUS)\"\n"
"    depends on ADFS_FS\n"
"    ..."
msgstr ""

#: ../dev_guide/c_style_guide.rst:743
msgid "For full documentation on the configuration files, see the file Documentation/kbuild/kconfig-language.txt."
msgstr ""

#: ../dev_guide/c_style_guide.rst:749
msgid "Chapter 11: Data structures"
msgstr ""

#: ../dev_guide/c_style_guide.rst:751
msgid "Data structures that have visibility outside the single-threaded environment they are created and destroyed in should always have reference counts.  In the kernel, garbage collection doesn't exist (and outside the kernel garbage collection is slow and inefficient), which means that you absolutely _have_ to reference count all your uses."
msgstr ""

#: ../dev_guide/c_style_guide.rst:757
msgid "Reference counting means that you can avoid locking, and allows multiple users to have access to the data structure in parallel - and not having to worry about the structure suddenly going away from under them just because they slept or did something else for a while."
msgstr ""

#: ../dev_guide/c_style_guide.rst:762
msgid "Note that locking is _not_ a replacement for reference counting. Locking is used to keep data structures coherent, while reference counting is a memory management technique.  Usually both are needed, and they are not to be confused with each other."
msgstr ""

#: ../dev_guide/c_style_guide.rst:767
msgid "Many data structures can indeed have two levels of reference counting, when there are users of different \"classes\".  The subclass count counts the number of subclass users, and decrements the global count just once when the subclass count goes to zero."
msgstr ""

#: ../dev_guide/c_style_guide.rst:772
msgid "Examples of this kind of \"multi-level-reference-counting\" can be found in memory management (\"struct mm_struct\": mm_users and mm_count), and in filesystem code (\"struct super_block\": s_count and s_active)."
msgstr ""

#: ../dev_guide/c_style_guide.rst:776
msgid "Remember: if another thread can find your data structure, and you don't have a reference count on it, you almost certainly have a bug."
msgstr ""

#: ../dev_guide/c_style_guide.rst:781
msgid "Chapter 12: Macros, Enums and RTL"
msgstr ""

#: ../dev_guide/c_style_guide.rst:783
msgid "Names of macros defining constants and labels in enums are capitalized."
msgstr ""

#: ../dev_guide/c_style_guide.rst:785
msgid "#define CONSTANT 0x12345"
msgstr ""

#: ../dev_guide/c_style_guide.rst:789
msgid "Enums are preferred when defining several related constants."
msgstr ""

#: ../dev_guide/c_style_guide.rst:791
msgid "CAPITALIZED macro names are appreciated but macros resembling functions may be named in lower case."
msgstr ""

#: ../dev_guide/c_style_guide.rst:794
msgid "Generally, inline functions are preferable to macros resembling functions."
msgstr ""

#: ../dev_guide/c_style_guide.rst:796
msgid "Macros with multiple statements should be enclosed in a do - while block:"
msgstr ""

#: ../dev_guide/c_style_guide.rst:798
msgid "#define macrofun(a, b, c)   \\\n"
"    do {                    \\\n"
"        if (a == 5)         \\\n"
"            do_this(b, c);  \\\n"
"    } while (0)"
msgstr ""

#: ../dev_guide/c_style_guide.rst:806
msgid "Things to avoid when using macros:"
msgstr ""

#: ../dev_guide/c_style_guide.rst:808
msgid "macros that affect control flow:"
msgstr ""

#: ../dev_guide/c_style_guide.rst:810
msgid "#define FOO(x)                  \\\n"
"    do {                        \\\n"
"        if (blah(x) < 0)        \\\n"
"            return -EBUGGERED;  \\\n"
"    } while(0)"
msgstr ""

#: ../dev_guide/c_style_guide.rst:818
msgid "is a _very_ bad idea.  It looks like a function call but exits the \"calling\" function; don't break the internal parsers of those who will read the code."
msgstr ""

#: ../dev_guide/c_style_guide.rst:821
msgid "macros that depend on having a local variable with a magic name:"
msgstr ""

#: ../dev_guide/c_style_guide.rst:823
msgid "#define FOO(val) bar(index, val)"
msgstr ""

#: ../dev_guide/c_style_guide.rst:827
msgid "might look like a good thing, but it's confusing as hell when one reads the code and it's prone to breakage from seemingly innocent changes."
msgstr ""

#: ../dev_guide/c_style_guide.rst:830
msgid "macros with arguments that are used as l-values: FOO(x) = y; will bite you if somebody e.g. turns FOO into an inline function."
msgstr ""

#: ../dev_guide/c_style_guide.rst:833
msgid "forgetting about precedence: macros defining constants using expressions must enclose the expression in parentheses. Beware of similar issues with macros using parameters."
msgstr ""

#: ../dev_guide/c_style_guide.rst:837
msgid "#define CONSTANT 0x4000\n"
"#define CONSTEXP (CONSTANT | 3)"
msgstr ""

#: ../dev_guide/c_style_guide.rst:842
msgid "The cpp manual deals with macros exhaustively. The gcc internals manual also covers RTL which is used frequently with assembly language in the kernel."
msgstr ""

#: ../dev_guide/c_style_guide.rst:847
msgid "Chapter 13: Printing kernel messages"
msgstr ""

#: ../dev_guide/c_style_guide.rst:849
msgid "Kernel developers like to be seen as literate. Do mind the spelling of kernel messages to make a good impression. Do not use crippled words like \"dont\"; use \"do not\" or \"don't\" instead.  Make the messages concise, clear, and unambiguous."
msgstr ""

#: ../dev_guide/c_style_guide.rst:854
msgid "Kernel messages do not have to be terminated with a period."
msgstr ""

#: ../dev_guide/c_style_guide.rst:856
msgid "Printing numbers in parentheses (%d) adds no value and should be avoided."
msgstr ""

#: ../dev_guide/c_style_guide.rst:858
msgid "There are a number of driver model diagnostic macros in <linux/device.h> which you should use to make sure messages are matched to the right device and driver, and are tagged with the right level:  dev_err(), dev_warn(), dev_info(), and so forth.  For messages that aren't associated with a particular device, <linux/kernel.h> defines pr_debug() and pr_info()."
msgstr ""

#: ../dev_guide/c_style_guide.rst:864
msgid "Coming up with good debugging messages can be quite a challenge; and once you have them, they can be a huge help for remote troubleshooting.  Such messages should be compiled out when the DEBUG symbol is not defined (that is, by default they are not included).  When you use dev_dbg() or pr_debug(), that's automatic.  Many subsystems have Kconfig options to turn on -DDEBUG. A related convention uses VERBOSE_DEBUG to add dev_vdbg() messages to the ones already enabled by DEBUG."
msgstr ""

#: ../dev_guide/c_style_guide.rst:874
msgid "Chapter 14: Allocating memory"
msgstr ""

#: ../dev_guide/c_style_guide.rst:876
msgid "The kernel provides the following general purpose memory allocators: kmalloc(), kzalloc(), kcalloc(), and vmalloc().  Please refer to the API documentation for further information about them."
msgstr ""

#: ../dev_guide/c_style_guide.rst:880
msgid "The preferred form for passing a size of a struct is the following:"
msgstr ""

#: ../dev_guide/c_style_guide.rst:882
msgid "p = kmalloc(sizeof(*p), ...);"
msgstr ""

#: ../dev_guide/c_style_guide.rst:886
msgid "The alternative form where struct name is spelled out hurts readability and introduces an opportunity for a bug when the pointer variable type is changed but the corresponding sizeof that is passed to a memory allocator is not."
msgstr ""

#: ../dev_guide/c_style_guide.rst:890
msgid "Casting the return value which is a void pointer is redundant. The conversion from void pointer to any other pointer type is guaranteed by the C programming language."
msgstr ""

#: ../dev_guide/c_style_guide.rst:896
msgid "Chapter 15: The inline disease"
msgstr ""

#: ../dev_guide/c_style_guide.rst:898
msgid "There appears to be a common misperception that gcc has a magic \"make me faster\" speedup option called \"inline\". While the use of inlines can be appropriate (for example as a means of replacing macros, see Chapter 12), it very often is not. Abundant use of the inline keyword leads to a much bigger kernel, which in turn slows the system as a whole down, due to a bigger icache footprint for the CPU and simply because there is less memory available for the pagecache. Just think about it; a pagecache miss causes a disk seek, which easily takes 5 milliseconds. There are a LOT of cpu cycles that can go into these 5 milliseconds."
msgstr ""

#: ../dev_guide/c_style_guide.rst:908
msgid "A reasonable rule of thumb is to not put inline at functions that have more than 3 lines of code in them. An exception to this rule are the cases where a parameter is known to be a compiletime constant, and as a result of this constantness you *know* the compiler will be able to optimize most of your function away at compile time. For a good example of this later case, see the kmalloc() inline function."
msgstr ""

#: ../dev_guide/c_style_guide.rst:915
msgid "Often people argue that adding inline to functions that are static and used only once is always a win since there is no space tradeoff. While this is technically correct, gcc is capable of inlining these automatically without help, and the maintenance issue of removing the inline when a second user appears outweighs the potential value of the hint that tells gcc to do something it would have done anyway."
msgstr ""

#: ../dev_guide/c_style_guide.rst:924
msgid "Chapter 16: Function return values and names"
msgstr ""

#: ../dev_guide/c_style_guide.rst:926
msgid "Functions can return values of many different kinds, and one of the most common is a value indicating whether the function succeeded or failed.  Such a value can be represented as an error-code integer (-Exxx = failure, 0 = success) or a \"succeeded\" boolean (0 = failure, non-zero = success)."
msgstr ""

#: ../dev_guide/c_style_guide.rst:932
msgid "Mixing up these two sorts of representations is a fertile source of difficult-to-find bugs.  If the C language included a strong distinction between integers and booleans then the compiler would find these mistakes for us... but it doesn't.  To help prevent such bugs, always follow this convention:"
msgstr ""

#: ../dev_guide/c_style_guide.rst:940
msgid "If the name of a function is an action or an imperative command,\n"
"the function should return an error-code integer.  If the name\n"
"is a predicate, the function should return a \"succeeded\" boolean."
msgstr ""

#: ../dev_guide/c_style_guide.rst:944
msgid "For example, \"add work\" is a command, and the add_work() function returns 0 for success or -EBUSY for failure.  In the same way, \"PCI device present\" is a predicate, and the pci_dev_present() function returns 1 if it succeeds in finding a matching device or 0 if it doesn't."
msgstr ""

#: ../dev_guide/c_style_guide.rst:949
msgid "All EXPORTed functions must respect this convention, and so should all public functions.  Private (static) functions need not, but it is recommended that they do."
msgstr ""

#: ../dev_guide/c_style_guide.rst:953
msgid "Functions whose return value is the actual result of a computation, rather than an indication of whether the computation succeeded, are not subject to this rule.  Generally they indicate failure by returning some out-of-range result.  Typical examples would be functions that return pointers; they use NULL or the ERR_PTR mechanism to report failure."
msgstr ""

#: ../dev_guide/c_style_guide.rst:962
msgid "Chapter 17:  Don't re-invent the kernel macros"
msgstr ""

#: ../dev_guide/c_style_guide.rst:964
msgid "The header file include/linux/kernel.h contains a number of macros that you should use, rather than explicitly coding some variant of them yourself. For example, if you need to calculate the length of an array, take advantage of the macro"
msgstr ""

#: ../dev_guide/c_style_guide.rst:969
msgid "#define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))"
msgstr ""

#: ../dev_guide/c_style_guide.rst:973
msgid "Similarly, if you need to calculate the size of some structure member, use"
msgstr ""

#: ../dev_guide/c_style_guide.rst:975
msgid "#define FIELD_SIZEOF(t, f) (sizeof(((t*)0)->f))"
msgstr ""

#: ../dev_guide/c_style_guide.rst:979
msgid "There are also min() and max() macros that do strict type checking if you need them.  Feel free to peruse that header file to see what else is already defined that you shouldn't reproduce in your code."
msgstr ""

#: ../dev_guide/c_style_guide.rst:985
msgid "Chapter 18:  Editor modelines and other cruft"
msgstr ""

#: ../dev_guide/c_style_guide.rst:987
msgid "Some editors can interpret configuration information embedded in source files, indicated with special markers.  For example, emacs interprets lines marked like this:"
msgstr ""

#: ../dev_guide/c_style_guide.rst:991
msgid "-*- mode: c -*-"
msgstr ""

#: ../dev_guide/c_style_guide.rst:995
msgid "Or like this:"
msgstr ""

#: ../dev_guide/c_style_guide.rst:997
msgid "/*\n"
"Local Variables:\n"
"compile-command: \"gcc -DMAGIC_DEBUG_FLAG foo.c\"\n"
"End:\n"
"*/"
msgstr ""

#: ../dev_guide/c_style_guide.rst:1005
msgid "Vim interprets markers that look like this:"
msgstr ""

#: ../dev_guide/c_style_guide.rst:1007
msgid "/* vim:set sw=8 noet */"
msgstr ""

#: ../dev_guide/c_style_guide.rst:1011
msgid "Do not include any of these in source files.  People have their own personal editor configurations, and your source files should not override them.  This includes markers for indentation and mode configuration.  People may use their own custom mode, or may have some other magic method for making indentation work correctly."
msgstr ""

#: ../dev_guide/c_style_guide.rst:1019
msgid "Appendix I: References"
msgstr ""

#: ../dev_guide/c_style_guide.rst:1021
msgid "`The C Programming Language, Second Edition <http://cm.bell-labs.com/cm/cs/cbook/>`_ by Brian W. Kernighan and Dennis M. Ritchie. |br| Prentice Hall, Inc., 1988. |br| ISBN 0-13-110362-8 (paperback), 0-13-110370-9 (hardback)."
msgstr ""

#: ../dev_guide/c_style_guide.rst:1026
msgid "`The Practice of Programming <http://cm.bell-labs.com/cm/cs/tpop/>`_ by Brian W. Kernighan and Rob Pike. |br| Addison-Wesley, Inc., 1999. |br| ISBN 0-201-61586-X."
msgstr ""

#: ../dev_guide/c_style_guide.rst:1031
msgid "`GNU manuals <http://www.gnu.org/manual/>`_ - where in compliance with K&R and this text - for **cpp**, **gcc**, **gcc internals** and **indent**"
msgstr ""

#: ../dev_guide/c_style_guide.rst:1034
msgid "`WG14 International standardization workgroup for the programming language C <http://www.open-std.org/JTC1/SC22/WG14/>`_"
msgstr ""

#: ../dev_guide/c_style_guide.rst:1037
msgid "`Kernel CodingStyle, by greg@kroah.com at OLS 2002 <http://www.kroah.com/linux/talks/ols_2002_kernel_codingstyle_talk/html/>`_"
msgstr ""

#: ../dev_guide/developer_guidelines.rst:19
msgid "Developer guidelines"
msgstr ""

#: ../dev_guide/developer_guidelines.rst:23
msgid "How to work on a bug"
msgstr ""

#: ../dev_guide/developer_guidelines.rst:25
msgid "Any defect, even minor, if it changes the user-visible server behavior, needs a bug report. Report a bug at http://github.com/tarantool/tarantool/issues."
msgstr ""

#: ../dev_guide/developer_guidelines.rst:28
msgid "When reporting a bug, try to come up with a test case right away. Set the current maintenance milestone for the bug fix, and specify the series. Assign the bug to yourself. Put the status to 'In progress' Once the patch is ready, put the bug the bug to 'In review' and solicit a review for the fix."
msgstr ""

#: ../dev_guide/developer_guidelines.rst:33
msgid "Once there is a positive code review, push the patch and set the status to 'Closed'"
msgstr ""

#: ../dev_guide/developer_guidelines.rst:35
msgid "Patches for bugs should contain a reference to the respective Launchpad bug page or at least bug id. Each patch should have a test, unless coming up with one is difficult in the current framework, in which case QA should be alerted."
msgstr ""

#: ../dev_guide/developer_guidelines.rst:39
msgid "There are two things you need to do when your patch makes it into the master:"
msgstr ""

#: ../dev_guide/developer_guidelines.rst:41
msgid "put the bug to 'fix committed',"
msgstr ""

#: ../dev_guide/developer_guidelines.rst:42
msgid "delete the remote branch."
msgstr ""

#: ../dev_guide/index.rst:19
msgid "Contributing"
msgstr ""

#: ../dev_guide/intro.rst:19
msgid "What documentation there is"
msgstr ""

#: ../dev_guide/intro.rst:21
msgid "Tarantool documentation consists of:"
msgstr ""

#: ../dev_guide/intro.rst:23
msgid "a user guide"
msgstr ""

#: ../dev_guide/intro.rst:24
msgid "developer guide (you're reading it)"
msgstr ""

#: ../dev_guide/intro.rst:25
msgid "coding style guide for C, Python (for other connectors, we use conventions of the connector programming language community)"
msgstr ""

#: ../dev_guide/python_style_guide.rst:19
msgid "Python Style Guide"
msgstr ""

#: ../dev_guide/python_style_guide.rst:23
msgid "Introduction"
msgstr ""

#: ../dev_guide/python_style_guide.rst:25
msgid "This document gives coding conventions for the Python code comprising the standard library in the main Python distribution.  Please see the companion informational PEP describing style guidelines for the C code in the C implementation of Python [1]_."
msgstr ""

#: ../dev_guide/python_style_guide.rst:30
msgid "This document and PEP 257 (Docstring Conventions) were adapted from Guido's original Python Style Guide essay, with some additions from Barry's style guide [2]_."
msgstr ""

#: ../dev_guide/python_style_guide.rst:37
msgid "A Foolish Consistency is the Hobgoblin of Little Minds"
msgstr ""

#: ../dev_guide/python_style_guide.rst:39
msgid "One of Guido's key insights is that code is read much more often than it is written.  The guidelines provided here are intended to improve the readability of code and make it consistent across the wide spectrum of Python code.  As PEP 20 says, \"Readability counts\"."
msgstr ""

#: ../dev_guide/python_style_guide.rst:44
msgid "A style guide is about consistency.  Consistency with this style guide is important.  Consistency within a project is more important. Consistency within one module or function is the most important."
msgstr ""

#: ../dev_guide/python_style_guide.rst:48
msgid "But most importantly: know when to be inconsistent -- sometimes the style guide just doesn't apply.  When in doubt, use your best judgment.  Look at other examples and decide what looks best.  And don't hesitate to ask!"
msgstr ""

#: ../dev_guide/python_style_guide.rst:53
msgid "Two good reasons to break a particular rule:"
msgstr ""

#: ../dev_guide/python_style_guide.rst:55
msgid "When applying the rule would make the code less readable, even for someone who is used to reading code that follows the rules."
msgstr ""

#: ../dev_guide/python_style_guide.rst:58
msgid "To be consistent with surrounding code that also breaks it (maybe for historic reasons) -- although this is also an opportunity to clean up someone else's mess (in true XP style)."
msgstr ""

#: ../dev_guide/python_style_guide.rst:65
msgid "Code lay-out"
msgstr ""

#: ../dev_guide/python_style_guide.rst:69
msgid "Indentation"
msgstr ""

#: ../dev_guide/python_style_guide.rst:71
msgid "Use 4 spaces per indentation level."
msgstr ""

#: ../dev_guide/python_style_guide.rst:73
msgid "For really old code that you don't want to mess up, you can continue to use 8-space tabs."
msgstr ""

#: ../dev_guide/python_style_guide.rst:76
msgid "Continuation lines should align wrapped elements either vertically using Python's implicit line joining inside parentheses, brackets and braces, or using a hanging indent.  When using a hanging indent the following considerations should be applied; there should be no arguments on the first line and further indentation should be used to clearly distinguish itself as a continuation line."
msgstr ""

#: ../dev_guide/python_style_guide.rst:83
#: ../dev_guide/python_style_guide.rst:340
#: ../dev_guide/python_style_guide.rst:369
#: ../dev_guide/python_style_guide.rst:388
#: ../dev_guide/python_style_guide.rst:401
msgid "Yes::"
msgstr ""

#: ../dev_guide/python_style_guide.rst:85
msgid "# Aligned with opening delimiter\n"
"foo = long_function_name(var_one, var_two,\n"
"                         var_three, var_four)\n"
"\n"
"# More indentation included to distinguish this from the rest.\n"
"def long_function_name(\n"
"        var_one, var_two, var_three,\n"
"        var_four):\n"
"    print(var_one)"
msgstr ""

#: ../dev_guide/python_style_guide.rst:95
#: ../dev_guide/python_style_guide.rst:346
#: ../dev_guide/python_style_guide.rst:377
#: ../dev_guide/python_style_guide.rst:393
msgid "No::"
msgstr ""

#: ../dev_guide/python_style_guide.rst:97
msgid "# Arguments on first line forbidden when not using vertical alignment\n"
"foo = long_function_name(var_one, var_two,\n"
"    var_three, var_four)\n"
"\n"
"# Further indentation required as indentation is not distinguishable\n"
"def long_function_name(\n"
"    var_one, var_two, var_three,\n"
"    var_four):\n"
"    print(var_one)"
msgstr ""

#: ../dev_guide/python_style_guide.rst:107
msgid "Optional::"
msgstr ""

#: ../dev_guide/python_style_guide.rst:109
msgid "# Extra indentation is not necessary.\n"
"foo = long_function_name(\n"
"  var_one, var_two,\n"
"  var_three, var_four)"
msgstr ""

#: ../dev_guide/python_style_guide.rst:114
msgid "The closing brace/bracket/parenthesis on multi-line constructs may either line up under the first non-whitespace character of the last line of list, as in::"
msgstr ""

#: ../dev_guide/python_style_guide.rst:118
msgid "my_list = [\n"
"    1, 2, 3,\n"
"    4, 5, 6,\n"
"    ]\n"
"result = some_function_that_takes_arguments(\n"
"    'a', 'b', 'c',\n"
"    'd', 'e', 'f',\n"
"    )"
msgstr ""

#: ../dev_guide/python_style_guide.rst:127
msgid "or it may be lined up under the first character of the line that starts the multi-line construct, as in::"
msgstr ""

#: ../dev_guide/python_style_guide.rst:130
msgid "my_list = [\n"
"    1, 2, 3,\n"
"    4, 5, 6,\n"
"]\n"
"result = some_function_that_takes_arguments(\n"
"    'a', 'b', 'c',\n"
"    'd', 'e', 'f',\n"
")"
msgstr ""

#: ../dev_guide/python_style_guide.rst:142
msgid "Tabs or Spaces?"
msgstr ""

#: ../dev_guide/python_style_guide.rst:144
msgid "Never mix tabs and spaces."
msgstr ""

#: ../dev_guide/python_style_guide.rst:146
msgid "The most popular way of indenting Python is with spaces only.  The second-most popular way is with tabs only.  Code indented with a mixture of tabs and spaces should be converted to using spaces exclusively.  When invoking the Python command line interpreter with the ``-t`` option, it issues warnings about code that illegally mixes tabs and spaces.  When using ``-tt`` these warnings become errors. These options are highly recommended!"
msgstr ""

#: ../dev_guide/python_style_guide.rst:154
msgid "For new projects, spaces-only are strongly recommended over tabs. Most editors have features that make this easy to do."
msgstr ""

#: ../dev_guide/python_style_guide.rst:159
msgid "Maximum Line Length"
msgstr ""

#: ../dev_guide/python_style_guide.rst:161
msgid "Limit all lines to a maximum of 79 characters."
msgstr ""

#: ../dev_guide/python_style_guide.rst:163
msgid "There are still many devices around that are limited to 80 character lines; plus, limiting windows to 80 characters makes it possible to have several windows side-by-side.  The default wrapping on such devices disrupts the visual structure of the code, making it more difficult to understand.  Therefore, please limit all lines to a maximum of 79 characters.  For flowing long blocks of text (docstrings or comments), limiting the length to 72 characters is recommended."
msgstr ""

#: ../dev_guide/python_style_guide.rst:171
msgid "The preferred way of wrapping long lines is by using Python's implied line continuation inside parentheses, brackets and braces.  Long lines can be broken over multiple lines by wrapping expressions in parentheses. These should be used in preference to using a backslash for line continuation."
msgstr ""

#: ../dev_guide/python_style_guide.rst:177
msgid "Backslashes may still be appropriate at times.  For example, long, multiple ``with``-statements cannot use implicit continuation, so backslashes are acceptable::"
msgstr ""

#: ../dev_guide/python_style_guide.rst:181
msgid "with open('/path/to/some/file/you/want/to/read') as file_1, \\\n"
"        open('/path/to/some/file/being/written', 'w') as file_2:\n"
"    file_2.write(file_1.read())"
msgstr ""

#: ../dev_guide/python_style_guide.rst:185
msgid "Another such case is with ``assert`` statements."
msgstr ""

#: ../dev_guide/python_style_guide.rst:187
msgid "Make sure to indent the continued line appropriately.  The preferred place to break around a binary operator is *after* the operator, not before it.  Some examples::"
msgstr ""

#: ../dev_guide/python_style_guide.rst:191
msgid "class Rectangle(Blob):\n"
"\n"
"    def __init__(self, width, height,\n"
"                 color='black', emphasis=None, highlight=0):\n"
"        if (width == 0 and height == 0 and\n"
"            color == 'red' and emphasis == 'strong' or\n"
"            highlight > 100):\n"
"            raise ValueError(\"sorry, you lose\")\n"
"        if width == 0 and height == 0 and (color == 'red' or\n"
"                                           emphasis is None):\n"
"            raise ValueError(\"I don't think so -- values are %s, %s\" %\n"
"                             (width, height))\n"
"        Blob.__init__(self, width, height,\n"
"                      color, emphasis, highlight)"
msgstr ""

#: ../dev_guide/python_style_guide.rst:208
msgid "Blank Lines"
msgstr ""

#: ../dev_guide/python_style_guide.rst:210
msgid "Separate top-level function and class definitions with two blank lines."
msgstr ""

#: ../dev_guide/python_style_guide.rst:213
msgid "Method definitions inside a class are separated by a single blank line."
msgstr ""

#: ../dev_guide/python_style_guide.rst:216
msgid "Extra blank lines may be used (sparingly) to separate groups of related functions.  Blank lines may be omitted between a bunch of related one-liners (e.g. a set of dummy implementations)."
msgstr ""

#: ../dev_guide/python_style_guide.rst:220
msgid "Use blank lines in functions, sparingly, to indicate logical sections."
msgstr ""

#: ../dev_guide/python_style_guide.rst:222
msgid "Python accepts the control-L (i.e. ^L) form feed character as whitespace; Many tools treat these characters as page separators, so you may use them to separate pages of related sections of your file. Note, some editors and web-based code viewers may not recognize control-L as a form feed and will show another glyph in its place."
msgstr ""

#: ../dev_guide/python_style_guide.rst:230
msgid "Encodings (PEP 263)"
msgstr ""

#: ../dev_guide/python_style_guide.rst:232
msgid "Code in the core Python distribution should always use the ASCII or Latin-1 encoding (a.k.a. ISO-8859-1).  For Python 3.0 and beyond, UTF-8 is preferred over Latin-1, see PEP 3120."
msgstr ""

#: ../dev_guide/python_style_guide.rst:236
msgid "Files using ASCII should not have a coding cookie.  Latin-1 (or UTF-8) should only be used when a comment or docstring needs to mention an author name that requires Latin-1; otherwise, using ``\\x``, ``\\u`` or ``\\U`` escapes is the preferred way to include non-ASCII data in string literals."
msgstr ""

#: ../dev_guide/python_style_guide.rst:242
msgid "For Python 3.0 and beyond, the following policy is prescribed for the standard library (see PEP 3131): All identifiers in the Python standard library MUST use ASCII-only identifiers, and SHOULD use English words wherever feasible (in many cases, abbreviations and technical terms are used which aren't English). In addition, string literals and comments must also be in ASCII. The only exceptions are (a) test cases testing the non-ASCII features, and (b) names of authors. Authors whose names are not based on the latin alphabet MUST provide a latin transliteration of their names."
msgstr ""

#: ../dev_guide/python_style_guide.rst:253
msgid "Open source projects with a global audience are encouraged to adopt a similar policy."
msgstr ""

#: ../dev_guide/python_style_guide.rst:259
msgid "Imports"
msgstr ""

#: ../dev_guide/python_style_guide.rst:261
msgid "Imports should usually be on separate lines, e.g.::"
msgstr ""

#: ../dev_guide/python_style_guide.rst:268
msgid "It's okay to say this though::"
msgstr ""

#: ../dev_guide/python_style_guide.rst:272
msgid "Imports are always put at the top of the file, just after any module comments and docstrings, and before module globals and constants."
msgstr ""

#: ../dev_guide/python_style_guide.rst:275
msgid "Imports should be grouped in the following order:"
msgstr ""

#: ../dev_guide/python_style_guide.rst:277
msgid "standard library imports"
msgstr ""

#: ../dev_guide/python_style_guide.rst:278
msgid "related third party imports"
msgstr ""

#: ../dev_guide/python_style_guide.rst:279
msgid "local application/library specific imports"
msgstr ""

#: ../dev_guide/python_style_guide.rst:281
msgid "You should put a blank line between each group of imports."
msgstr ""

#: ../dev_guide/python_style_guide.rst:283
msgid "Put any relevant ``__all__`` specification after the imports."
msgstr ""

#: ../dev_guide/python_style_guide.rst:285
msgid "Relative imports for intra-package imports are highly discouraged. Always use the absolute package path for all imports.  Even now that PEP 328 is fully implemented in Python 2.5, its style of explicit relative imports is actively discouraged; absolute imports are more portable and usually more readable."
msgstr ""

#: ../dev_guide/python_style_guide.rst:291
msgid "When importing a class from a class-containing module, it's usually okay to spell this::"
msgstr ""

#: ../dev_guide/python_style_guide.rst:297
msgid "If this spelling causes local name clashes, then spell them ::"
msgstr ""

#: ../dev_guide/python_style_guide.rst:302
msgid "and use \"myclass.MyClass\" and \"foo.bar.yourclass.YourClass\"."
msgstr ""

#: ../dev_guide/python_style_guide.rst:307
msgid "Whitespace in Expressions and Statements"
msgstr ""

#: ../dev_guide/python_style_guide.rst:311
msgid "Pet Peeves"
msgstr ""

#: ../dev_guide/python_style_guide.rst:313
msgid "Avoid extraneous whitespace in the following situations:"
msgstr ""

#: ../dev_guide/python_style_guide.rst:315
msgid "Immediately inside parentheses, brackets or braces. ::"
msgstr ""

#: ../dev_guide/python_style_guide.rst:320
msgid "Immediately before a comma, semicolon, or colon::"
msgstr ""

#: ../dev_guide/python_style_guide.rst:325
msgid "Immediately before the open parenthesis that starts the argument list of a function call::"
msgstr ""

#: ../dev_guide/python_style_guide.rst:331
msgid "Immediately before the open parenthesis that starts an indexing or slicing::"
msgstr ""

#: ../dev_guide/python_style_guide.rst:337
msgid "More than one space around an assignment (or other) operator to align it with another."
msgstr ""

#: ../dev_guide/python_style_guide.rst:355
msgid "Other Recommendations"
msgstr ""

#: ../dev_guide/python_style_guide.rst:357
msgid "Always surround these binary operators with a single space on either side: assignment (``=``), augmented assignment (``+=``, ``-=`` etc.), comparisons (``==``, ``<``, ``>``, ``!=``, ``<>``, ``<=``, ``>=``, ``in``, ``not in``, ``is``, ``is not``), Booleans (``and``, ``or``, ``not``)."
msgstr ""

#: ../dev_guide/python_style_guide.rst:363
msgid "If operators with different priorities are used, consider adding whitespace around the operators with the lowest priority(ies). Use your own judgement; however, never use more than one space, and always have the same amount of whitespace on both sides of a binary operator."
msgstr ""

#: ../dev_guide/python_style_guide.rst:385
msgid "Don't use spaces around the ``=`` sign when used to indicate a keyword argument or a default parameter value."
msgstr ""

#: ../dev_guide/python_style_guide.rst:398
msgid "Compound statements (multiple statements on the same line) are generally discouraged."
msgstr ""

#: ../dev_guide/python_style_guide.rst:409
#: ../dev_guide/python_style_guide.rst:418
msgid "Rather not::"
msgstr ""

#: ../dev_guide/python_style_guide.rst:414
msgid "While sometimes it's okay to put an if/for/while with a small body on the same line, never do this for multi-clause statements.  Also avoid folding such long lines!"
msgstr ""

#: ../dev_guide/python_style_guide.rst:424
msgid "Definitely not::"
msgstr ""

#: ../dev_guide/python_style_guide.rst:439
msgid "Comments"
msgstr ""

#: ../dev_guide/python_style_guide.rst:441
msgid "Comments that contradict the code are worse than no comments.  Always make a priority of keeping the comments up-to-date when the code changes!"
msgstr ""

#: ../dev_guide/python_style_guide.rst:445
msgid "Comments should be complete sentences.  If a comment is a phrase or sentence, its first word should be capitalized, unless it is an identifier that begins with a lower case letter (never alter the case of identifiers!)."
msgstr ""

#: ../dev_guide/python_style_guide.rst:450
msgid "If a comment is short, the period at the end can be omitted.  Block comments generally consist of one or more paragraphs built out of complete sentences, and each sentence should end in a period."
msgstr ""

#: ../dev_guide/python_style_guide.rst:454
msgid "You should use two spaces after a sentence-ending period."
msgstr ""

#: ../dev_guide/python_style_guide.rst:456
msgid "When writing English, Strunk and White apply."
msgstr ""

#: ../dev_guide/python_style_guide.rst:458
msgid "Python coders from non-English speaking countries: please write your comments in English, unless you are 120% sure that the code will never be read by people who don't speak your language."
msgstr ""

#: ../dev_guide/python_style_guide.rst:464
msgid "Block Comments"
msgstr ""

#: ../dev_guide/python_style_guide.rst:466
msgid "Block comments generally apply to some (or all) code that follows them, and are indented to the same level as that code.  Each line of a block comment starts with a ``#`` and a single space (unless it is indented text inside the comment)."
msgstr ""

#: ../dev_guide/python_style_guide.rst:471
msgid "Paragraphs inside a block comment are separated by a line containing a single ``#``."
msgstr ""

#: ../dev_guide/python_style_guide.rst:476
msgid "Inline Comments"
msgstr ""

#: ../dev_guide/python_style_guide.rst:478
msgid "Use inline comments sparingly."
msgstr ""

#: ../dev_guide/python_style_guide.rst:480
msgid "An inline comment is a comment on the same line as a statement. Inline comments should be separated by at least two spaces from the statement.  They should start with a # and a single space."
msgstr ""

#: ../dev_guide/python_style_guide.rst:484
msgid "Inline comments are unnecessary and in fact distracting if they state the obvious.  Don't do this::"
msgstr ""

#: ../dev_guide/python_style_guide.rst:487
msgid "x = x + 1                 # Increment x"
msgstr ""

#: ../dev_guide/python_style_guide.rst:489
msgid "But sometimes, this is useful::"
msgstr ""

#: ../dev_guide/python_style_guide.rst:491
msgid "x = x + 1                 # Compensate for border"
msgstr ""

#: ../dev_guide/python_style_guide.rst:495
msgid "Documentation Strings"
msgstr ""

#: ../dev_guide/python_style_guide.rst:497
msgid "Conventions for writing good documentation strings (a.k.a. \"docstrings\") are immortalized in PEP 257."
msgstr ""

#: ../dev_guide/python_style_guide.rst:500
msgid "Write docstrings for all public modules, functions, classes, and methods.  Docstrings are not necessary for non-public methods, but you should have a comment that describes what the method does.  This comment should appear after the ``def`` line."
msgstr ""

#: ../dev_guide/python_style_guide.rst:505
msgid "PEP 257 describes good docstring conventions.  Note that most importantly, the ``\"\"\"`` that ends a multiline docstring should be on a line by itself, and preferably preceded by a blank line, e.g.::"
msgstr ""

#: ../dev_guide/python_style_guide.rst:515
msgid "For one liner docstrings, it's okay to keep the closing ``\"\"\"`` on the same line."
msgstr ""

#: ../dev_guide/python_style_guide.rst:521
msgid "Version Bookkeeping"
msgstr ""

#: ../dev_guide/python_style_guide.rst:523
msgid "If you have to have Subversion, CVS, or RCS crud in your source file, do it as follows. ::"
msgstr ""

#: ../dev_guide/python_style_guide.rst:526
msgid "__version__ = \"$Revision$\"\n"
"# $Source$"
msgstr ""

#: ../dev_guide/python_style_guide.rst:529
msgid "These lines should be included after the module's docstring, before any other code, separated by a blank line above and below."
msgstr ""

#: ../dev_guide/python_style_guide.rst:535
msgid "Naming Conventions"
msgstr ""

#: ../dev_guide/python_style_guide.rst:537
msgid "The naming conventions of Python's library are a bit of a mess, so we'll never get this completely consistent -- nevertheless, here are the currently recommended naming standards.  New modules and packages (including third party frameworks) should be written to these standards, but where an existing library has a different style, internal consistency is preferred."
msgstr ""

#: ../dev_guide/python_style_guide.rst:546
msgid "Descriptive: Naming Styles"
msgstr ""

#: ../dev_guide/python_style_guide.rst:548
msgid "There are a lot of different naming styles.  It helps to be able to recognize what naming style is being used, independently from what they are used for."
msgstr ""

#: ../dev_guide/python_style_guide.rst:552
msgid "The following naming styles are commonly distinguished:"
msgstr ""

#: ../dev_guide/python_style_guide.rst:554
msgid "``b`` (single lowercase letter)"
msgstr ""

#: ../dev_guide/python_style_guide.rst:555
msgid "``B`` (single uppercase letter)"
msgstr ""

#: ../dev_guide/python_style_guide.rst:556
msgid "``lowercase``"
msgstr ""

#: ../dev_guide/python_style_guide.rst:557
msgid "``lower_case_with_underscores``"
msgstr ""

#: ../dev_guide/python_style_guide.rst:558
msgid "``UPPERCASE``"
msgstr ""

#: ../dev_guide/python_style_guide.rst:559
msgid "``UPPER_CASE_WITH_UNDERSCORES``"
msgstr ""

#: ../dev_guide/python_style_guide.rst:560
msgid "``CapitalizedWords`` (or CapWords, or CamelCase -- so named because of the bumpy look of its letters [3]_).  This is also sometimes known as StudlyCaps."
msgstr ""

#: ../dev_guide/python_style_guide.rst:564
msgid "Note: When using abbreviations in CapWords, capitalize all the letters of the abbreviation.  Thus HTTPServerError is better than HttpServerError."
msgstr ""

#: ../dev_guide/python_style_guide.rst:567
msgid "``mixedCase`` (differs from CapitalizedWords by initial lowercase character!)"
msgstr ""

#: ../dev_guide/python_style_guide.rst:569
msgid "``Capitalized_Words_With_Underscores`` (ugly!)"
msgstr ""

#: ../dev_guide/python_style_guide.rst:571
msgid "There's also the style of using a short unique prefix to group related names together.  This is not used much in Python, but it is mentioned for completeness.  For example, the ``os.stat()`` function returns a tuple whose items traditionally have names like ``st_mode``, ``st_size``, ``st_mtime`` and so on.  (This is done to emphasize the correspondence with the fields of the POSIX system call struct, which helps programmers familiar with that.)"
msgstr ""

#: ../dev_guide/python_style_guide.rst:579
msgid "The X11 library uses a leading X for all its public functions.  In Python, this style is generally deemed unnecessary because attribute and method names are prefixed with an object, and function names are prefixed with a module name."
msgstr ""

#: ../dev_guide/python_style_guide.rst:584
msgid "In addition, the following special forms using leading or trailing underscores are recognized (these can generally be combined with any case convention):"
msgstr ""

#: ../dev_guide/python_style_guide.rst:588
msgid "``_single_leading_underscore``: weak \"internal use\" indicator. E.g. ``from M import *`` does not import objects whose name starts with an underscore."
msgstr ""

#: ../dev_guide/python_style_guide.rst:592
msgid "``single_trailing_underscore_``: used by convention to avoid conflicts with Python keyword, e.g. ::"
msgstr ""

#: ../dev_guide/python_style_guide.rst:597
msgid "``__double_leading_underscore``: when naming a class attribute, invokes name mangling (inside class FooBar, ``__boo`` becomes ``_FooBar__boo``; see below)."
msgstr ""

#: ../dev_guide/python_style_guide.rst:601
msgid "``__double_leading_and_trailing_underscore__``: \"magic\" objects or attributes that live in user-controlled namespaces. E.g. ``__init__``, ``__import__`` or ``__file__``.  Never invent such names; only use them as documented."
msgstr ""

#: ../dev_guide/python_style_guide.rst:608
msgid "Prescriptive: Naming Conventions"
msgstr ""

#: ../dev_guide/python_style_guide.rst:612
msgid "Names to Avoid"
msgstr ""

#: ../dev_guide/python_style_guide.rst:614
msgid "Never use the characters 'l' (lowercase letter el), 'O' (uppercase letter oh), or 'I' (uppercase letter eye) as single character variable names."
msgstr ""

#: ../dev_guide/python_style_guide.rst:618
msgid "In some fonts, these characters are indistinguishable from the numerals one and zero.  When tempted to use 'l', use 'L' instead."
msgstr ""

#: ../dev_guide/python_style_guide.rst:623
msgid "Package and Module Names"
msgstr ""

#: ../dev_guide/python_style_guide.rst:625
msgid "Modules should have short, all-lowercase names.  Underscores can be used in the module name if it improves readability.  Python packages should also have short, all-lowercase names, although the use of underscores is discouraged."
msgstr ""

#: ../dev_guide/python_style_guide.rst:630
msgid "Since module names are mapped to file names, and some file systems are case insensitive and truncate long names, it is important that module names be chosen to be fairly short -- this won't be a problem on Unix, but it may be a problem when the code is transported to older Mac or Windows versions, or DOS."
msgstr ""

#: ../dev_guide/python_style_guide.rst:636
msgid "When an extension module written in C or C++ has an accompanying Python module that provides a higher level (e.g. more object oriented) interface, the C/C++ module has a leading underscore (e.g. ``_socket``)."
msgstr ""

#: ../dev_guide/python_style_guide.rst:643
msgid "Class Names"
msgstr ""

#: ../dev_guide/python_style_guide.rst:645
msgid "Almost without exception, class names use the CapWords convention. Classes for internal use have a leading underscore in addition."
msgstr ""

#: ../dev_guide/python_style_guide.rst:650
msgid "Exception Names"
msgstr ""

#: ../dev_guide/python_style_guide.rst:652
msgid "Because exceptions should be classes, the class naming convention applies here.  However, you should use the suffix \"Error\" on your exception names (if the exception actually is an error)."
msgstr ""

#: ../dev_guide/python_style_guide.rst:658
msgid "Global Variable Names"
msgstr ""

#: ../dev_guide/python_style_guide.rst:660
msgid "(Let's hope that these variables are meant for use inside one module only.)  The conventions are about the same as those for functions."
msgstr ""

#: ../dev_guide/python_style_guide.rst:663
msgid "Modules that are designed for use via ``from M import *`` should use the ``__all__`` mechanism to prevent exporting globals, or use the older convention of prefixing such globals with an underscore (which you might want to do to indicate these globals are \"module non-public\")."
msgstr ""

#: ../dev_guide/python_style_guide.rst:671
msgid "Function Names"
msgstr ""

#: ../dev_guide/python_style_guide.rst:673
msgid "Function names should be lowercase, with words separated by underscores as necessary to improve readability."
msgstr ""

#: ../dev_guide/python_style_guide.rst:676
msgid "mixedCase is allowed only in contexts where that's already the prevailing style (e.g. threading.py), to retain backwards compatibility."
msgstr ""

#: ../dev_guide/python_style_guide.rst:682
msgid "Function and method arguments"
msgstr ""

#: ../dev_guide/python_style_guide.rst:684
msgid "Always use ``self`` for the first argument to instance methods."
msgstr ""

#: ../dev_guide/python_style_guide.rst:686
msgid "Always use ``cls`` for the first argument to class methods."
msgstr ""

#: ../dev_guide/python_style_guide.rst:688
msgid "If a function argument's name clashes with a reserved keyword, it is generally better to append a single trailing underscore rather than use an abbreviation or spelling corruption.  Thus ``class_`` is better than ``clss``.  (Perhaps better is to avoid such clashes by using a synonym.)"
msgstr ""

#: ../dev_guide/python_style_guide.rst:696
msgid "Method Names and Instance Variables"
msgstr ""

#: ../dev_guide/python_style_guide.rst:698
msgid "Use the function naming rules: lowercase with words separated by underscores as necessary to improve readability."
msgstr ""

#: ../dev_guide/python_style_guide.rst:701
msgid "Use one leading underscore only for non-public methods and instance variables."
msgstr ""

#: ../dev_guide/python_style_guide.rst:704
msgid "To avoid name clashes with subclasses, use two leading underscores to invoke Python's name mangling rules."
msgstr ""

#: ../dev_guide/python_style_guide.rst:707
msgid "Python mangles these names with the class name: if class Foo has an attribute named ``__a``, it cannot be accessed by ``Foo.__a``.  (An insistent user could still gain access by calling ``Foo._Foo__a``.) Generally, double leading underscores should be used only to avoid name conflicts with attributes in classes designed to be subclassed."
msgstr ""

#: ../dev_guide/python_style_guide.rst:713
msgid "Note: there is some controversy about the use of __names (see below)."
msgstr ""

#: ../dev_guide/python_style_guide.rst:717
msgid "Constants"
msgstr ""

#: ../dev_guide/python_style_guide.rst:719
msgid "Constants are usually defined on a module level and written in all capital letters with underscores separating words.  Examples include ``MAX_OVERFLOW`` and ``TOTAL``."
msgstr ""

#: ../dev_guide/python_style_guide.rst:725
msgid "Designing for inheritance"
msgstr ""

#: ../dev_guide/python_style_guide.rst:727
msgid "Always decide whether a class's methods and instance variables (collectively: \"attributes\") should be public or non-public.  If in doubt, choose non-public; it's easier to make it public later than to make a public attribute non-public."
msgstr ""

#: ../dev_guide/python_style_guide.rst:732
msgid "Public attributes are those that you expect unrelated clients of your class to use, with your commitment to avoid backward incompatible changes.  Non-public attributes are those that are not intended to be used by third parties; you make no guarantees that non-public attributes won't change or even be removed."
msgstr ""

#: ../dev_guide/python_style_guide.rst:738
msgid "We don't use the term \"private\" here, since no attribute is really private in Python (without a generally unnecessary amount of work)."
msgstr ""

#: ../dev_guide/python_style_guide.rst:741
msgid "Another category of attributes are those that are part of the \"subclass API\" (often called \"protected\" in other languages).  Some classes are designed to be inherited from, either to extend or modify aspects of the class's behavior.  When designing such a class, take care to make explicit decisions about which attributes are public, which are part of the subclass API, and which are truly only to be used by your base class."
msgstr ""

#: ../dev_guide/python_style_guide.rst:749
msgid "With this in mind, here are the Pythonic guidelines:"
msgstr ""

#: ../dev_guide/python_style_guide.rst:751
msgid "Public attributes should have no leading underscores."
msgstr ""

#: ../dev_guide/python_style_guide.rst:753
msgid "If your public attribute name collides with a reserved keyword, append a single trailing underscore to your attribute name.  This is preferable to an abbreviation or corrupted spelling.  (However, not withstanding this rule, 'cls' is the preferred spelling for any variable or argument which is known to be a class, especially the first argument to a class method.)"
msgstr ""

#: ../dev_guide/python_style_guide.rst:761
#: ../dev_guide/python_style_guide.rst:772
#: ../dev_guide/python_style_guide.rst:794
msgid "Note 1:"
msgstr ""

#: ../dev_guide/python_style_guide.rst:761
msgid "See the argument name recommendation above for class methods."
msgstr ""

#: ../dev_guide/python_style_guide.rst:763
msgid "For simple public data attributes, it is best to expose just the attribute name, without complicated accessor/mutator methods.  Keep in mind that Python provides an easy path to future enhancement, should you find that a simple data attribute needs to grow functional behavior.  In that case, use properties to hide functional implementation behind simple data attribute access syntax."
msgstr ""

#: ../dev_guide/python_style_guide.rst:772
msgid "Properties only work on new-style classes."
msgstr ""

#: ../dev_guide/python_style_guide.rst:776
#: ../dev_guide/python_style_guide.rst:799
msgid "Note 2:"
msgstr ""

#: ../dev_guide/python_style_guide.rst:775
msgid "Try to keep the functional behavior side-effect free, although side-effects such as caching are generally fine."
msgstr ""

#: ../dev_guide/python_style_guide.rst:781
#: ../dev_guide/python_style_guide.rst:804
msgid "Note 3:"
msgstr ""

#: ../dev_guide/python_style_guide.rst:779
msgid "Avoid using properties for computationally expensive operations; the attribute notation makes the caller believe that access is (relatively) cheap."
msgstr ""

#: ../dev_guide/python_style_guide.rst:783
msgid "If your class is intended to be subclassed, and you have attributes that you do not want subclasses to use, consider naming them with double leading underscores and no trailing underscores.  This invokes Python's name mangling algorithm, where the name of the class is mangled into the attribute name.  This helps avoid attribute name collisions should subclasses inadvertently contain attributes with the same name."
msgstr ""

#: ../dev_guide/python_style_guide.rst:792
msgid "Note that only the simple class name is used in the mangled name, so if a subclass chooses both the same class name and attribute name, you can still get name collisions."
msgstr ""

#: ../dev_guide/python_style_guide.rst:797
msgid "Name mangling can make certain uses, such as debugging and ``__getattr__()``, less convenient.  However the name mangling algorithm is well documented and easy to perform manually."
msgstr ""

#: ../dev_guide/python_style_guide.rst:802
msgid "Not everyone likes name mangling.  Try to balance the need to avoid accidental name clashes with potential use by advanced callers."
msgstr ""

#: ../dev_guide/python_style_guide.rst:808
msgid "References"
msgstr ""

#: ../dev_guide/python_style_guide.rst:810
msgid "`PEP 7, Style Guide for C Code, van Rossum <https://www.python.org/dev/peps/pep-0007/>`_"
msgstr ""

#: ../dev_guide/python_style_guide.rst:811
msgid "`Barry's GNU Mailman style guide <http://barry.warsaw.us/software/STYLEGUIDE.txt>`_"
msgstr ""

#: ../dev_guide/python_style_guide.rst:812
msgid "`CamelCase Wikipedia page <http://www.wikipedia.com/wiki/CamelCase>`_"
msgstr ""

#: ../dev_guide/python_style_guide.rst:816
msgid "Copyright"
msgstr ""

#: ../dev_guide/python_style_guide.rst:818
msgid "Author:"
msgstr ""

#: ../dev_guide/python_style_guide.rst:820
msgid "Guido van Rossum <guido@python.org>"
msgstr ""

#: ../dev_guide/python_style_guide.rst:821
msgid "Barry Warsaw <barry@python.org>"
msgstr ""

#: ../dev_guide/release_management.rst:19
msgid "Release management"
msgstr ""

#: ../dev_guide/release_management.rst:22
msgid "How to make a minor release"
msgstr ""

#: ../dev_guide/release_management.rst:24
msgid "$ git tag -a 1.4.4 -m \"Next minor in 1.4 series\"\n"
"$ vim CMakeLists.txt # edit CPACK_PACKAGE_VERSION_PATCH\n"
"$ git push --tags"
msgstr ""

#: ../dev_guide/release_management.rst:30
msgid "Update the Web site in doc/www"
msgstr ""

#: ../dev_guide/release_management.rst:32
msgid "Update all issues, upload the ChangeLog based on ``git log`` output. The ChangeLog must only include items which are mentioned as issues on github. If anything significant is there, which is not mentioned, something went wrong in release planning and the release should be held up until this is cleared."
msgstr ""

#: ../dev_guide/release_management.rst:38
msgid "Click 'Release milestone'. Create a milestone for the next minor release. Alert the driver to target bugs and blueprints to the new milestone."
msgstr ""

