; Tarantool IPROTO protocol.
;
; The latest version of this document can be found in
; tarantool source tree, doc/box-protocol.txt
;
; IPROTO is a binary request/response protocol that features a
; complete access to Tarantool functionality, including:
; - request multiplexing, e.g. ability to asynchronously issue
;   multiple requests via the same connection
; - response format that supports zero-copy writes
;
; For data structuring and encoding, the protocol uses msgpack
; data format, see http://msgpack.org
;
; Since msgpack uses a variying representation for compound
; data structures, such as arrays and maps, the exact byte
; sequence mandated by msgpack format is omitted in this spec.
; This spec therefore only defines the expected **schema**
; of message pack streams.
;
; To specify that a message pack map is expected in the stream,
; the contents of the map is put into "{}" (curly braces).
;
; To specify that a message pack array is expected in the stream,
; the contents of the array is put into "[]" (square brackets).
;
; A single key-value pair in a map is separated by a ":" (semicolon),
; values of a map or array are separated by "," (comma).
;
; Tarantool protocol mandates use of a few integer constants
; serving as keys in maps used in the protocol. These constants are
; defined in
; https://github.com/tarantool/tarantool/blob/master/src/iproto_constants.h
;
; Let's list them here too:
;

<code>          ::= 0x00
<sync>          ::= 0x01
<space_id>      ::= 0x10
<index_id>      ::= 0x11
<limit>         ::= 0x12
<offset>        ::= 0x13
<iterator>      ::= 0x14
<key>           ::= 0x20
<tuple>         ::= 0x21
<function_name> ::= 0x22
<data>          ::= 0x30
<error>         ::= 0x31

;
; The constants define the value of the map.
; All requests and responses utilize the same basic structure

<packet> ::= <request> | <response>

<request> ::= <len><header><body>
<response> ::= <len><header><body>

; <len> is the length of the packet, in message pack format.
;
; Implementor note: for simplicity of the implementation,
; the server never "compresses" the packet length, i.e.
; it is always passed as MessagePack 32-bit unsigned int,
; 0xce b4 b3 b2 b1 (5 bytes)
;
<len> ::= MessagePack Int (unsigned)

;
; Both <header> and <body> are message pack maps:

<header> ::= { (<key> : <value>)+ }
<body> ::= { (<key> : <value>)+ }

; They only differ in the allowed set of keys and values,
; and the key defines the type of value that follows.
; If a key is missing, and expects an integer value,
; the missing value is always assumed to be 0. If the
; missing key assumes a string value, the string is assumed
; to be empty.

<key> ::= <header_key> | <body_key>

<header_key> ::= <code> | <sync>

;
; <code> is request code or response code
;

; Value for <code> key in request can be:
; 0  -- <ping>
; 1  -- <select>
; 2  -- <insert>
; 3  -- <replace>
; 4  -- <update>
; 5  -- <delete>
; 6  -- <call>

; Value of <code> key in response is:
; 0  -- SUCCESS
; !0 -- Tarantool error code
; If response <code> is 0 (success), response body contains zero or
; more tuples, otherwise it carries an error message that corresponds
; to the return code.

; <sync> is a unique request identifier, preserved in the response,
; The identifier is necessary to allow request multiplexing --
; i.e. sending multiple requests through the same connection
; before fetching a response to any of them.
; The value of the identifier currently bears no meaning to the
; server. Consequently, <sync> can be 0 or two requests
; can have an identical id.

<body_key> ::= <request_key> | <response_key>

; Different request types allow different keys in the body:

<request_key> ::= <select> | <replace> | <delete> | <update> | <call>

; Specify which space to query, which index in the space
; to use, offset in the resulting tuple set (set to 0 for no offset),
; a limit (set to 4294967295 for no limit), and a key to use in lookup.

; Find tuples matching the search pattern
<select> ::= <space_id> | <index_id> | <iterator> | <offset> | <limit> | <key>

; Insert a tuple into the space or replace an existing one.

<replace> ::= <space_id> | <index_id> | <tuple>

; Insert is similar to replace, but will return a duplicate key
; error if such tuple already exists.
<insert> ::= <space_id> | <index_id> | <tuple>

; Delete a tuple
<delete> ::= <space_id> | <index_id> | <key>

; Update a tuple
<udpate> ::= <space_id> | <index_id> | <key> | <tuple>

; Call a stored function
<call> ::= <function_name> | <tuple>

; As can be seen from the grammar some requests have common keys,
; whereas other keys can be present only in a body of a single
; request type.


; <space_id> Space to use in the request
; The find the numeric space id by space name, one
; must first query "_space" system space.

; <index_id> Index to use in the request
; Similarly to space, to find the  numeric index id
; by index name, one must query the "_index" system space.

; <tuple> defines the actual argument of the operation
; in <replace> it defines the tuple which will be inserted
; into the database.
; In <call> it defines call arguments.
; When request body allows <tuple> as a key, it must always
; be present, since otherwise the request is meaningless.

; <offset> in the result set, expects <uint32> value
; <limit> limit in the result set, expects a <uint32> value
; <iterator> specifies the iterator type to use in search
; <function_name> is used to give call path for a Lua function

; <tuple> in <update> must carry a list of update operations:

<op_list> ::= [ (<operation>)+ ]

<operation> ::= [ <op>, <field_no>, (<argument>)+ ]

<field_no> ::= <int32>

;
; <op> is a 1-byte string carrying operation code:

; "=" - assign operation argument to field <field_no>;
;       will extend the tuple if <field_no> == <max_field_no> + 1
; "#" - delete <argument> fields starting from <field_no>
; "!" - insert <argument> before <field_no>

; The following operation(s) are only defined for integer
; types (32 and 64 bit):

; "+" - add argument to field <field_no>, both arguments
;       are treated as signed 32 or 64 -bit ints
; "-" - subtract argument from the field <field_no>
; "&" - bitwise AND of argument and field <field_no>
; "^" - bitwise XOR of argument and field <field_no>
; "|" - bitwise OR of argument and field <field_no>

; Finally there is an operation that expects offset, cut and string
; arguments
; ":" - implementation of Perl 'splice' command

;
; It's an error to specify an argument of a type that
; differs from expected type.
;
<op_arg> ::= <field> | <op_arg_splice>

<op_arg_splice> ::= <message_pack_array(3)> # <offset><length><string>


; The server always returns a tuple or tuples, when found,
; on success.
; I.e. on success, response <body> contains <set> key.
; For select/update/delete, it's the tuple that matched
; the search criterion. For <replace>, it's the inserted tuple.
; For <call>, it's whatever the called function returns.

<response_key> = <data> | <error>

; Set of tuples in the response
<data> expects  a message pack array of tuples as value

; Error message is present in the response only if there is an error
; <error> expects ass value a message pack string

; The error <code> consists of the actual error code
; and request completion status, which is complementary:
; it can be deduced from the error code. There are only
; 3 completion status codes in use:
; 0  - success; The only possible error code with this status is
       0, ER_OK
; 1  - try again; An indicator of an intermittent error.
;      Usually is returned when two clients attempt to change
;      the same tuple simultaneously.
;      (<update> is not always done atomically)
; 2  - error
;
; The error code holds the actual error. Existing error codes include:
;
;  Completion status 0 (success)
;  -----------------------------
;  0x00000000 -- ER_OK
;
;  Completion status 1 (try again)
;  -------------------------------
;  0x00000201 -- ER_MEMORY_ISSUE
;                An error occurred when allocating memory
;
;  Completion status 2 (error)
;  ---------------------------
;  0x00000102 -- ER_ILLEGAL_PARAMS
;                Malformed query
;
;  0x00000302 -- ER_TUPLE_FOUND
;                Duplicate key exists in a unique index
;
; Convenience macros which define hexadecimal constants for
; <int32> return codes (completion status + code) can be found
; https://github.com/tarantool/tarantool/blob/master/src/errcode.h

; vim: syntax=bnf
